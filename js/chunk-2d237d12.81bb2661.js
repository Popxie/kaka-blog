(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d237d12"],{fd75:function(e,s,a){"use strict";a.r(s);var t=a("2877"),r=Object(t.a)({},(function(){var e=this;e.$createElement;return e._self._c,e._m(0)}),[function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("section",[a("html",[a("head"),a("body",[a("h1",[e._v("Git 内部原理之 Git 对象哈希")]),a("h2",[e._v("Git 对象的 hash 方法")]),a("p",[e._v("Git 中的数据对象、树对象和提交对象的 hash 方法原理是一样的，可以描述为：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("header = "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"<type> "')]),e._v(" + content.length + "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"\\0"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("hash")]),e._v(" = sha1(header + content)\n")])]),a("p",[e._v("上面公式表示，Git 在计算对象 hash 时，首先会在对象头部添加一个 "),a("code",{pre:!0},[e._v("header")]),e._v(" 。这个 "),a("code",{pre:!0},[e._v("header")]),e._v(" 由 3 部分组成：第一部分表示对象的类型，可以取值 "),a("code",{pre:!0},[e._v("blob")]),e._v("、 "),a("code",{pre:!0},[e._v("tree")]),e._v("、 "),a("code",{pre:!0},[e._v("commit")]),e._v(" 以分别表示数据对象、树对象、提交对象；第二部分是数据的字节长度；第三部分是一个空字节，用来将 "),a("code",{pre:!0},[e._v("header")]),e._v(" 和 "),a("code",{pre:!0},[e._v("content")]),e._v(" 分隔开。将 "),a("code",{pre:!0},[e._v("header")]),e._v(" 添加到 "),a("code",{pre:!0},[e._v("content")]),e._v(" 头部之后，使用 sha1 算法计算出一个 40 位的 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 值。")]),a("p",[e._v("在手动计算 Git 对象的 hash 时，有两点需要注意：")]),a("ul",[a("li",[e._v("1."),a("code",{pre:!0},[e._v("header")]),e._v(" 中第二部分关于数据长度的计算，一定是字节的长度而不是字符串的长度；")]),a("li",[e._v("2."),a("code",{pre:!0},[e._v("header + content")]),e._v(" 的操作并不是字符串级别的拼接，而是二进制级别的拼接。")])]),a("p",[e._v("各种 Git 对象的 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 方法相同，不同的在于：")]),a("ul",[a("li",[e._v("1.头部类型不同，数据对象是 "),a("code",{pre:!0},[e._v("blob")]),e._v("，树对象是 "),a("code",{pre:!0},[e._v("tree")]),e._v("，提交对象是 "),a("code",{pre:!0},[e._v("commit")]),e._v("；")]),a("li",[e._v("2.数据内容不同，数据对象的内容可以是任意内容，而树对象和提交对象的内容有固定的格式。")])]),a("p",[e._v("接下来分别讲数据对象、树对象和提交对象的具体的 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 方法。")]),a("h3",[e._v("数据对象")]),a("p",[e._v("数据对象的格式如下：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("blob <content length><NULL><content>\n")])]),a("p",[e._v("从上一篇"),a("a",{attrs:{href:""}},[e._v("文章")]),e._v("中我们知道，使用 "),a("code",{pre:!0},[e._v("git hash-object")]),e._v(" 可以计算出一个 40 位的 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 值，例如：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"what is up, doc?"')]),e._v(" | git hash-object --stdin\nbd9dbf5aae1a3862dd1526723246b20206e5fc37\n")])]),a("p",[e._v("注意，上面在 "),a("code",{pre:!0},[e._v("echo")]),e._v(" 后面使用了"),a("code",{pre:!0},[e._v("-n")]),e._v(" 选项，用来阻止自动在字符串末尾添加换行符，否则会导致实际传给 "),a("code",{pre:!0},[e._v("git hash-object")]),e._v(" 是 "),a("code",{pre:!0},[e._v("what is up, doc?\\n")]),e._v("，而不是我们直观认为的 "),a("code",{pre:!0},[e._v("what is up, doc?")]),e._v("。")]),a("p",[e._v("为验证前面提到的 Git 对象 hash 方法，我们使用 "),a("code",{pre:!0},[e._v("openssl sha1")]),e._v(" 来手动计算 "),a("code",{pre:!0},[e._v("what is up, doc?")]),e._v("的 hash 值：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"blob 16\\0what is up, doc?"')]),e._v(" | openssl sha1\nbd9dbf5aae1a3862dd1526723246b20206e5fc37\n")])]),a("p",[e._v("可以发现，手动计算出的 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 值与 "),a("code",{pre:!0},[e._v("git hash-object")]),e._v(" 计算出来的一模一样。")]),a("p",[e._v("在 Git 对象 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 方法的注意事项中，提到"),a("code",{pre:!0},[e._v("header")]),e._v("中第二部分关于数据长度的计算，一定是字节的长度而不是字符串的长度。由于 "),a("code",{pre:!0},[e._v("what is up, doc?")]),e._v("只有英文字符，在 UTF8 中恰好字符的长度和字节的长度都等于 16，很容易将这个长度误解为字符的长度。假设我们以中文来试验：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"中文"')]),e._v(" | git hash-object --stdin\nefbb13322ba66f682e179ebff5eeb1bd6ef83972\n$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"blob 2\\0中文"')]),e._v(" | openssl sha1\nd1dc2c3eed26b05289bddb857713b60b8c23ed29\n")])]),a("p",[e._v("我们可以看到，"),a("code",{pre:!0},[e._v("git hash-object")]),e._v(" 和 "),a("code",{pre:!0},[e._v("openssl sha1")]),e._v(" 计算出来的 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 值根本不一样。这是因为中文两个字符作为 UTF 格式存储后的字符长度不是 2，具体是多少呢？可以使用 wc 来计算：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"中文"')]),e._v(" | "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("wc")]),e._v(" -c\n6\n")])]),a("p",[a("code",{pre:!0},[e._v("中文")]),e._v("字符串的字节长度是 6，重新手动计算发现得出的 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 值就能对应上了：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"blob 6\\0中文"')]),e._v(" | openssl sha1\nefbb13322ba66f682e179ebff5eeb1bd6ef83972\n")])]),a("h3",[e._v("数对象")]),a("p",[e._v("树对象的内容格式如下：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("tree <content length><NUL><file mode> <filename><NUL><item sha>...\n")])]),a("p",[e._v("需要注意的是，"),a("code",{pre:!0},[e._v("<item sha>")]),e._v(" 部分是二进制形式的 "),a("code",{pre:!0},[e._v("sha1")]),e._v(" 码，而不是十六进制形式的 "),a("code",{pre:!0},[e._v("sha1")]),e._v(" 码。")]),a("p",[e._v("我们从上一篇"),a("a",{attrs:{href:""}},[e._v("文章")]),e._v("摘出一个树对象做实验，其内容如下：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579\n100644 blob 83baae61804e65cc73a7201a7252750c76066a30  test.txt\n")])]),a("p",[e._v("我们首先使用 "),a("code",{pre:!0},[e._v("xxd")]),e._v(" 把 "),a("code",{pre:!0},[e._v("83baae61804e65cc73a7201a7252750c76066a30")]),e._v(" 转换成为二进制形式，并将结果保存为 "),a("code",{pre:!0},[e._v("sha1.txt")]),e._v(" 以方便后面做追加操作：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"83baae61804e65cc73a7201a7252750c76066a30"')]),e._v(" | xxd -r -p > sha1.txt\n$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("cat")]),e._v(" tree-items.txt\n���a�Ne�s� rRu\n              vj0%\n")])]),a("p",[e._v("接下来构造 "),a("code",{pre:!0},[e._v("content")]),e._v(" 部分，并保存至文件 "),a("code",{pre:!0},[e._v("content.tx")]),e._v("t：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"100644 test.txt\\0"')]),e._v(" | "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("cat")]),e._v(" - sha1.txt > content.txt\n$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("cat")]),e._v(" content.txt\n100644 test.txt���a�Ne�s� rRu\n                             vj0%\n")])]),a("p",[e._v("计算 "),a("code",{pre:!0},[e._v("content")]),e._v(" 的长度：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("cat")]),e._v(" content.txt | "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("wc")]),e._v(" -c\n36\n那么最终该树对象的内容为：\n\n```bash\n$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"tree 36\\0"')]),e._v(" | "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("cat")]),e._v(" - content.txt\ntree 36100644 test.txt���a�Ne�s� rRu\n                                    vj0%\n")])]),a("p",[e._v("最后使用 "),a("code",{pre:!0},[e._v("openssl sha1")]),e._v(" 计算 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 值，可以发现和实验的 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 值是一样的：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"tree 36\\0"')]),e._v(" | "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("cat")]),e._v(" - content.txt | openssl sha1\nd8329fc1cc938780ffdd9f94e0d364e0ea74f579\n")])]),a("h3",[e._v("提交对象")]),a("p",[e._v("提交对象的格式如下：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("commit <content length><NUL>tree <tree sha>\nparent <parent sha>\n[parent <parent sha> "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("if")]),e._v(" several parents from merges]\nauthor <author name> <author e-mail> <timestamp> <timezone>\ncommitter <author name> <author e-mail> <timestamp> <timezone>\n\n<commit message>\n")])]),a("p",[e._v("我们从上一篇"),a("a",{attrs:{href:""}},[e._v("文章")]),e._v("摘出一个提交对象做实验，其内容如下：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'first commit'")]),e._v(" | git commit-tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579\ndb1d6f137952f2b24e3c85724ebd7528587a067a\n$ git cat-file -p db1d6f137952f2b24e3c85724ebd7528587a067a\ntree d8329fc1cc938780ffdd9f94e0d364e0ea74f579\nauthor jingsam <jing-sam@qq.com> 1528022503 +0800\ncommitter jingsam <jing-sam@qq.com> 1528022503 +0800\n\nfirst commit\n")])]),a("p",[e._v("这里需要注意的是，由于"),a("code",{pre:!0},[e._v("echo 'first commit'")]),e._v("没有添加-n 选项，因此实际的提交信息是"),a("code",{pre:!0},[e._v("first commit\\n")]),e._v("。使用 wc 计算出提交内容的字节数：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579\nauthor jingsam <jing-sam@qq.com> 1528022503 +0800\ncommitter jingsam <jing-sam@qq.com> 1528022503 +0800\n\nfirst commit\\n"')]),e._v(" | "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("wc")]),e._v(" -c\n163\n")])]),a("p",[e._v("那么，这个提交对象的 "),a("code",{pre:!0},[e._v("header")]),e._v(" 就是"),a("code",{pre:!0},[e._v("commit 163\\0")]),e._v("，手动把头部添加到提交内容中：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("commit 163\\0tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579\nauthor jingsam <jing-sam@qq.com> 1528022503 +0800\ncommitter jingsam <jing-sam@qq.com> 1528022503 +0800\n\nfirst commit\\n\n")])]),a("p",[e._v("使用 "),a("code",{pre:!0},[e._v("openssl sha1")]),e._v(" 计算这个上面内容的 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 值：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("$ "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("echo")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"commit 163\\0tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579\nauthor jingsam <jing-sam@qq.com> 1528022503 +0800\ncommitter jingsam <jing-sam@qq.com> 1528022503 +0800\n\nfirst commit\\n"')]),e._v(" | openssl sha1\ndb1d6f137952f2b24e3c85724ebd7528587a067a\n")])]),a("p",[e._v("可以看见，与实验的 hash 值是一样的。")]),a("h2",[e._v("总结")]),a("p",[e._v("这篇文章详细地分析了 Git 中的"),a("code",{pre:!0},[e._v("数据对象")]),e._v("、"),a("code",{pre:!0},[e._v("树对象")]),e._v("和"),a("code",{pre:!0},[e._v("提交对象")]),e._v("的 "),a("code",{pre:!0},[e._v("hash")]),e._v(" 方法，可以发现原理是非常简单的。数据对象和提交对象打印出来的内容与存储内容组织是一模一样的，可以很直观的理解。对于树对象，其打印出来的内容和实际存储是有区别的，增加了一些实现上的难度。例如，使用二进制形式的 hash 值而不是直观的十六进制形式，我现在还没有从已有资料中搜到这么设计的理由，这个问题留待以后解决。")]),a("p",[a("a",{attrs:{href:"https://jingsam.github.io/2018/06/09/git-hash.html"}},[e._v("阅读原文")])])])])])}],!1,null,null,null);s.default=r.exports}}]);