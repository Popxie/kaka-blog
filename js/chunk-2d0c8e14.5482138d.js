(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d0c8e14"],{5784:function(s,e,_){"use strict";_.r(e);var v=_("2877"),r=Object(v.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,e=s.$createElement,_=s._self._c||e;return _("section",[_("html",[_("head"),_("body",[_("h1",[s._v("bash&zsh 的四种运行模式")]),_("p",[s._v("Bash/Zsh 有四种不同运行模式，你的 bash 配置写错地方的话，不但会拖慢 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 的速度，还会发生明明写了登录配置但是就是没生效的情况。")]),_("h2",[s._v("interactive mode / non-interactive mode")]),_("ul",[_("li",[_("p",[_("code",{pre:!0},[s._v("interactive mode")]),s._v(" (交互模式)")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("bash "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 直接输入bash")]),s._v("\n")])]),_("p",[s._v("以后 "),_("code",{pre:!0},[s._v("bash")]),s._v(' 出现一个 "'),_("code",{pre:!0},[s._v("$>")]),s._v(' " 的 '),_("code",{pre:!0},[s._v("PROMPT")]),s._v('，等待用户不断的输入指令，输入 "'),_("code",{pre:!0},[s._v("exit")]),s._v('" 或者按了 '),_("code",{pre:!0},[s._v("CTRL + D")]),s._v(" 才会结束。你 "),_("code",{pre:!0},[s._v("ssh")]),s._v(" 登录到一台电脑，或者命令行下面打 bash ，后面没有参数的话，进入的都是交互模式。")])]),_("li",[_("p",[_("code",{pre:!0},[s._v("non-interactive mode")]),s._v(" (非交互模式)")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("bash -c "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"echo 123"')]),s._v("  "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 输出 123")]),s._v("\nbash script.sh      "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 执行基本")]),s._v("\n")])]),_("p",[s._v("上面这两种情况下，"),_("code",{pre:!0},[s._v("bash")]),s._v(" 运行完脚本，就退出了，不会出现 "),_("code",{pre:!0},[s._v("PROMPT")]),s._v("，也不会等待用户输入新指令。")])])]),_("p",[s._v("环境变量 "),_("code",{pre:!0},[s._v("$-")]),s._v(" 里如果有字符 "),_("code",{pre:!0},[s._v("i")]),s._v(" 的话，代表是一个 "),_("code",{pre:!0},[s._v("interactive shell")]),s._v("，否则是 "),_("code",{pre:!0},[s._v("non-interactive mode")]),s._v("，我们可以简单测试一下：")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("$> [[ $- == *i* ]] && "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Interactive"')]),s._v(" || "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Not interactive"')]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Interactive")]),s._v("\n\n$>  bash -c "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('\'[[ $- == *i* ]] && echo "Interactive" || echo "Not interactive" \'')]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Not interactive")]),s._v("\n")])]),_("p",[s._v("登录过后的 "),_("code",{pre:!0},[s._v("shell")]),s._v(" 都是交互模式的，再交互模式下直接检测 "),_("code",{pre:!0},[s._v("$-")]),s._v(' 得到 "'),_("code",{pre:!0},[s._v("Interactive")]),s._v('" 的结果，而 '),_("code",{pre:!0},[s._v("bash")]),s._v(' 直接运行命令属于非交互模式，所以输出 "'),_("code",{pre:!0},[s._v("Not interactive")]),s._v('"')]),_("p",[s._v("再写一个脚本："),_("code",{pre:!0},[s._v("test.sh")]),s._v(" 继续验证：")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# test.sh (#!是一个特殊的表示符, 定义使用哪种解释器来解释该脚本)")]),s._v("\n"),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 参考: https://blog.csdn.net/jackalfly/article/details/7571616")]),s._v("\n\n"),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("#!/bin/bash")]),s._v("\n[[ $- == *i* ]] && "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Interactive"')]),s._v(" || "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Not interactive"')]),s._v("\n\n")])]),_("p",[s._v("输出结果如下：")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("$> "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("source")]),s._v(" check_interactive.sh  "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Interactive")]),s._v("\n\n$> bash check_interactive.sh    "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Not interactive")]),s._v("\n\n$> bash -c "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"source check_interactive.sh"')]),s._v("  "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Not interactive")]),s._v("\n\n")])]),_("p",[s._v("在 "),_("code",{pre:!0},[s._v("Bash")]),s._v(" 中，"),_("code",{pre:!0},[s._v("source <文件名>")]),s._v(" 是在当前 "),_("code",{pre:!0},[s._v("bash shell")]),s._v(" 进程内执行脚本，效果和直接敲里面的命令一样，所以是交互模式。而 "),_("code",{pre:!0},[s._v("bash <文件名>")]),s._v("是启动一个新的 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 进程执行脚本，所以是非交互模式。")]),_("p",[s._v("因此，我们平时写的一大堆 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 配置，都是针对“交互模式”的，如果让 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 执行条命令都要去运行各种初始化脚本的话，效率太低了，所以 "),_("code",{pre:!0},[s._v("~/.bashrc")]),s._v(" 开头就有一句判断：")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# If not running interactively, don't do anything")]),s._v("\n[[ "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"$-"')]),s._v(" != *i* ]] && "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("return")]),s._v("\n")])]),_("p",[s._v("或者是:")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# If not running interactively, don't do anything")]),s._v("\n"),_("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" $- "),_("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v("\n  *i*) ;;\n    *) "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("return")]),s._v(";;\n"),_("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("esac")]),s._v("\n")])]),_("p",[s._v("就是为了避免非交互模式随便运行一条命令都要解析后面的各种配置用的。")]),_("p",[s._v("当然，新版本的 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 如果以非交互模式启动，会直接跳过 "),_("code",{pre:!0},[s._v("~/.bashrc")]),s._v(" 的解析，而这几行 "),_("code",{pre:!0},[s._v("bashrc")]),s._v(" 中的检测为了兼容被保留了下来。")]),_("p",[s._v("因此，如果我们不确定 "),_("code",{pre:!0},[s._v("bash/zsh")]),s._v(" 的版本和行为，又自己从头开始写配置的话，需要在配置开头增加相应的检测代码，避免不必要的工作。")]),_("h2",[s._v("Login shell / Non-login shell")]),_("p",[s._v("前面的 "),_("code",{pre:!0},[s._v("non-interactive mode (交互模式)")]),s._v(" 与 "),_("code",{pre:!0},[s._v("non-interactive mode (非交互模式)")]),s._v(" 区别的是 "),_("code",{pre:!0},[s._v("bash/zsh")]),s._v(" 用于接受用户命令，还是执行运行一段脚本。 而这里的 “"),_("code",{pre:!0},[s._v("登录 shell")]),s._v("”和 “"),_("code",{pre:!0},[s._v("非登录 shell")]),s._v("”决定的是 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 加载哪个登录脚本：")]),_("ul",[_("li",[_("p",[_("code",{pre:!0},[s._v("Login shell")]),s._v(" (登录 shell)")]),_("p",[s._v("终端登录时，"),_("code",{pre:!0},[s._v("ssh")]),s._v(" 链接时，"),_("code",{pre:!0},[s._v("su --login <username>")]),s._v(" 切换用户时")])]),_("li",[_("p",[_("code",{pre:!0},[s._v("Non-login shell")]),s._v(" (非登录 shell)")]),_("p",[s._v("直接运行 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 时，"),_("code",{pre:!0},[s._v("su <username>")]),s._v(" 切换用户时（前面没有加 "),_("code",{pre:!0},[s._v("--login")]),s._v("）")])])]),_("p",[s._v("使用下面命令可以判断当前模式：")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("shopt")]),s._v(" -q login_shell && "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Login shell"')]),s._v(" || "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Not login shell"')]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Login shell")]),s._v("\n")])]),_("p",[s._v("如果你才登录，运行上面命令会显示“"),_("code",{pre:!0},[s._v("Login shell")]),s._v("”而如果你不是登录过来的，而是 "),_("code",{pre:!0},[s._v("su")]),s._v(' 切换到某用户再运行，就会显示 "'),_("code",{pre:!0},[s._v("Not login shell")]),s._v('"。如果你 '),_("code",{pre:!0},[s._v("su")]),s._v(" 的时候加了 "),_("code",{pre:!0},[s._v("--login")]),s._v(" 参数的话，又会和你登录是一样的。")]),_("p",[s._v("进入 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 交互模式时也可以用 "),_("code",{pre:!0},[s._v("--login")]),s._v(" 参数来决定是否是登录模式：")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("$> bash\n$> "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("shopt")]),s._v(" -q login_shell && "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Login shell"')]),s._v(" || "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Not login shell"')]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Not login shell")]),s._v("\n$> "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("exit")]),s._v("\n\n$> bash --login\n$> "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("shopt")]),s._v(" -q login_shell && "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Login shell"')]),s._v(" || "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Not login shell"')]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Login shell")]),s._v("\n$> "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("exit")]),s._v("\n")])]),_("p",[s._v("上面两次进入 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 交互模式，由于后面加了 "),_("code",{pre:!0},[s._v("--login")]),s._v("，所以检测的结果都不相同。再测试非交互模式下的区别：")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("$> bash -c "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('\'shopt -q login_shell && echo "Login shell" || echo "Not login shell"\'')]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Not login shell")]),s._v("\n\n$> bash --login -c "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('\'shopt -q login_shell && echo "Login shell" || echo "Not login shell"\'')]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Login shell")]),s._v("\n")])]),_("p",[s._v("直接运行命令的非交互模式也有这两种模式，因此"),_("code",{pre:!0},[s._v("交互/非交互")]),s._v("，"),_("code",{pre:!0},[s._v("Login/Non-login")]),s._v(" 是正交的一共四种模式。")]),_("p",[s._v("那么 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 在登录和非登录状态下具体行为有和不同呢？答案是初始化脚本不同：")]),_("ul",[_("li",[_("p",[_("code",{pre:!0},[s._v("Non-login")])]),_("p",[s._v("只加载"),_("code",{pre:!0},[s._v("~/.bashrc")]),s._v("，加载完就继续了.")])]),_("li",[_("p",[_("code",{pre:!0},[s._v("Login")])]),_("p",[s._v("只加载 "),_("code",{pre:!0},[s._v("~/.bash_profile")]),s._v("，加载完就继续了，除非"),_("code",{pre:!0},[s._v("~/.bash_profile")]),s._v(" 不存在，那么尝试加载 "),_("code",{pre:!0},[s._v("~/.bashrc")]),s._v("，然后再继续.")])])]),_("p",[s._v("所以如果你的系统里面如果只有一个 "),_("code",{pre:!0},[s._v("~/.bashrc")]),s._v(" 文件，那么不论哪种模式它都会被加载。而如果你系统中同时存在 "),_("code",{pre:!0},[s._v("~/.bashrc")]),s._v(" 和 "),_("code",{pre:!0},[s._v("~/.bash_profile")]),s._v(" 的话，就会根据是否 "),_("code",{pre:!0},[s._v("login shell")]),s._v(" 而选择性加载前者和后者了。")]),_("p",[s._v("那么这里也许有人要问，搞那么复杂干嘛？一个配置就行了嘛，其实是有必要的，当你登录时，比如你可以在脚本里检测只有登录时才做一些事情：")]),_("ul",[_("li",[s._v("检查 mailbox")]),_("li",[s._v("显示欢迎语句")]),_("li",[s._v("记录登录日志之类")])]),_("p",[s._v("也就是 "),_("code",{pre:!0},[s._v("ssh")]),s._v(" 连到服务器上，显示一大串欢迎。")]),_("p",[s._v("比如我的 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 配置里就检测了如果是 "),_("code",{pre:!0},[s._v("login shell")]),s._v(" 的话，随机显示一则 "),_("code",{pre:!0},[s._v("debian")]),s._v(" 使用技巧，这样每次我 "),_("code",{pre:!0},[s._v("ssh")]),s._v(" 到服务器上，都能看到一则技巧提示，而我 "),_("code",{pre:!0},[s._v("su")]),s._v(" 切换用户，或者直接运行 "),_("code",{pre:!0},[s._v("bash")]),s._v(" 的时候却不用显示，除非加上了 "),_("code",{pre:!0},[s._v("--login")]),s._v(" 参数。")]),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Popxie/kaka-img-repo/master/img/blogs/27_bash_zsh.png",alt:"27_bash_zsh.png"}})]),_("p",[s._v("上面还可以看得出来，"),_("code",{pre:!0},[s._v("login shell")]),s._v(" 下可以用 "),_("code",{pre:!0},[s._v("logout")]),s._v(" 或者 "),_("code",{pre:!0},[s._v("exit")]),s._v(" 退出，而 "),_("code",{pre:!0},[s._v("non-login shell")]),s._v(" 下面，则只能使用 "),_("code",{pre:!0},[s._v("exit")]),s._v(" 退出。")]),_("p",[s._v("因此判断是否是 "),_("code",{pre:!0},[s._v("login shell")]),s._v(" 也是配置 "),_("code",{pre:!0},[s._v("bash/zsh")]),s._v(" 的基本问题，正确的区分两种模式，可以给真正登录的用户在登录前显示更多有用的提示语或者执行某些初始化命令，而登录过后使用普通 "),_("code",{pre:!0},[s._v("su")]),s._v(" 切换用户的时候却可以跳过这些步骤。")]),_("p",[s._v("补充一下，如果你使用 "),_("code",{pre:!0},[s._v("zsh")]),s._v(" 的话，没有 "),_("code",{pre:!0},[s._v("shopt")]),s._v(" 命令，需要通过：")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("[[ -o login ]] && "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Login shell"')]),s._v(" || "),_("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Not login shell"')]),s._v("\n")])]),_("p",[s._v("来判断，现在的系统一般都没有 "),_("code",{pre:!0},[s._v("~/.bash_profile")]),s._v(" 文件了，只保留 "),_("code",{pre:!0},[s._v("~/.bashrc")]),s._v(" 文件，但是如果你新建 "),_("code",{pre:!0},[s._v("~/.bash_profile")]),s._v(" 的话，还是会导致登录时 "),_("code",{pre:!0},[s._v("~/.bashrc")]),s._v(" 被跳过，所以有的系统里，"),_("code",{pre:!0},[s._v("~/.bash_profile")]),s._v(" 只有简单的一段：")]),_("pre",{pre:!0},[_("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# login shell will execute this")]),s._v("\n"),_("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" [ -n "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),_("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$BASH_VERSION")]),s._v('"')]),s._v(" ]; "),_("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("then")]),s._v("\n  "),_("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# include .bashrc if it exists")]),s._v("\n  "),_("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" [ -f "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),_("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$HOME")]),s._v('/.bashrc"')]),s._v(" ]; "),_("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("then")]),s._v("\n    . "),_("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),_("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$HOME")]),s._v('/.bashrc"')]),s._v("\n  "),_("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("fi")]),s._v("\n"),_("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("fi")]),s._v("\n")])]),_("p",[s._v("就是避免登录时 "),_("code",{pre:!0},[s._v("~/.bashrc")]),s._v(" 被跳过的情况。")]),_("p",[s._v("所以当系统里同时存在 "),_("code",{pre:!0},[s._v("~/.bash_profile")]),s._v(" 和 "),_("code",{pre:!0},[s._v("~/.bashrc")]),s._v(" 的时候，你如果把一些 alias 的配置写到了 "),_("code",{pre:!0},[s._v(".bash_profile")]),s._v("里，你就会发现只有登录该用户的时候才会生效，而 "),_("code",{pre:!0},[s._v("su")]),s._v(" 过去时，完全无法使用，因为 "),_("code",{pre:!0},[s._v("su")]),s._v(" 时 "),_("code",{pre:!0},[s._v(".bash_profile")]),s._v(" 被跳过了。")]),_("p",[s._v("所以如果你想让一些 "),_("code",{pre:!0},[s._v("alias")]),s._v(" 不管登不登录都生效的话，请写到 "),_("code",{pre:!0},[s._v(".bashrc")]),s._v(" 文件里，然后确保 "),_("code",{pre:!0},[s._v(".bash_profile")]),s._v(" 中也会加载 "),_("code",{pre:!0},[s._v(".bashrc")]),s._v(" 文件，或者直接删除 "),_("code",{pre:!0},[s._v(".bash_profile")]),s._v(" 配置文件，只保留 "),_("code",{pre:!0},[s._v(".bashrc")]),s._v(" 即可。")]),_("p",[s._v("至于 zsh ，两种模式解析的都是 "),_("code",{pre:!0},[s._v("~/.zshrc")]),s._v(" ，所以需要你自己再 "),_("code",{pre:!0},[s._v("~/.zshrc")]),s._v(" 中判断情况。")]),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Popxie/kaka-img-repo/master/img/blogs/28_bash_zsh.png",alt:"28_bash_zsh.png"}})]),_("h2",[s._v("参考资料")]),_("p",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/47819029"}},[s._v("千万别混淆 Bash/Zsh 的四种运行模式·知乎")]),_("br"),_("a",{attrs:{href:"https://www.cnblogs.com/ziyunfei/p/4913758.html"}},[s._v("Bash 为何要发明 shopt 命令")]),_("a",{attrs:{href:"https://www.zhihu.com/question/21418449/answer/300879747"}},[s._v("为什么说 zsh 是 shell 中的极品？·知乎")])])])])])}],!1,null,null,null);e.default=r.exports}}]);