(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d22caa6"],{f3cf:function(e,_,v){"use strict";v.r(_);var o=v("2877"),p=Object(o.a)({},(function(){var e=this;e.$createElement;return e._self._c,e._m(0)}),[function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("section",[v("html",[v("head"),v("body",[v("h1",[e._v("如何避免 OPTIONS 请求? （文章 1）")]),v("h2",[e._v("减少 OPTIONS 请求")]),v("blockquote",[v("p",[e._v("场景：在调用后端接口的时候会出现两次请求: "),v("code",{pre:!0},[e._v("OPTIONS")]),e._v(" 请求和 "),v("code",{pre:!0},[e._v("GET")]),e._v(" 请求。"),v("code",{pre:!0},[e._v("OPTIONS")]),e._v(" 请求耗费了一定的时间，需减少 "),v("code",{pre:!0},[e._v("OPTIONS")]),e._v(" 请求。")])]),v("p",[e._v("查找原因是浏览器对"),v("strong",[e._v("简单跨域请求")]),e._v("和"),v("strong",[e._v("复杂跨域请求")]),e._v("的处理区别。")]),v("p",[v("code",{pre:!0},[e._v("XMLHttpRequest")]),e._v(" 会遵守同源策略("),v("code",{pre:!0},[e._v("same-origin policy")]),e._v("). 也即脚本只能访问相同协议/相同主机名/相同端口的资源, 如果要突破这个限制, 那就是所谓的跨域, 此时需要遵守跨域资源共享标准 "),v("code",{pre:!0},[e._v("CORS")]),e._v("("),v("code",{pre:!0},[e._v("Cross-Origin Resource Sharing")]),e._v(")机制。")]),v("p",[e._v("浏览器将 "),v("code",{pre:!0},[e._v("CORS")]),e._v(" 请求分为两类："),v("code",{pre:!0},[e._v("简单请求（simple request）")]),e._v("和"),v("code",{pre:!0},[e._v("非简单请求（not-simple-request）")]),e._v("。")]),v("p",[e._v("简单请求浏览器请求不会触发预检请求，而"),v("strong",[e._v("非简单请求会触发预检请求")]),e._v("。这两种方式怎么区分？")]),v("p",[e._v("同时满足下列条件，就属于"),v("code",{pre:!0},[e._v("简单请求")]),e._v("，否则属于"),v("code",{pre:!0},[e._v("非简单请求")]),v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS"}},[e._v("（参考 HTTP 访问控制（CORS）")]),e._v("）")]),v("blockquote",[v("ul",[v("li",[e._v("1.请求方式只能是："),v("code",{pre:!0},[e._v("GET、POST、HEAD")])]),v("li",[e._v("2.HTTP 请求头限制这几种字段（不得人为设置该集合之外的其他首部字段）： "),v("code",{pre:!0},[e._v("Accept")]),e._v("、"),v("code",{pre:!0},[e._v("Accept-Language")]),e._v("、"),v("code",{pre:!0},[e._v("Content-Language")]),e._v("、"),v("code",{pre:!0},[e._v("Content-Type（需要注意额外的限制）")]),e._v("、"),v("code",{pre:!0},[e._v("DPR")]),e._v("、"),v("code",{pre:!0},[e._v("Downlink")]),e._v("、"),v("code",{pre:!0},[e._v("Save-Data")]),e._v("、"),v("code",{pre:!0},[e._v("Viewport-Width")]),e._v("、"),v("code",{pre:!0},[e._v("Width")])]),v("li",[e._v("3."),v("code",{pre:!0},[e._v("Content-type")]),e._v(" 只能取："),v("code",{pre:!0},[e._v("application/x-www-form-urlencoded")]),e._v("、"),v("code",{pre:!0},[e._v("multipart/form-data")]),e._v("、"),v("code",{pre:!0},[e._v("text/plain")])]),v("li",[e._v("4.请求中的任意 "),v("code",{pre:!0},[e._v("XMLHttpRequestUpload")]),e._v(" 对象均没有注册任何事件监听器: "),v("code",{pre:!0},[e._v("XMLHttpRequestUpload")]),e._v(" 对象可以使用 "),v("code",{pre:!0},[e._v("XMLHttpRequest.upload")]),e._v(" 属性访问。")]),v("li",[e._v("5.请求中没有使用 "),v("code",{pre:!0},[e._v("ReadableStream")]),e._v(" 对象。")])])]),v("blockquote",[v("p",[e._v("非简单请求 会在正式通信之前，增加一次 "),v("code",{pre:!0},[e._v("HTTP")]),e._v(" 请求，称之为预检请求。浏览器会先发起 "),v("code",{pre:!0},[e._v("OPTIONS")]),e._v(" 方法到服务器，以获知服务器是否允许该实际请求。")])]),v("p",[e._v("由此可知，若要我们的请求满足简单请求就可以避免发起 "),v("code",{pre:!0},[e._v("OPTIONS")]),e._v(" 请求了。")]),v("p",[e._v("但是")]),v("blockquote",[v("ul",[v("li",[e._v("1、我们系统请求中除了 "),v("code",{pre:!0},[e._v("GET/POST")]),e._v(" 还有 "),v("code",{pre:!0},[e._v("PUT,DELETE")]),e._v("，不能满足")]),v("li",[e._v("2，我们系统有做业务模块权限，请求头里需要带有用户验证信息，第二点也不满足")]),v("li",[e._v("3，我们的 "),v("code",{pre:!0},[e._v("Content-Type")]),e._v(" 绝大多数是 "),v("code",{pre:!0},[e._v("application/json")]),e._v("，还是不满足")])])]),v("p",[e._v("然后只能寄希望于减少发起 "),v("code",{pre:!0},[e._v("OPTIONS")]),e._v(" 请求的次数，也就是说还是会用，但不是每次都用，查到的方法如下：")]),v("p",[e._v("后端在请求的 "),v("strong",[v("code",{pre:!0},[e._v("返回头部")])]),e._v(" 添加：")]),v("p",[v("code",{pre:!0},[e._v("Access-Control-Max-Age：（number）")]),e._v("数值代表 preflight request（预检请求）的返回结果（即 "),v("code",{pre:!0},[e._v("Access-Control-Allow-Methods")]),e._v(" 和 "),v("code",{pre:!0},[e._v("Access-Control-Allow-Headers")]),e._v(" 提供的信息） 可以被缓存多久，单位是秒。")]),v("p",[e._v("例如：将预检请求的结果缓存 10 分钟：")]),v("p",[v("code",{pre:!0},[e._v("Access-Control-Max-Age: 600")])]),v("p",[e._v("不同浏览器有不同的上限。在 Firefox 中，上限是 24h（即 86400 秒），而在 Chromium 中则是 10min（即 600 秒）。Chromium 同时规定了一个默认值 5 秒。 如果值为 -1，则表示禁用缓存，每一次请求都需要提供预检请求，即用 OPTIONS 请求进行检测。")]),v("p",[e._v("Access-Control-Max-Age 方法对完全一样的 url 的缓存设置生效，多一个参数也视为不同 url。也就是说，如果设置了 10 分钟的缓存，在 10 分钟内，所有请求第一次会产生 options 请求，第二次以及第二次以后就只发送真正的请求了。")]),v("h1",[e._v("跨域避免 option 请求（文章 2）")]),v("h2",[e._v("个人观点")]),v("blockquote",[v("p",[e._v("这种做法个人觉得也不太现实，因为肯定是要往请求头里添加东西的还有就是会修改"),v("code",{pre:!0},[e._v("Content-Type")])])]),v("h2",[e._v("最终解决方案")]),v("blockquote",[v("p",[e._v("去除自定义 "),v("code",{pre:!0},[e._v("header")]),e._v(",修改为简单请求，避免该请求发出预检。")])]),v("h2",[e._v("思路过程")]),v("p",[e._v("一般来说使用 "),v("code",{pre:!0},[e._v("application/json")]),e._v(" 的 "),v("code",{pre:!0},[e._v("post")]),e._v(" 请求是必然会带入 "),v("code",{pre:!0},[e._v("OPTION")]),e._v(" 请求，何为 "),v("code",{pre:!0},[e._v("OPTION")]),e._v(" 预检：")]),v("blockquote",[v("p",[e._v("用于获取目的资源所支持的通信选项。客户端可以对特定的 URL 使用 "),v("code",{pre:!0},[e._v("OPTIONS")]),e._v(" 方法，也可以对整站（通过将 URL 设置为“*”）使用该方法。")])]),v("p",[e._v("在 "),v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS"}},[e._v("CORS")]),e._v(" 中，可以使用 OPTIONS 方法发起一个预检请求，以检测实际请求是否可以被服务器所接受。预检请求报文中的 "),v("code",{pre:!0},[e._v("Access-Control-Request-Method")]),e._v("首部字段告知服务器实际请求所使用的 HTTP 方法；"),v("code",{pre:!0},[e._v("Access-Control-Request-Headers")]),e._v("首部字段告知服务器实际请求所携带的自定义首部字段。服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。")]),v("p",[e._v("有趣的是专题详情为 "),v("code",{pre:!0},[e._v("GET")]),e._v(" 接口，为何 "),v("code",{pre:!0},[e._v("GET")]),e._v(" 请求也会发起 option 预检？")]),v("p",[e._v("这个原因得从简单请求和复杂请求说起，跨域请求分为简单和复杂两种：")]),v("p",[v("strong",[e._v("简单请求:")])]),v("p",[e._v("请求方式为如下之一：")]),v("blockquote",[v("p",[e._v("HEAD"),v("br"),e._v(" GET"),v("br"),e._v(" POST")])]),v("p",[e._v("HTTP 请求头只能包含如下信息：")]),v("blockquote",[v("p",[e._v("Accept"),v("br"),e._v(" Accept-Language"),v("br"),e._v(" Content-Language"),v("br"),e._v(" Last-Event-ID"),v("br"),e._v(" text/plain"),v("br"),e._v(" Content-Type，但仅能是下列之一:")])]),v("ul",[v("li",[v("strong",[e._v("application/x-www-form-urlencoded")])]),v("li",[v("strong",[e._v("multipart/form-data")])])]),v("p",[e._v("任何一个不满足上述要求的请求，即被认为是复杂请求。一个复杂请求不仅有包含通信内容的请求，同时也包含"),v("code",{pre:!0},[e._v("预检信息")]),e._v("。")]),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/Popxie/kaka-img-repo/master/img/daily-notes/13_OPTIONS%E8%AF%B7%E6%B1%82.png",alt:"OPTIONS请求"}})]),v("p",[e._v("专题配置接口请求头中带有自定义 "),v("code",{pre:!0},[e._v("header")]),e._v(",浏览器会认定为非简单请求，需要向服务器发出检查，判断该域名是否允许跨域。")]),v("p",[e._v("经过分析发现，自定义 "),v("code",{pre:!0},[e._v("header")]),e._v(" 其实在此业务场景中非必传自带，发出预检请求至少会有 100ms 的耗时，无形中延长页面绘制时间。")]),v("p",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s/6gtVR0nVNcZvREjwftZgzA"}},[e._v("阅读原文·跨域避免 option 请求")])])])])])}],!1,null,null,null);_.default=p.exports}}]);