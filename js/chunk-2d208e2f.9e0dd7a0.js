(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d208e2f"],{a769:function(s,t,r){"use strict";r.r(t);var a=r("2877"),e=Object(a.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,t=s.$createElement,r=s._self._c||t;return r("section",[r("html",[r("head"),r("body",[r("h1",[s._v("01 从原型到原型链")]),r("blockquote",[r("p",[s._v("JavaScript深入系列的第一篇，从原型与原型链开始讲起，如果你想知道构造函数的实例的原型，原型的原型，原型的原型的原型是什么，就来看看这篇文章吧。")])]),r("h2",[s._v("构造函数创建对象")]),r("p",[s._v("我们先使用构造函数创建一个对象：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Person")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("();\nperson."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Kevin'")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(person."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Kevin")]),s._v("\n")])]),r("p",[s._v("在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。")]),r("p",[s._v("很简单吧，接下来进入正题：")]),r("h2",[s._v("prototype")]),r("p",[s._v("每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Person")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 虽然写在注释里，但是你要注意：")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// prototype是函数才会有的属性")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Kevin'")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("();\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person2 = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("();\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(person1."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Kevin")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(person2."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Kevin")]),s._v("\n")])]),r("p",[s._v("那这个函数的 prototype 属性到底指向的是什么呢？是这个函数的原型吗？")]),r("p",[s._v("其实，函数的 prototype 属性指向了一个对象，这个对象正是调用该构造函数而创建的"),r("strong",[s._v("实例")]),s._v("的原型，也就是这个例子中的 person1 和 person2 的原型。")]),r("p",[s._v('那什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型"继承"属性。')]),r("p",[s._v("让我们用一张图表示构造函数和实例原型之间的关系：")]),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/Popxie/kaka-blog/master/src/docs/qingfeng/Images/prototype1.png",alt:"构造函数和实例原型的关系图"}})]),r("p",[s._v("在这张图中我们用 Object.prototype 表示实例原型。")]),r("p",[s._v("那么我们该怎么表示实例与实例原型，也就是 person 和 Person.prototype 之间的关系呢，这时候我们就要讲到第二个属性：")]),r("h2",[s._v("__proto__")]),r("p",[s._v("这是每一个JavaScript对象(除了 null )都具有的一个属性，叫__proto__，这个属性会指向该对象的原型。")]),r("p",[s._v("为了证明这一点,我们可以在火狐或者谷歌中输入：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Person")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("();\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(person."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("__proto__")]),s._v(" === "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[s._v("于是我们更新下关系图：")]),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/Popxie/kaka-blog/master/src/docs/qingfeng/Images/prototype2.png",alt:"实例与实例原型的关系图"}})]),r("p",[s._v("既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？")]),r("h2",[s._v("constructor")]),r("p",[s._v("指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：constructor\ufeff，每个原型都有一个 constructor 属性指向关联的构造函数。")]),r("p",[s._v("为了验证这一点，我们可以尝试：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Person")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v(" === "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("constructor")]),s._v("); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[s._v("所以再更新下关系图：")]),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/Popxie/kaka-blog/master/src/docs/qingfeng/Images/prototype3.png",alt:"实例原型与构造函数的关系图"}})]),r("p",[s._v("综上我们已经得出：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Person")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("();\n\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(person."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("__proto__")]),s._v(" == "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("constructor")]),s._v(" == "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 顺便学习一个ES5的方法,可以获得对象的原型")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getPrototypeOf")]),s._v("(person) === "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[s._v("了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：")]),r("h2",[s._v("实例与原型")]),r("p",[s._v("当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。")]),r("p",[s._v("举个例子：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Person")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Kevin'")]),s._v(";\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("();\n\nperson."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Daisy'")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(person."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Daisy")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("delete")]),s._v(" person."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(person."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Kevin")]),s._v("\n")])]),r("p",[s._v("在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。")]),r("p",[s._v("但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.__proto__ ，也就是 Person.prototype中查找，幸运的是我们找到了 name 属性，结果为 Kevin。")]),r("p",[s._v("但是万一还没有找到呢？原型的原型又是什么呢？")]),r("h2",[s._v("原型的原型")]),r("p",[s._v("在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("();\nobj."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Kevin'")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(obj."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Kevin")]),s._v("\n")])]),r("p",[s._v("所以原型对象是通过 Object 构造函数生成的，结合之前所讲，实例的 __proto__ 指向构造函数的 prototype ，所以我们再更新下关系图：")]),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/Popxie/kaka-blog/master/src/docs/qingfeng/Images/prototype4.png",alt:"原型的原型关系图"}})]),r("h2",[s._v("原型链")]),r("p",[s._v("那 Object.prototype 的原型呢？")]),r("p",[s._v("null，我们可以打印：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("__proto__")]),s._v(" === "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[s._v("然而 null 究竟代表了什么呢？")]),r("p",[s._v("引用阮一峰老师的 "),r("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html"}},[s._v("《undefined与null的区别》")]),s._v(" 就是：")]),r("blockquote",[r("p",[s._v("null 表示“没有对象”，即该处不应该有值。")])]),r("p",[s._v("所以 Object.prototype.__proto__ 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。")]),r("p",[s._v("所以查找属性的时候查到 Object.prototype 就可以停止查找了。")]),r("p",[s._v("最后一张关系图也可以更新为：")]),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/Popxie/kaka-blog/master/src/docs/qingfeng/Images/prototype5.png",alt:"原型链示意图"}})]),r("p",[s._v("顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。")]),r("h2",[s._v("补充")]),r("p",[s._v("最后，补充三点大家可能不会注意的地方：")]),r("h3",[s._v("constructor")]),r("p",[s._v("首先是 constructor 属性，我们看个例子：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Person")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("();\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(person."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("constructor")]),s._v(" === "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[s._v("当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("person."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("constructor")]),s._v(" === "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("constructor")]),s._v("\n")])]),r("h3",[s._v("__proto__")]),r("p",[s._v("其次是 __proto__ ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.__proto__ 时，可以理解成返回了 Object.getPrototypeOf(obj)。")]),r("h3",[s._v("真的是继承吗？")]),r("p",[s._v("最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：")]),r("p",[s._v("继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。")]),r("h2",[s._v("下一篇文章")]),r("p",[r("a",{attrs:{href:"#/qingfeng/deep/deep-02"}},[s._v("02 词法作用域和动态作用域")])])])])])}],!1,null,null,null);t.default=e.exports}}]);