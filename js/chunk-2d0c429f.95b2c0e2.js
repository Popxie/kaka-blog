(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d0c429f"],{"3a50":function(s,a,e){"use strict";e.r(a);var t=e("2877"),r=Object(t.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("section",[e("html",[e("head"),e("body",[e("h1",[s._v("正则的扩展")]),e("h2",[s._v("RegExp 构造函数")]),e("p",[s._v("在 ES5 中，"),e("code",{pre:!0},[s._v("RegExp")]),s._v("构造函数的参数有两种情况。")]),e("p",[s._v("第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" regex = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("RegExp")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'xyz'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'i'")]),s._v(");\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等价于")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" regex = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/xyz/i")]),s._v(";\n")])]),e("p",[s._v("第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" regex = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("RegExp")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/xyz/i")]),s._v(");\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等价于")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" regex = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/xyz/i")]),s._v(";\n")])]),e("p",[s._v("但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" regex = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("RegExp")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/xyz/")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'i'")]),s._v(");\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another")]),s._v("\n")])]),e("p",[s._v("ES6 改变了这种行为。如果"),e("code",{pre:!0},[s._v("RegExp")]),s._v("构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("RegExp")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/abc/ig")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'i'")]),s._v(")."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("flags")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "i"')]),s._v("\n")])]),e("p",[s._v("上面代码中，原有正则对象的修饰符是"),e("code",{pre:!0},[s._v("ig")]),s._v("，它会被第二个参数"),e("code",{pre:!0},[s._v("i")]),s._v("覆盖。")]),e("h2",[s._v("字符串的正则方法")]),e("p",[s._v("字符串对象共有 4 个方法，可以使用正则表达式："),e("code",{pre:!0},[s._v("match()")]),s._v("、"),e("code",{pre:!0},[s._v("replace()")]),s._v("、"),e("code",{pre:!0},[s._v("search()")]),s._v("和"),e("code",{pre:!0},[s._v("split()")]),s._v("。")]),e("p",[s._v("ES6 将这 4 个方法，在语言内部全部调用"),e("code",{pre:!0},[s._v("RegExp")]),s._v("的实例方法，从而做到所有与正则相关的方法，全都定义在"),e("code",{pre:!0},[s._v("RegExp")]),s._v("对象上。")]),e("ul",[e("li",[e("code",{pre:!0},[s._v("String.prototype.match")]),s._v(" 调用 "),e("code",{pre:!0},[s._v("RegExp.prototype[Symbol.match]")])]),e("li",[e("code",{pre:!0},[s._v("String.prototype.replace")]),s._v(" 调用 "),e("code",{pre:!0},[s._v("RegExp.prototype[Symbol.replace]")])]),e("li",[e("code",{pre:!0},[s._v("String.prototype.search")]),s._v(" 调用 "),e("code",{pre:!0},[s._v("RegExp.prototype[Symbol.search]")])]),e("li",[e("code",{pre:!0},[s._v("String.prototype.split")]),s._v(" 调用 "),e("code",{pre:!0},[s._v("RegExp.prototype[Symbol.split]")])])]),e("h2",[s._v("u 修饰符")]),e("p",[s._v("ES6 对正则表达式添加了"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符，含义为“Unicode 模式”，用来正确处理大于"),e("code",{pre:!0},[s._v("\\uFFFF")]),s._v("的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/^\\uD83D/u."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'\\uD83D\\uDC2A'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n/^\\uD83D/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'\\uD83D\\uDC2A'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("上面代码中，"),e("code",{pre:!0},[s._v("\\uD83D\\uDC2A")]),s._v("是一个四个字节的 UTF-16 编码，代表一个字符。但是，ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符，导致第二行代码结果为"),e("code",{pre:!0},[s._v("true")]),s._v("。加了"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符以后，ES6 就会识别其为一个字符，所以第一行代码结果为"),e("code",{pre:!0},[s._v("false")]),s._v("。")]),e("p",[s._v("一旦加上"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符号，就会修改下面这些正则表达式的行为。")]),e("p",[e("strong",[s._v("（1）点字符")])]),e("p",[s._v("点（"),e("code",{pre:!0},[s._v(".")]),s._v("）字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于"),e("code",{pre:!0},[s._v("0xFFFF")]),s._v("的 Unicode 字符，点字符不能识别，必须加上"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" s = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'𠮷'")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/^.$/")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("(s) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n/^."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("$")]),s._v("/u."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("(s) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("上面代码表示，如果不添加"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。")]),e("p",[e("strong",[s._v("（2）Unicode 字符表示法")])]),e("p",[s._v("ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符，才能识别当中的大括号，否则会被解读为量词。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/\\u{"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("61")]),s._v("}/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n/\\u{"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("61")]),s._v("}/u."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n/\\u{20BB7}/u."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'𠮷'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("上面代码表示，如果不加"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符，正则表达式无法识别"),e("code",{pre:!0},[s._v("\\u{61}")]),s._v("这种表示法，只会认为这匹配 61 个连续的"),e("code",{pre:!0},[s._v("u")]),s._v("。")]),e("p",[e("strong",[s._v("（3）量词")])]),e("p",[s._v("使用"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符后，所有量词都会正确识别码点大于"),e("code",{pre:!0},[s._v("0xFFFF")]),s._v("的 Unicode 字符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/a{"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("}/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aa'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n/a{"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("}/u."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aa'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n/𠮷{"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("}/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'𠮷𠮷'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n/𠮷{"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("}/u."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'𠮷𠮷'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[e("strong",[s._v("（4）预定义模式")])]),e("p",[e("code",{pre:!0},[s._v("u")]),s._v("修饰符也影响到预定义模式，能否正确识别码点大于"),e("code",{pre:!0},[s._v("0xFFFF")]),s._v("的 Unicode 字符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/^\\S$/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'𠮷'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n/^\\S$/u."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'𠮷'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("上面代码的"),e("code",{pre:!0},[s._v("\\S")]),s._v("是预定义模式，匹配所有非空白字符。只有加了"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符，它才能正确匹配码点大于"),e("code",{pre:!0},[s._v("0xFFFF")]),s._v("的 Unicode 字符。")]),e("p",[s._v("利用这一点，可以写出一个正确返回字符串长度的函数。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("codePointLength")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("text")]),s._v(") {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result = text."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("match")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/[\\s\\S]/gu")]),s._v(");\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result ? result."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" : "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" s = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'𠮷𠮷'")]),s._v(";\n\ns."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("codePointLength")]),s._v("(s) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),e("p",[e("strong",[s._v("（5）i 修饰符")])]),e("p",[s._v("有些 Unicode 字符的编码不同，但是字型很相近，比如，"),e("code",{pre:!0},[s._v("\\u004B")]),s._v("与"),e("code",{pre:!0},[s._v("\\u212A")]),s._v("都是大写的"),e("code",{pre:!0},[s._v("K")]),s._v("。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/[a-z]/i."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'\\u212A'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n/[a-z]/iu."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'\\u212A'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("上面代码中，不加"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符，就无法识别非规范的"),e("code",{pre:!0},[s._v("K")]),s._v("字符。")]),e("p",[e("strong",[s._v("（6）转义")])]),e("p",[s._v("没有"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符的情况下，正则中没有定义的转义（如逗号的转义"),e("code",{pre:!0},[s._v("\\,")]),s._v("）无效，而在"),e("code",{pre:!0},[s._v("u")]),s._v("模式会报错。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/\\,"),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/ /")]),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/ /")]),s._v("\\,/\n"),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\,/u")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n")])]),e("p",[s._v("上面代码中，没有"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符时，逗号前面的反斜杠是无效的，加了"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符就报错。")]),e("h2",[s._v("RegExp.prototype.unicode 属性")]),e("p",[s._v("正则实例对象新增"),e("code",{pre:!0},[s._v("unicode")]),s._v("属性，表示是否设置了"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" r1 = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/hello/")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" r2 = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/hello/u")]),s._v(";\n\nr1."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("unicode")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\nr2."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("unicode")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("上面代码中，正则表达式是否设置了"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符，可以从"),e("code",{pre:!0},[s._v("unicode")]),s._v("属性看出来。")]),e("h2",[s._v("y 修饰符")]),e("p",[s._v("除了"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符，ES6 还为正则表达式添加了"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符，叫做“粘连”（sticky）修饰符。")]),e("p",[e("code",{pre:!0},[s._v("y")]),s._v("修饰符的作用与"),e("code",{pre:!0},[s._v("g")]),s._v("修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，"),e("code",{pre:!0},[s._v("g")]),s._v("修饰符只要剩余位置中存在匹配就可，而"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" s = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aaa_aa_a'")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" r1 = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/a+/g")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" r2 = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/a+/y")]),s._v(";\n\nr1."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(s) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["aaa"]')]),s._v("\nr2."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(s) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["aaa"]')]),s._v("\n\nr1."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(s) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["aa"]')]),s._v("\nr2."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(s) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// null")]),s._v("\n")])]),e("p",[s._v("上面代码有两个正则表达式，一个使用"),e("code",{pre:!0},[s._v("g")]),s._v("修饰符，另一个使用"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符。这两个正则表达式各执行了两次，第一次执行的时候，两者行为相同，剩余字符串都是"),e("code",{pre:!0},[s._v("_aa_a")]),s._v("。由于"),e("code",{pre:!0},[s._v("g")]),s._v("修饰没有位置要求，所以第二次执行会返回结果，而"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符要求匹配必须从头部开始，所以返回"),e("code",{pre:!0},[s._v("null")]),s._v("。")]),e("p",[s._v("如果改一下正则表达式，保证每次都能头部匹配，"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符就会返回结果了。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" s = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aaa_aa_a'")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" r = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/a+_/y")]),s._v(";\n\nr."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(s) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["aaa_"]')]),s._v("\nr."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(s) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["aa_"]')]),s._v("\n")])]),e("p",[s._v("上面代码每次匹配，都是从剩余字符串的头部开始。")]),e("p",[s._v("使用"),e("code",{pre:!0},[s._v("lastIndex")]),s._v("属性，可以更好地说明"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/a/g")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 指定从2号位置（y）开始匹配")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("lastIndex")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配成功")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" match = "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'xaya'")]),s._v(");\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 在3号位置匹配成功")]),s._v("\nmatch."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("index")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 下一次匹配从4号位开始")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("lastIndex")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4号位开始匹配失败")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'xaya'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// null")]),s._v("\n")])]),e("p",[s._v("上面代码中，"),e("code",{pre:!0},[s._v("lastIndex")]),s._v("属性指定每次搜索的开始位置，"),e("code",{pre:!0},[s._v("g")]),s._v("修饰符从这个位置开始向后搜索，直到发现匹配为止。")]),e("p",[e("code",{pre:!0},[s._v("y")]),s._v("修饰符同样遵守"),e("code",{pre:!0},[s._v("lastIndex")]),s._v("属性，但是要求必须在"),e("code",{pre:!0},[s._v("lastIndex")]),s._v("指定的位置发现匹配。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/a/y")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 指定从2号位置开始匹配")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("lastIndex")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不是粘连，匹配失败")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'xaya'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// null")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 指定从3号位置开始匹配")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("lastIndex")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3号位置是粘连，匹配成功")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" match = "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'xaya'")]),s._v(");\nmatch."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("index")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("lastIndex")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4")]),s._v("\n")])]),e("p",[s._v("实际上，"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符号隐含了头部匹配的标志"),e("code",{pre:!0},[s._v("^")]),s._v("。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/b/y."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aba'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// null")]),s._v("\n")])]),e("p",[s._v("上面代码由于不能保证头部匹配，所以返回"),e("code",{pre:!0},[s._v("null")]),s._v("。"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符的设计本意，就是让头部匹配的标志"),e("code",{pre:!0},[s._v("^")]),s._v("在全局匹配中都有效。")]),e("p",[s._v("下面是字符串对象的"),e("code",{pre:!0},[s._v("replace")]),s._v("方法的例子。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/a/gy")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aaxa'")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("replace")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("REGEX")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'-'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// '--xa'")]),s._v("\n")])]),e("p",[s._v("上面代码中，最后一个"),e("code",{pre:!0},[s._v("a")]),s._v("因为不是出现在下一次匹配的头部，所以不会被替换。")]),e("p",[s._v("单单一个"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符对"),e("code",{pre:!0},[s._v("match")]),s._v("方法，只能返回第一个匹配，必须与"),e("code",{pre:!0},[s._v("g")]),s._v("修饰符联用，才能返回所有匹配。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a1a2a3'")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("match")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/a\\d/y")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["a1"]')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a1a2a3'")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("match")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/a\\d/gy")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["a1", "a2", "a3"]')]),s._v("\n")])]),e("p",[e("code",{pre:!0},[s._v("y")]),s._v("修饰符的一个应用，是从字符串提取 token（词元），"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符确保了匹配之间不会有漏掉的字符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("TOKEN_Y")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\s*(\\+|[0-9]+)\\s*/y")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("TOKEN_G")]),s._v("  = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\s*(\\+|[0-9]+)\\s*/g")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tokenize")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("TOKEN_Y")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'3 + 4'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [ '3', '+', '4' ]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tokenize")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("TOKEN_G")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'3 + 4'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [ '3', '+', '4' ]")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tokenize")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("TOKEN_REGEX, str")]),s._v(") {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" result = [];\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" match;\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (match = "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("TOKEN_REGEX")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(str)) {\n    result."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("(match["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]);\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n}\n")])]),e("p",[s._v("上面代码中，如果字符串里面没有非法字符，"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符与"),e("code",{pre:!0},[s._v("g")]),s._v("修饰符的提取结果是一样的。但是，一旦出现非法字符，两者的行为就不一样了。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tokenize")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("TOKEN_Y")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'3x + 4'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [ '3' ]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tokenize")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("TOKEN_G")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'3x + 4'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [ '3', '+', '4' ]")]),s._v("\n")])]),e("p",[s._v("上面代码中，"),e("code",{pre:!0},[s._v("g")]),s._v("修饰符会忽略非法字符，而"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符不会，这样就很容易发现错误。")]),e("h2",[s._v("RegExp.prototype.sticky 属性")]),e("p",[s._v("与"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符相匹配，ES6 的正则实例对象多了"),e("code",{pre:!0},[s._v("sticky")]),s._v("属性，表示是否设置了"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" r = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/hello\\d/y")]),s._v(";\nr."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("sticky")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("h2",[s._v("RegExp.prototype.flags 属性")]),e("p",[s._v("ES6 为正则表达式新增了"),e("code",{pre:!0},[s._v("flags")]),s._v("属性，会返回正则表达式的修饰符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES5 的 source 属性")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 返回正则表达式的正文")]),s._v("\n/abc/ig."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("source")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "abc"')]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES6 的 flags 属性")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 返回正则表达式的修饰符")]),s._v("\n/abc/ig."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("flags")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'gi'")]),s._v("\n")])]),e("h2",[s._v("s 修饰符：dotAll 模式")]),e("p",[s._v("正则表达式中，点（"),e("code",{pre:!0},[s._v(".")]),s._v("）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符解决；另一个是行终止符（line terminator character）。")]),e("p",[s._v("所谓行终止符，就是该字符表示一行的终结。以下四个字符属于“行终止符”。")]),e("ul",[e("li",[s._v("U+000A 换行符（"),e("code",{pre:!0},[s._v("\\n")]),s._v("）")]),e("li",[s._v("U+000D 回车符（"),e("code",{pre:!0},[s._v("\\r")]),s._v("）")]),e("li",[s._v("U+2028 行分隔符（line separator）")]),e("li",[s._v("U+2029 段分隔符（paragraph separator）")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/foo."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("bar")]),s._v("/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo\\nbar'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("p",[s._v("上面代码中，因为"),e("code",{pre:!0},[s._v(".")]),s._v("不匹配"),e("code",{pre:!0},[s._v("\\n")]),s._v("，所以正则表达式返回"),e("code",{pre:!0},[s._v("false")]),s._v("。")]),e("p",[s._v("但是，很多时候我们希望匹配的是任意单个字符，这时有一种变通的写法。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/foo[^]bar/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo\\nbar'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("这种解决方案毕竟不太符合直觉，ES2018 "),e("a",{attrs:{href:"https://github.com/tc39/proposal-regexp-dotall-flag"}},[s._v("引入")]),e("code",{pre:!0},[s._v("s")]),s._v("修饰符，使得"),e("code",{pre:!0},[s._v(".")]),s._v("可以匹配任意单个字符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/foo."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("bar")]),s._v("/s."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo\\nbar'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("这被称为"),e("code",{pre:!0},[s._v("dotAll")]),s._v("模式，即点（dot）代表一切字符。所以，正则表达式还引入了一个"),e("code",{pre:!0},[s._v("dotAll")]),s._v("属性，返回一个布尔值，表示该正则表达式是否处在"),e("code",{pre:!0},[s._v("dotAll")]),s._v("模式。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" re = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/foo.bar/")]),s._v("s;\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 另一种写法")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// const re = new RegExp('foo.bar', 's');")]),s._v("\n\nre."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo\\nbar'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\nre."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("dotAll")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\nre."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("flags")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 's'")]),s._v("\n")])]),e("p",[e("code",{pre:!0},[s._v("/s")]),s._v("修饰符和多行修饰符"),e("code",{pre:!0},[s._v("/m")]),s._v("不冲突，两者一起使用的情况下，"),e("code",{pre:!0},[s._v(".")]),s._v("匹配所有字符，而"),e("code",{pre:!0},[s._v("^")]),s._v("和"),e("code",{pre:!0},[s._v("$")]),s._v("匹配每一行的行首和行尾。")]),e("h2",[s._v("后行断言")]),e("p",[s._v("JavaScript 语言的正则表达式，只支持先行断言（lookahead）和先行否定断言（negative lookahead），不支持后行断言（lookbehind）和后行否定断言（negative lookbehind）。ES2018 引入"),e("a",{attrs:{href:"https://github.com/tc39/proposal-regexp-lookbehind"}},[s._v("后行断言")]),s._v("，V8 引擎 4.9 版（Chrome 62）已经支持。")]),e("p",[s._v("“先行断言”指的是，"),e("code",{pre:!0},[s._v("x")]),s._v("只有在"),e("code",{pre:!0},[s._v("y")]),s._v("前面才匹配，必须写成"),e("code",{pre:!0},[s._v("/x(?=y)/")]),s._v("。比如，只匹配百分号之前的数字，要写成"),e("code",{pre:!0},[s._v("/\\d+(?=%)/")]),s._v("。“先行否定断言”指的是，"),e("code",{pre:!0},[s._v("x")]),s._v("只有不在"),e("code",{pre:!0},[s._v("y")]),s._v("前面才匹配，必须写成"),e("code",{pre:!0},[s._v("/x(?!y)/")]),s._v("。比如，只匹配不在百分号之前的数字，要写成"),e("code",{pre:!0},[s._v("/\\d+(?!%)/")]),s._v("。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/\\d+(?=%)/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'100% of US presidents have been male'")]),s._v(")  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["100"]')]),s._v("\n/\\d+(?!%)/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'that’s all 44 of them'")]),s._v(")                 "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["44"]')]),s._v("\n")])]),e("p",[s._v("上面两个字符串，如果互换正则表达式，就不会得到相同结果。另外，还可以看到，“先行断言”括号之中的部分（"),e("code",{pre:!0},[s._v("(?=%)")]),s._v("），是不计入返回结果的。")]),e("p",[s._v("“后行断言”正好与“先行断言”相反，"),e("code",{pre:!0},[s._v("x")]),s._v("只有在"),e("code",{pre:!0},[s._v("y")]),s._v("后面才匹配，必须写成"),e("code",{pre:!0},[s._v("/(?<=y)x/")]),s._v("。比如，只匹配美元符号之后的数字，要写成"),e("code",{pre:!0},[s._v("/(?<=\\$)\\d+/")]),s._v("。“后行否定断言”则与“先行否定断言”相反，"),e("code",{pre:!0},[s._v("x")]),s._v("只有不在"),e("code",{pre:!0},[s._v("y")]),s._v("后面才匹配，必须写成"),e("code",{pre:!0},[s._v("/(?<!y)x/")]),s._v("。比如，只匹配不在美元符号后面的数字，要写成"),e("code",{pre:!0},[s._v("/(?<!\\$)\\d+/")]),s._v("。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/(?<=\\$)\\d+"),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/.exec('Benjamin Franklin is on the $100 bill')  /")]),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v('/ ["100"]\n/')]),s._v("(?<!\\$)\\d+"),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/.exec('it’s is worth about €90')                /")]),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v('/ ["90"]\n')])])]),e("p",[s._v("上面的例子中，“后行断言”的括号之中的部分（"),e("code",{pre:!0},[s._v("(?<=\\$)")]),s._v("），也是不计入返回结果。")]),e("p",[s._v("下面的例子是使用后行断言进行字符串替换。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_DOLLAR_PREFIX")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/(?<=\\$)foo/g")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'$foo %foo foo'")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("replace")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_DOLLAR_PREFIX")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bar'")]),s._v(");\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// '$bar %foo foo'")]),s._v("\n")])]),e("p",[s._v("上面代码中，只有在美元符号后面的"),e("code",{pre:!0},[s._v("foo")]),s._v("才会被替换。")]),e("p",[s._v("“后行断言”的实现，需要先匹配"),e("code",{pre:!0},[s._v("/(?<=y)x/")]),s._v("的"),e("code",{pre:!0},[s._v("x")]),s._v("，然后再回到左边，匹配"),e("code",{pre:!0},[s._v("y")]),s._v("的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。")]),e("p",[s._v("首先，后行断言的组匹配，与正常情况下结果是不一样的。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/(?<=(\\d+)(\\d+))$/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'1053'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["", "1", "053"]')]),s._v("\n/^(\\d+)(\\d+)$/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'1053'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["1053", "105", "3"]')]),s._v("\n")])]),e("p",[s._v("上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是"),e("code",{pre:!0},[s._v("105")]),s._v("和"),e("code",{pre:!0},[s._v("3")]),s._v("。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是"),e("code",{pre:!0},[s._v("1")]),s._v("和"),e("code",{pre:!0},[s._v("053")]),s._v("。")]),e("p",[s._v("其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("/(?<=(o)d\\"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")r/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hodor'")]),s._v(")  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// null")]),s._v("\n/(?<=\\1d(o))r/."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hodor'")]),s._v(")  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["r", "o"]')]),s._v("\n")])]),e("p",[s._v("上面代码中，如果后行断言的反斜杠引用（"),e("code",{pre:!0},[s._v("\\1")]),s._v("）放在括号的后面，就不会得到匹配结果，必须放在前面才可以。因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。")]),e("h2",[s._v("Unicode 属性类")]),e("p",[s._v("ES2018 "),e("a",{attrs:{href:"https://github.com/tc39/proposal-regexp-unicode-property-escapes"}},[s._v("引入")]),s._v("了一种新的类的写法"),e("code",{pre:!0},[s._v("\\p{...}")]),s._v("和"),e("code",{pre:!0},[s._v("\\P{...}")]),s._v("，允许正则表达式匹配符合 Unicode 某种属性的所有字符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" regexGreekSymbol = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\p{Script=Greek}/u")]),s._v(";\nregexGreekSymbol."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'π'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("上面代码中，"),e("code",{pre:!0},[s._v("\\p{Script=Greek}")]),s._v("指定匹配一个希腊文字母，所以匹配"),e("code",{pre:!0},[s._v("π")]),s._v("成功。")]),e("p",[s._v("Unicode 属性类要指定属性名和属性值。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("UnicodePropertyName")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("UnicodePropertyValue")]),s._v("}\n")])]),e("p",[s._v("对于某些属性，可以只写属性名，或者只写属性值。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("UnicodePropertyName")]),s._v("}\n\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("UnicodePropertyValue")]),s._v("}\n")])]),e("p",[e("code",{pre:!0},[s._v("\\P{…}")]),s._v("是"),e("code",{pre:!0},[s._v("\\p{…}")]),s._v("的反向匹配，即匹配不满足条件的字符。")]),e("p",[s._v("注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符。如果不加"),e("code",{pre:!0},[s._v("u")]),s._v("修饰符，正则表达式使用"),e("code",{pre:!0},[s._v("\\p")]),s._v("和"),e("code",{pre:!0},[s._v("\\P")]),s._v("会报错，ECMAScript 预留了这两个类。")]),e("p",[s._v("由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" regex = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/^\\p{Decimal_Number}+$/u")]),s._v(";\nregex."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。")]),e("p",[e("code",{pre:!0},[s._v("\\p{Number}")]),s._v("甚至能匹配罗马数字。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配所有数字")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" regex = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/^\\p{Number}+$/u")]),s._v(";\nregex."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'²³¹¼½¾'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\nregex."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'㉛㉜㉝'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\nregex."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("下面是其他一些例子。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配所有空格")]),s._v("\n\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("White")]),s._v("_Space}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w")]),s._v("\n[\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Alphabetic")]),s._v("}\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Mark")]),s._v("}\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Decimal")]),s._v("_Number}\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Connector")]),s._v("_Punctuation}\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Join")]),s._v("_Control}]\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W")]),s._v("\n[^\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Alphabetic")]),s._v("}\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Mark")]),s._v("}\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Decimal")]),s._v("_Number}\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Connector")]),s._v("_Punctuation}\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Join")]),s._v("_Control}]\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配 Emoji")]),s._v("\n/\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Emoji")]),s._v("_Modifier_Base}\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Emoji")]),s._v("_Modifier}?|\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Emoji")]),s._v("_Presentation}|\\p{"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Emoji")]),s._v("}\\uFE0F/gu\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配所有的箭头字符")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" regexArrows = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/^\\p{Block=Arrows}+$/u")]),s._v(";\nregexArrows."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("h2",[s._v("具名组匹配")]),e("h3",[s._v("简介")]),e("p",[s._v("正则表达式使用圆括号进行组匹配。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_DATE")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),s._v(";\n")])]),e("p",[s._v("上面代码中，正则表达式里面有三组圆括号。使用"),e("code",{pre:!0},[s._v("exec")]),s._v("方法，就可以将这三组匹配结果提取出来。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_DATE")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" matchObj = "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_DATE")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'1999-12-31'")]),s._v(");\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" year = matchObj["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1999")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" month = matchObj["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("]; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 12")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" day = matchObj["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 31")]),s._v("\n")])]),e("p",[s._v("组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如"),e("code",{pre:!0},[s._v("matchObj[1]")]),s._v("）引用，要是组的顺序变了，引用的时候就必须修改序号。")]),e("p",[s._v("ES2018 引入了"),e("a",{attrs:{href:"https://github.com/tc39/proposal-regexp-named-groups"}},[s._v("具名组匹配")]),s._v("（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_DATE")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" matchObj = "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_DATE")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'1999-12-31'")]),s._v(");\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" year = matchObj."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("groups")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("year")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1999")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" month = matchObj."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("groups")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("month")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 12")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" day = matchObj."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("groups")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("day")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 31")]),s._v("\n")])]),e("p",[s._v("上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”（"),e("code",{pre:!0},[s._v("?<year>")]),s._v("），然后就可以在"),e("code",{pre:!0},[s._v("exec")]),s._v("方法返回结果的"),e("code",{pre:!0},[s._v("groups")]),s._v("属性上引用该组名。同时，数字序号（"),e("code",{pre:!0},[s._v("matchObj[1]")]),s._v("）依然有效。")]),e("p",[s._v("具名组匹配等于为每一组匹配加上了 ID，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。")]),e("p",[s._v("如果具名组没有匹配，那么对应的"),e("code",{pre:!0},[s._v("groups")]),s._v("对象属性会是"),e("code",{pre:!0},[s._v("undefined")]),s._v("。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_OPT_A")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/^(?<as>a+)?$/")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" matchObj = "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_OPT_A")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(");\n\nmatchObj."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("groups")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("as")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'as'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" matchObj."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("groups")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("上面代码中，具名组"),e("code",{pre:!0},[s._v("as")]),s._v("没有找到匹配，那么"),e("code",{pre:!0},[s._v("matchObj.groups.as")]),s._v("属性值就是"),e("code",{pre:!0},[s._v("undefined")]),s._v("，并且"),e("code",{pre:!0},[s._v("as")]),s._v("这个键名在"),e("code",{pre:!0},[s._v("groups")]),s._v("是始终存在的。")]),e("h3",[s._v("解构赋值和替换")]),e("p",[s._v("有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {"),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("groups")]),s._v(": {one, two}} = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/^(?<one>.*):(?<two>.*)$/u")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo:bar'")]),s._v(");\none  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// foo")]),s._v("\ntwo  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// bar")]),s._v("\n")])]),e("p",[s._v("字符串替换时，使用"),e("code",{pre:!0},[s._v("$<组名>")]),s._v("引用具名组。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" re = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'2015-01-02'")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("replace")]),s._v("(re, "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'$<day>/$<month>/$<year>'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// '02/01/2015'")]),s._v("\n")])]),e("p",[s._v("上面代码中，"),e("code",{pre:!0},[s._v("replace")]),s._v("方法的第二个参数是一个字符串，而不是正则表达式。")]),e("p",[e("code",{pre:!0},[s._v("replace")]),s._v("方法的第二个参数也可以是函数，该函数的参数序列如下。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'2015-01-02'")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("replace")]),s._v("(re, "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("\n   matched, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 整个匹配结果 2015-01-02")]),s._v("\n   capture1, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 第一个组匹配 2015")]),s._v("\n   capture2, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 第二个组匹配 01")]),s._v("\n   capture3, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 第三个组匹配 02")]),s._v("\n   position, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配开始的位置 0")]),s._v("\n   S, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 原字符串 2015-01-02")]),s._v("\n   groups "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 具名组构成的一个对象 {year, month, day}")]),s._v("\n ")]),s._v(") =>")]),s._v(" {\n "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {day, month, year} = groups;\n "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${day}")]),s._v("/"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${month}")]),s._v("/"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${year}")]),s._v("`")]),s._v(";\n});\n")])]),e("p",[s._v("具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。")]),e("h3",[s._v("引用")]),e("p",[s._v("如果要在正则表达式内部引用某个“具名组匹配”，可以使用"),e("code",{pre:!0},[s._v("\\k<组名>")]),s._v("的写法。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_TWICE")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/^(?<word>[a-z]+)!\\k<word>$/")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_TWICE")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'abc!abc'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_TWICE")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'abc!ab'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("p",[s._v("数字引用（"),e("code",{pre:!0},[s._v("\\1")]),s._v("）依然有效。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_TWICE")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/^(?<word>[a-z]+)!\\1$/")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_TWICE")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'abc!abc'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_TWICE")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'abc!ab'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("p",[s._v("这两种引用语法还可以同时使用。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_TWICE")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/^(?<word>[a-z]+)!\\k<word>!\\1$/")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_TWICE")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'abc!abc!abc'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("RE_TWICE")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("test")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'abc!abc!ab'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("h2",[s._v("正则匹配索引")]),e("p",[s._v("正则匹配结果的开始位置和结束位置，目前获取并不是很方便。正则实例的"),e("code",{pre:!0},[s._v("exec()")]),s._v("方法，返回结果有一个"),e("code",{pre:!0},[s._v("index")]),s._v("属性，可以获取整个匹配结果的开始位置，但是如果包含组匹配，每个组匹配的开始位置，很难拿到。")]),e("p",[s._v("现在有一个"),e("a",{attrs:{href:"https://github.com/tc39/proposal-regexp-match-Indices"}},[s._v("第三阶段提案")]),s._v("，为"),e("code",{pre:!0},[s._v("exec()")]),s._v("方法的返回结果加上"),e("code",{pre:!0},[s._v("indices")]),s._v("属性，在这个属性上面可以拿到匹配的开始位置和结束位置。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" text = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'zabbcdef'")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" re = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/ab/")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" result = re."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(text);\n\nresult."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("index")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\nresult."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("indices")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [ [1, 3] ]")]),s._v("\n")])]),e("p",[s._v("上面例子中，"),e("code",{pre:!0},[s._v("exec()")]),s._v("方法的返回结果"),e("code",{pre:!0},[s._v("result")]),s._v("，它的"),e("code",{pre:!0},[s._v("index")]),s._v("属性是整个匹配结果（"),e("code",{pre:!0},[s._v("ab")]),s._v("）的开始位置，而它的"),e("code",{pre:!0},[s._v("indices")]),s._v("属性是一个数组，成员是每个匹配的开始位置和结束位置的数组。由于该例子的正则表达式没有组匹配，所以"),e("code",{pre:!0},[s._v("indices")]),s._v("数组只有一个成员，表示整个匹配的开始位置是"),e("code",{pre:!0},[s._v("1")]),s._v("，结束位置是"),e("code",{pre:!0},[s._v("3")]),s._v("。")]),e("p",[s._v("注意，开始位置包含在匹配结果之中，但是结束位置不包含在匹配结果之中。比如，匹配结果为"),e("code",{pre:!0},[s._v("ab")]),s._v("，分别是原始字符串的第1位和第2位，那么结束位置就是第3位。")]),e("p",[s._v("如果正则表达式包含组匹配，那么"),e("code",{pre:!0},[s._v("indices")]),s._v("属性对应的数组就会包含多个成员，提供每个组匹配的开始位置和结束位置。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" text = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'zabbcdef'")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" re = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/ab+(cd)/")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" result = re."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(text);\n\nresult."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("indices")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [ [ 1, 6 ], [ 4, 6 ] ]")]),s._v("\n")])]),e("p",[s._v("上面例子中，正则表达式包含一个组匹配，那么"),e("code",{pre:!0},[s._v("indices")]),s._v("属性数组就有两个成员，第一个成员是整个匹配结果（"),e("code",{pre:!0},[s._v("abbcd")]),s._v("）的开始位置和结束位置，第二个成员是组匹配（"),e("code",{pre:!0},[s._v("cd")]),s._v("）的开始位置和结束位置。")]),e("p",[s._v("下面是多个组匹配的例子。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" text = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'zabbcdef'")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" re = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/ab+(cd(ef))/")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" result = re."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(text);\n\nresult."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("indices")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [ [1, 8], [4, 8], [6, 8] ]")]),s._v("\n")])]),e("p",[s._v("上面例子中，正则表达式包含两个组匹配，所以"),e("code",{pre:!0},[s._v("indices")]),s._v("属性数组就有三个成员。")]),e("p",[s._v("如果正则表达式包含具名组匹配，"),e("code",{pre:!0},[s._v("indices")]),s._v("属性数组还会有一个"),e("code",{pre:!0},[s._v("groups")]),s._v("属性。该属性是一个对象，可以从该对象获取具名组匹配的开始位置和结束位置。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" text = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'zabbcdef'")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" re = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/ab+(?<Z>cd)/")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" result = re."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(text);\n\nresult."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("indices")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("groups")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { Z: [ 4, 6 ] }")]),s._v("\n")])]),e("p",[s._v("上面例子中，"),e("code",{pre:!0},[s._v("exec()")]),s._v("方法返回结果的"),e("code",{pre:!0},[s._v("indices.groups")]),s._v("属性是一个对象，提供具名组匹配"),e("code",{pre:!0},[s._v("Z")]),s._v("的开始位置和结束位置。")]),e("p",[s._v("如果获取组匹配不成功，"),e("code",{pre:!0},[s._v("indices")]),s._v("属性数组的对应成员则为"),e("code",{pre:!0},[s._v("undefined")]),s._v("，"),e("code",{pre:!0},[s._v("indices.groups")]),s._v("属性对象的对应成员也是"),e("code",{pre:!0},[s._v("undefined")]),s._v("。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" text = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'zabbcdef'")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" re = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/ab+(?<Z>ce)?/")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" result = re."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(text);\n\nresult."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("indices")]),s._v("["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\nresult."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("indices")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("groups")]),s._v("["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Z'")]),s._v("] "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n")])]),e("p",[s._v("上面例子中，由于组匹配不成功，所以"),e("code",{pre:!0},[s._v("indices")]),s._v("属性数组和"),e("code",{pre:!0},[s._v("indices.groups")]),s._v("属性对象对应的组匹配成员都是"),e("code",{pre:!0},[s._v("undefined")]),s._v("。")]),e("h2",[s._v("String.prototype.matchAll()")]),e("p",[s._v("如果一个正则表达式在字符串里面有多个匹配，现在一般使用"),e("code",{pre:!0},[s._v("g")]),s._v("修饰符或"),e("code",{pre:!0},[s._v("y")]),s._v("修饰符，在循环里面逐一取出。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" regex = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/t(e)(st(\\d?))/g")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" string = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'test1test2test3'")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" matches = [];\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" match;\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (match = regex."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("exec")]),s._v("(string)) {\n  matches."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("(match);\n}\n\nmatches\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//   ["test1", "e", "st1", "1", index: 0, input: "test1test2test3"],')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//   ["test2", "e", "st2", "2", index: 5, input: "test1test2test3"],')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//   ["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ]")]),s._v("\n")])]),e("p",[s._v("上面代码中，"),e("code",{pre:!0},[s._v("while")]),s._v("循环取出每一轮的正则匹配，一共三轮。")]),e("p",[e("a",{attrs:{href:"https://github.com/tc39/proposal-string-matchall"}},[s._v("ES2020")]),s._v(" 增加了"),e("code",{pre:!0},[s._v("String.prototype.matchAll()")]),s._v("方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" string = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'test1test2test3'")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" regex = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/t(e)(st(\\d?))/g")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" match "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" string."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("matchAll")]),s._v("(regex)) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(match);\n}\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["test1", "e", "st1", "1", index: 0, input: "test1test2test3"]')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["test2", "e", "st2", "2", index: 5, input: "test1test2test3"]')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]')]),s._v("\n")])]),e("p",[s._v("上面代码中，由于"),e("code",{pre:!0},[s._v("string.matchAll(regex)")]),s._v("返回的是遍历器，所以可以用"),e("code",{pre:!0},[s._v("for...of")]),s._v("循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。")]),e("p",[s._v("遍历器转为数组是非常简单的，使用"),e("code",{pre:!0},[s._v("...")]),s._v("运算符和"),e("code",{pre:!0},[s._v("Array.from()")]),s._v("方法就可以了。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 转为数组的方法一")]),s._v("\n[...string."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("matchAll")]),s._v("(regex)]\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 转为数组的方法二")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Array")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("from")]),s._v("(string."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("matchAll")]),s._v("(regex))\n")])])])])])}],!1,null,null,null);a.default=r.exports}}]);