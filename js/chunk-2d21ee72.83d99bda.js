(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d21ee72"],{d819:function(s,a,r){"use strict";r.r(a);var t=r("2877"),e=Object(t.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,a=s.$createElement,r=s._self._c||a;return r("section",[r("html",[r("head"),r("body",[r("h1",[s._v("变量的解构赋值")]),r("h2",[s._v("数组的解构赋值")]),r("h3",[s._v("基本用法")]),r("p",[s._v("ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。")]),r("p",[s._v("以前，为变量赋值，只能直接指定值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" b = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" c = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n")])]),r("p",[s._v("ES6 允许写成下面这样。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [a, b, c] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\n")])]),r("p",[s._v("上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。")]),r("p",[s._v("本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [foo, [[bar], baz]] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", [["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("], "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]];\nfoo "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\nbar "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nbaz "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [ , , third] = ["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"baz"')]),s._v("];\nthird "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "baz"')]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x, , y] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\ny "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [head, ...tail] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("];\nhead "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\ntail "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [2, 3, 4]")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x, y, ...z] = ["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v("];\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "a"')]),s._v("\ny "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\nz "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// []")]),s._v("\n")])]),r("p",[s._v("如果解构不成功，变量的值就等于"),r("code",{pre:!0},[s._v("undefined")]),s._v("。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [foo] = [];\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [bar, foo] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("];\n")])]),r("p",[s._v("以上两种情况都属于解构不成功，"),r("code",{pre:!0},[s._v("foo")]),s._v("的值都会等于"),r("code",{pre:!0},[s._v("undefined")]),s._v("。")]),r("p",[s._v("另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x, y] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\ny "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [a, [b], d] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("], "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("];\na "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\nb "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nd "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4")]),s._v("\n")])]),r("p",[s._v("上面两个例子，都属于不完全解构，但是可以成功。")]),r("p",[s._v("如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [foo] = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [foo] = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [foo] = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Na")]),s._v("N;\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [foo] = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [foo] = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [foo] = {};\n")])]),r("p",[s._v("上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。")]),r("p",[s._v("对于 Set 结构，也可以使用数组的解构赋值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x, y, z] = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Set")]),s._v("(["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'c'")]),s._v("]);\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "a"')]),s._v("\n")])]),r("p",[s._v("事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fibs")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" b = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(") {\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" a;\n    [a, b] = [b, a + b];\n  }\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [first, second, third, fourth, fifth, sixth] = "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fibs")]),s._v("();\nsixth "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5")]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("fibs")]),s._v("是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。")]),r("h3",[s._v("默认值")]),r("p",[s._v("解构赋值允许指定默认值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [foo = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("] = [];\nfoo "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x, y = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v("] = ["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v("]; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// x='a', y='b'")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x, y = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v("] = ["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("]; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// x='a', y='b'")]),s._v("\n")])]),r("p",[s._v("注意，ES6 内部使用严格相等运算符（"),r("code",{pre:!0},[s._v("===")]),s._v("），判断一个位置是否有值。所以，只有当一个数组成员严格等于"),r("code",{pre:!0},[s._v("undefined")]),s._v("，默认值才会生效。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] = ["),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("];\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] = ["),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("];\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// null")]),s._v("\n")])]),r("p",[s._v("上面代码中，如果一个数组成员是"),r("code",{pre:!0},[s._v("null")]),s._v("，默认值就不会生效，因为"),r("code",{pre:!0},[s._v("null")]),s._v("不严格等于"),r("code",{pre:!0},[s._v("undefined")]),s._v("。")]),r("p",[s._v("如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aaa'")]),s._v(");\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x = "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("()] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("];\n")])]),r("p",[s._v("上面代码中，因为"),r("code",{pre:!0},[s._v("x")]),s._v("能取到值，所以函数"),r("code",{pre:!0},[s._v("f")]),s._v("根本不会执行。上面的代码其实等价于下面的代码。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x;\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] === "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(") {\n  x = "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("();\n} "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n  x = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("];\n}\n")])]),r("p",[s._v("默认值可以引用解构赋值的其他变量，但该变量必须已经声明。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", y = x] = [];     "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// x=1; y=1")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", y = x] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("];    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// x=2; y=2")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", y = x] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("]; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// x=1; y=2")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x = y, y = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] = [];     "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError: y is not defined")]),s._v("\n")])]),r("p",[s._v("上面最后一个表达式之所以会报错，是因为"),r("code",{pre:!0},[s._v("x")]),s._v("用"),r("code",{pre:!0},[s._v("y")]),s._v("做默认值时，"),r("code",{pre:!0},[s._v("y")]),s._v("还没有声明。")]),r("h2",[s._v("对象的解构赋值")]),r("h3",[s._v("简介")]),r("p",[s._v("解构不仅可以用于数组，还可以用于对象。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { foo, bar } = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aaa'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bbb'")]),s._v(" };\nfoo "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "aaa"')]),s._v("\nbar "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "bbb"')]),s._v("\n")])]),r("p",[s._v("对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { bar, foo } = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aaa'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bbb'")]),s._v(" };\nfoo "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "aaa"')]),s._v("\nbar "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "bbb"')]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { baz } = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aaa'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bbb'")]),s._v(" };\nbaz "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n")])]),r("p",[s._v("上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于"),r("code",{pre:!0},[s._v("undefined")]),s._v("。")]),r("p",[s._v("如果解构失败，变量的值等于"),r("code",{pre:!0},[s._v("undefined")]),s._v("。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {foo} = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'baz'")]),s._v("};\nfoo "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n")])]),r("p",[s._v("上面代码中，等号右边的对象没有"),r("code",{pre:!0},[s._v("foo")]),s._v("属性，所以变量"),r("code",{pre:!0},[s._v("foo")]),s._v("取不到值，所以等于"),r("code",{pre:!0},[s._v("undefined")]),s._v("。")]),r("p",[s._v("对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 例一")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { log, sin, cos } = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Math")]),s._v(";\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 例二")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { log } = "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// hello")]),s._v("\n")])]),r("p",[s._v("上面代码的例一将"),r("code",{pre:!0},[s._v("Math")]),s._v("对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。例二将"),r("code",{pre:!0},[s._v("console.log")]),s._v("赋值到"),r("code",{pre:!0},[s._v("log")]),s._v("变量。")]),r("p",[s._v("如果变量名与属性名不一致，必须写成下面这样。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": baz } = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aaa'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bbb'")]),s._v(" };\nbaz "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "aaa"')]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("first")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("last")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'world'")]),s._v(" };\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("first")]),s._v(": f, "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("last")]),s._v(": l } = obj;\nf "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'hello'")]),s._v("\nl "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'world'")]),s._v("\n")])]),r("p",[s._v("这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo, "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": bar } = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aaa'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bbb'")]),s._v(" };\n")])]),r("p",[s._v("也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": baz } = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aaa'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bbb'")]),s._v(" };\nbaz "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "aaa"')]),s._v("\nfoo "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// error: foo is not defined")]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("foo")]),s._v("是匹配的模式，"),r("code",{pre:!0},[s._v("baz")]),s._v("才是变量。真正被赋值的是变量"),r("code",{pre:!0},[s._v("baz")]),s._v("，而不是模式"),r("code",{pre:!0},[s._v("foo")]),s._v("。")]),r("p",[s._v("与数组一样，解构也可以用于嵌套结构的对象。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("p")]),s._v(": [\n    "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(",\n    { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'World'")]),s._v(" }\n  ]\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("p")]),s._v(": [x, { y }] } = obj;\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "Hello"')]),s._v("\ny "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "World"')]),s._v("\n")])]),r("p",[s._v("注意，这时"),r("code",{pre:!0},[s._v("p")]),s._v("是模式，不是变量，因此不会被赋值。如果"),r("code",{pre:!0},[s._v("p")]),s._v("也要作为变量赋值，可以写成下面这样。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("p")]),s._v(": [\n    "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(",\n    { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'World'")]),s._v(" }\n  ]\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { p, "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("p")]),s._v(": [x, { y }] } = obj;\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "Hello"')]),s._v("\ny "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "World"')]),s._v("\np "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["Hello", {y: "World"}]')]),s._v("\n")])]),r("p",[s._v("下面是另一个例子。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" node = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("loc")]),s._v(": {\n    "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("start")]),s._v(": {\n      "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("line")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n      "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("column")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("\n    }\n  }\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { loc, "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("loc")]),s._v(": { start }, "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("loc")]),s._v(": { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("start")]),s._v(": { line }} } = node;\nline "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\nloc  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {start: Object}")]),s._v("\nstart "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {line: 1, column: 5}")]),s._v("\n")])]),r("p",[s._v("上面代码有三次解构赋值，分别是对"),r("code",{pre:!0},[s._v("loc")]),s._v("、"),r("code",{pre:!0},[s._v("start")]),s._v("、"),r("code",{pre:!0},[s._v("line")]),s._v("三个属性的解构赋值。注意，最后一次对"),r("code",{pre:!0},[s._v("line")]),s._v("属性的解构赋值之中，只有"),r("code",{pre:!0},[s._v("line")]),s._v("是变量，"),r("code",{pre:!0},[s._v("loc")]),s._v("和"),r("code",{pre:!0},[s._v("start")]),s._v("都是模式，不是变量。")]),r("p",[s._v("下面是嵌套赋值的例子。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = {};\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arr = [];\n\n({ "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": obj."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("prop")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": arr["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] } = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("123")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(" });\n\nobj "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// {prop:123}")]),s._v("\narr "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [true]")]),s._v("\n")])]),r("p",[s._v("如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": {bar}} = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("baz")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'baz'")]),s._v("};\n")])]),r("p",[s._v("上面代码中，等号左边对象的"),r("code",{pre:!0},[s._v("foo")]),s._v("属性，对应一个子对象。该子对象的"),r("code",{pre:!0},[s._v("bar")]),s._v("属性，解构时会报错。原因很简单，因为"),r("code",{pre:!0},[s._v("foo")]),s._v("这时等于"),r("code",{pre:!0},[s._v("undefined")]),s._v("，再取子属性就会报错。")]),r("p",[s._v("注意，对象的解构赋值可以取到继承的属性。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj1 = {};\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj2 = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bar'")]),s._v(" };\n"),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("setPrototypeOf")]),s._v("(obj1, obj2);\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { foo } = obj1;\nfoo "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "bar"')]),s._v("\n")])]),r("p",[s._v("上面代码中，对象"),r("code",{pre:!0},[s._v("obj1")]),s._v("的原型对象是"),r("code",{pre:!0},[s._v("obj2")]),s._v("。"),r("code",{pre:!0},[s._v("foo")]),s._v("属性不是"),r("code",{pre:!0},[s._v("obj1")]),s._v("自身的属性，而是继承自"),r("code",{pre:!0},[s._v("obj2")]),s._v("的属性，解构赋值可以取到这个属性。")]),r("h3",[s._v("默认值")]),r("p",[s._v("对象的解构也可以指定默认值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" {x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("} = {};\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" {x, y = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("} = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("};\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\ny "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": y = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("} = {};\ny "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": y = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("} = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("};\ny "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("message")]),s._v(": msg = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Something went wrong'")]),s._v(" } = {};\nmsg "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "Something went wrong"')]),s._v("\n")])]),r("p",[s._v("默认值生效的条件是，对象的属性值严格等于"),r("code",{pre:!0},[s._v("undefined")]),s._v("。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" {x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("} = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("};\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" {x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("} = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("};\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// null")]),s._v("\n")])]),r("p",[s._v("上面代码中，属性"),r("code",{pre:!0},[s._v("x")]),s._v("等于"),r("code",{pre:!0},[s._v("null")]),s._v("，因为"),r("code",{pre:!0},[s._v("null")]),s._v("与"),r("code",{pre:!0},[s._v("undefined")]),s._v("不严格相等，所以是个有效的赋值，导致默认值"),r("code",{pre:!0},[s._v("3")]),s._v("不会生效。")]),r("h3",[s._v("注意点")]),r("p",[s._v("（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 错误的写法")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x;\n{x} = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("};\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// SyntaxError: syntax error")]),s._v("\n")])]),r("p",[s._v("上面代码的写法会报错，因为 JavaScript 引擎会将"),r("code",{pre:!0},[s._v("{x}")]),s._v("理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确的写法")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x;\n({x} = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("});\n")])]),r("p",[s._v("上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。")]),r("p",[s._v("（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("({} = ["),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("]);\n({} = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'abc'")]),s._v(");\n({} = []);\n")])]),r("p",[s._v("上面的表达式虽然毫无意义，但是语法是合法的，可以执行。")]),r("p",[s._v("（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arr = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {"),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" : first, [arr."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" - "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] : last} = arr;\nfirst "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\nlast "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])]),r("p",[s._v("上面代码对数组进行对象解构。数组"),r("code",{pre:!0},[s._v("arr")]),s._v("的"),r("code",{pre:!0},[s._v("0")]),s._v("键对应的值是"),r("code",{pre:!0},[s._v("1")]),s._v("，"),r("code",{pre:!0},[s._v("[arr.length - 1]")]),s._v("就是"),r("code",{pre:!0},[s._v("2")]),s._v("键，对应的值是"),r("code",{pre:!0},[s._v("3")]),s._v("。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。")]),r("h2",[s._v("字符串的解构赋值")]),r("p",[s._v("字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" [a, b, c, d, e] = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v(";\na "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "h"')]),s._v("\nb "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "e"')]),s._v("\nc "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "l"')]),s._v("\nd "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "l"')]),s._v("\ne "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "o"')]),s._v("\n")])]),r("p",[s._v("类似数组的对象都有一个"),r("code",{pre:!0},[s._v("length")]),s._v("属性，因此还可以对这个属性解构赋值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {length : len} = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v(";\nlen "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5")]),s._v("\n")])]),r("h2",[s._v("数值和布尔值的解构赋值")]),r("p",[s._v("解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("toString")]),s._v(": s} = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("123")]),s._v(";\ns === "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("toString")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("toString")]),s._v(": s} = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\ns === "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Boolean")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("toString")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[s._v("上面代码中，数值和布尔值的包装对象都有"),r("code",{pre:!0},[s._v("toString")]),s._v("属性，因此变量"),r("code",{pre:!0},[s._v("s")]),s._v("都能取到值。")]),r("p",[s._v("解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于"),r("code",{pre:!0},[s._v("undefined")]),s._v("和"),r("code",{pre:!0},[s._v("null")]),s._v("无法转为对象，所以对它们进行解构赋值，都会报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("prop")]),s._v(": x } = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("prop")]),s._v(": y } = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError")]),s._v("\n")])]),r("h2",[s._v("函数参数的解构赋值")]),r("p",[s._v("函数的参数也可以使用解构赋值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("add")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("[x, y]")]),s._v("){\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x + y;\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("add")]),s._v("(["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("]); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])]),r("p",[s._v("上面代码中，函数"),r("code",{pre:!0},[s._v("add")]),s._v("的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量"),r("code",{pre:!0},[s._v("x")]),s._v("和"),r("code",{pre:!0},[s._v("y")]),s._v("。对于函数内部的代码来说，它们能感受到的参数就是"),r("code",{pre:!0},[s._v("x")]),s._v("和"),r("code",{pre:!0},[s._v("y")]),s._v("。")]),r("p",[s._v("下面是另一个例子。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("[["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("], ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("]]."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("map")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("[a, b]")]),s._v(") =>")]),s._v(" a + b);\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [ 3, 7 ]")]),s._v("\n")])]),r("p",[s._v("函数参数的解构也可以使用默认值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("move")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", y = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("} = {}")]),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [x, y];\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("move")]),s._v("({"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("8")]),s._v("}); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [3, 8]")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("move")]),s._v("({"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("}); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [3, 0]")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("move")]),s._v("({}); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [0, 0]")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("move")]),s._v("(); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [0, 0]")]),s._v("\n")])]),r("p",[s._v("上面代码中，函数"),r("code",{pre:!0},[s._v("move")]),s._v("的参数是一个对象，通过对这个对象进行解构，得到变量"),r("code",{pre:!0},[s._v("x")]),s._v("和"),r("code",{pre:!0},[s._v("y")]),s._v("的值。如果解构失败，"),r("code",{pre:!0},[s._v("x")]),s._v("和"),r("code",{pre:!0},[s._v("y")]),s._v("等于默认值。")]),r("p",[s._v("注意，下面的写法会得到不一样的结果。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("move")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{x, y} = { x: "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", y: "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" }")]),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [x, y];\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("move")]),s._v("({"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("8")]),s._v("}); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [3, 8]")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("move")]),s._v("({"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("}); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [3, undefined]")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("move")]),s._v("({}); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [undefined, undefined]")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("move")]),s._v("(); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [0, 0]")]),s._v("\n")])]),r("p",[s._v("上面代码是为函数"),r("code",{pre:!0},[s._v("move")]),s._v("的参数指定默认值，而不是为变量"),r("code",{pre:!0},[s._v("x")]),s._v("和"),r("code",{pre:!0},[s._v("y")]),s._v("指定默认值，所以会得到与前一种写法不同的结果。")]),r("p",[r("code",{pre:!0},[s._v("undefined")]),s._v("就会触发函数参数的默认值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("map")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'yes'")])]),s._v(") =>")]),s._v(" x);\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [ 1, 'yes', 3 ]")]),s._v("\n")])]),r("h2",[s._v("圆括号问题")]),r("p",[s._v("解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。")]),r("p",[s._v("由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。")]),r("p",[s._v("但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。")]),r("h3",[s._v("不能使用圆括号的情况")]),r("p",[s._v("以下三种解构赋值不得使用圆括号。")]),r("p",[s._v("（1）变量声明语句")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 全部报错")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [(a)] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("];\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": (c)} = {};\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" ({"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": c}) = {};\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {("),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": c)} = {};\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" {(x): c} = {};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("o")]),s._v(": ({ "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("p")]),s._v(": p }) } = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("o")]),s._v(": { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("p")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" } };\n")])]),r("p",[s._v("上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。")]),r("p",[s._v("（2）函数参数")]),r("p",[s._v("函数参数也属于变量声明，因此不能带有圆括号。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("[(z)]")]),s._v(") { "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" z; }\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("[z,(x)]")]),s._v(") { "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x; }\n")])]),r("p",[s._v("（3）赋值语句的模式")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 全部报错")]),s._v("\n({ "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("p")]),s._v(": a }) = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("p")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(" };\n([a]) = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("];\n")])]),r("p",[s._v("上面代码将整个模式放在圆括号之中，导致报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n[({ "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("p")]),s._v(": a }), { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": c }] = [{}, {}];\n")])]),r("p",[s._v("上面代码将一部分模式放在圆括号之中，导致报错。")]),r("h3",[s._v("可以使用圆括号的情况")]),r("p",[s._v("可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("[(b)] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n({ "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("p")]),s._v(": (d) } = {}); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n[("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("parseInt")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("prop")]),s._v(")] = ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n")])]),r("p",[s._v("上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是"),r("code",{pre:!0},[s._v("p")]),s._v("，而不是"),r("code",{pre:!0},[s._v("d")]),s._v("；第三行语句与第一行语句的性质一致。")]),r("h2",[s._v("用途")]),r("p",[s._v("变量的解构赋值用途很多。")]),r("p",[r("strong",[s._v("（1）交换变量的值")])]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" y = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\n[x, y] = [y, x];\n")])]),r("p",[s._v("上面代码交换变量"),r("code",{pre:!0},[s._v("x")]),s._v("和"),r("code",{pre:!0},[s._v("y")]),s._v("的值，这样的写法不仅简洁，而且易读，语义非常清晰。")]),r("p",[r("strong",[s._v("（2）从函数返回多个值")])]),r("p",[s._v("函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 返回一个数组")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("example")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [a, b, c] = "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("example")]),s._v("();\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 返回一个对象")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("example")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n    "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n    "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n  };\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { foo, bar } = "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("example")]),s._v("();\n")])]),r("p",[r("strong",[s._v("（3）函数参数的定义")])]),r("p",[s._v("解构赋值可以方便地将一组参数与变量名对应起来。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 参数是一组有次序的值")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("[x, y, z]")]),s._v(") { ... }\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("(["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]);\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 参数是一组无次序的值")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{x, y, z}")]),s._v(") { ... }\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("({"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("z")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("});\n")])]),r("p",[r("strong",[s._v("（4）提取 JSON 数据")])]),r("p",[s._v("解构赋值对提取 JSON 对象中的数据，尤其有用。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" jsonData = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(",\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("status")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"OK"')]),s._v(",\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("867")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5309")]),s._v("]\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { id, status, "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": number } = jsonData;\n\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(id, status, number);\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// 42, "OK", [867, 5309]')]),s._v("\n")])]),r("p",[s._v("上面代码可以快速提取 JSON 数据的值。")]),r("p",[r("strong",[s._v("（5）函数参数的默认值")])]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("jQuery."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("ajax")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("url, {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  beforeSend = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" () {},\n  cache = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  complete = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" () {},\n  crossDomain = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\n  "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("global")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  // ... more config\n} = {}")]),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ... do stuff")]),s._v("\n};\n")])]),r("p",[s._v("指定参数的默认值，就避免了在函数体内部再写"),r("code",{pre:!0},[s._v("var foo = config.foo || 'default foo';")]),s._v("这样的语句。")]),r("p",[r("strong",[s._v("（6）遍历 Map 结构")])]),r("p",[s._v("任何部署了 Iterator 接口的对象，都可以用"),r("code",{pre:!0},[s._v("for...of")]),s._v("循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" map = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Map")]),s._v("();\nmap."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("set")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'first'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v(");\nmap."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("set")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'second'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'world'")]),s._v(");\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [key, value] "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" map) {\n  "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(key + "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" is "')]),s._v(" + value);\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// first is hello")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// second is world")]),s._v("\n")])]),r("p",[s._v("如果只想获取键名，或者只想获取键值，可以写成下面这样。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取键名")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [key] "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" map) {\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取键值")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [,value] "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" map) {\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n")])]),r("p",[r("strong",[s._v("（7）输入模块的指定方法")])]),r("p",[s._v("加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("SourceMapConsumer")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("SourceNode")]),s._v(" } = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("require")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"source-map"')]),s._v(");\n")])])])])])}],!1,null,null,null);a.default=e.exports}}]);