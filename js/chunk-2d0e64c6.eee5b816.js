(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d0e64c6"],{"97c5":function(s,e,t){"use strict";t.r(e);var r=t("2877"),a=Object(r.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("section",[t("html",[t("head"),t("body",[t("h1",[s._v("你不懂JS: "),t("em",[s._v("this")]),s._v(" 与对象原型")]),t("h1",[s._v("第三章：对象")]),t("p",[s._v("在第一和第二章中，我们讲解了 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定如何根据函数调用的调用点指向不同的对象。但究竟什么是对象，为什么我们需要指向它们？这一章我们就来详细探索一下对象。")]),t("h2",[s._v("语法")]),t("p",[s._v("对象来自于两种形式：声明（字面）形式，和构造形式。")]),t("p",[s._v("一个对象的字面语法看起来像这样：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("key")]),s._v(": value\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n};\n")])]),t("p",[s._v("构造形式看起来像这样：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObj = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("();\nmyObj."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("key")]),s._v(" = value;\n")])]),t("p",[s._v("构造形式和字面形式的结果是完全同种类的对象。唯一真正的区别在于你可以向字面声明一次性添加一个或多个键/值对，而对于构造形式，你必须一个一个地添加属性。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" 像刚才展示的那样使用“构造形式”来创建对象是极其少见的。你很有可能总是想使用字面语法形式。这对大多数内建的对象也一样（后述）。")]),t("h2",[s._v("类型")]),t("p",[s._v("对象是大多数 JS 程序依赖的基本构建块儿。它们是 JS 的六种主要类型（在语言规范中称为“语言类型”）中的一种：")]),t("ul",[t("li",[t("code",{pre:!0},[s._v("string")])]),t("li",[t("code",{pre:!0},[s._v("number")])]),t("li",[t("code",{pre:!0},[s._v("boolean")])]),t("li",[t("code",{pre:!0},[s._v("null")])]),t("li",[t("code",{pre:!0},[s._v("undefined")])]),t("li",[t("code",{pre:!0},[s._v("object")])])]),t("p",[s._v("注意 "),t("em",[s._v("简单基本类型")]),s._v(" （"),t("code",{pre:!0},[s._v("string")]),s._v("、"),t("code",{pre:!0},[s._v("number")]),s._v("、"),t("code",{pre:!0},[s._v("boolean")]),s._v("、"),t("code",{pre:!0},[s._v("null")]),s._v("、和 "),t("code",{pre:!0},[s._v("undefined")]),s._v("）自身 "),t("strong",[s._v("不是")]),s._v(" "),t("code",{pre:!0},[s._v("object")]),s._v("。"),t("code",{pre:!0},[s._v("null")]),s._v(" 有时会被当成一个对象类型，但是这种误解源自于一个语言中的 Bug，它使得 "),t("code",{pre:!0},[s._v("typeof null")]),s._v(" 错误地（而且令人困惑地）返回字符串 "),t("code",{pre:!0},[s._v('"object"')]),s._v("。实际上，"),t("code",{pre:!0},[s._v("null")]),s._v(" 是它自己的基本类型。")]),t("p",[t("strong",[s._v("一个常见的错误论断是“JavaScript中的一切都是对象”。这明显是不对的。")])]),t("p",[s._v("对比来看，存在几种特殊的对象子类型，我们可以称之为 "),t("em",[s._v("复杂基本类型")]),s._v("。")]),t("p",[t("code",{pre:!0},[s._v("function")]),s._v(" 是对象的一种子类型（技术上讲，叫做“可调用对象”）。函数在 JS 中被称为“头等（first class）”类型，是因为它们基本上就是普通的对象（附带有可调用的行为语义），而且它们可以像其他普通的对象那样被处理。")]),t("p",[s._v("数组也是一种形式的对象，带有特别的行为。数组在内容的组织上要稍稍比一般的对象更加结构化。")]),t("h3",[s._v("内建对象")]),t("p",[s._v("有几种其他的对象子类型，通常称为内建对象。对于其中的一些来说，它们的名称看起来暗示着它们和它们对应的基本类型有着直接的联系，但事实上，它们的关系更复杂，我们一会儿就开始探索。")]),t("ul",[t("li",[t("code",{pre:!0},[s._v("String")])]),t("li",[t("code",{pre:!0},[s._v("Number")])]),t("li",[t("code",{pre:!0},[s._v("Boolean")])]),t("li",[t("code",{pre:!0},[s._v("Object")])]),t("li",[t("code",{pre:!0},[s._v("Function")])]),t("li",[t("code",{pre:!0},[s._v("Array")])]),t("li",[t("code",{pre:!0},[s._v("Date")])]),t("li",[t("code",{pre:!0},[s._v("RegExp")])]),t("li",[t("code",{pre:!0},[s._v("Error")])])]),t("p",[s._v("如果你依照和其他语言的相似性来看的话，比如 Java 语言的 "),t("code",{pre:!0},[s._v("String")]),s._v(" 类，这些内建类型有着实际类型的外观，甚至是类（class）的外观，")]),t("p",[s._v("但是在 JS 中，它们实际上仅仅是内建的函数。这些内建函数的每一个都可以被用作构造器（也就是一个可以通过 "),t("code",{pre:!0},[s._v("new")]),s._v(" 操作符调用的函数 —— 参照第二章），其结果是一个新 "),t("em",[s._v("构建")]),s._v(" 的相应子类型的对象。例如：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" strPrimitive = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"I am a string"')]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" strPrimitive;\t\t\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "string"')]),s._v("\nstrPrimitive "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("String")]),s._v(";\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" strObject = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("String")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"I am a string"')]),s._v(" );\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" strObject; \t\t\t\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "object"')]),s._v("\nstrObject "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("String")]),s._v(";\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 考察 object 子类型")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("toString")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( strObject );\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [object String]")]),s._v("\n")])]),t("p",[s._v("我们会在本章稍后详细地看到 "),t("code",{pre:!0},[s._v("Object.prototype.toString...")]),s._v(" 到底是如何工作的，但简单地说，我们可以通过借用基本的默认 "),t("code",{pre:!0},[s._v("toString()")]),s._v(" 方法来考察内部子类型，而且你可以看到它揭示了 "),t("code",{pre:!0},[s._v("strObject")]),s._v(" 实际上是一个由 "),t("code",{pre:!0},[s._v("String")]),s._v(" 构造器创建的对象。")]),t("p",[s._v("基本类型值 "),t("code",{pre:!0},[s._v('"I am a string"')]),s._v(" 不是一个对象，它是一个不可变的基本字面值。为了对它进行操作，比如检查它的长度，访问它的各个独立字符内容等等，都需要一个 "),t("code",{pre:!0},[s._v("String")]),s._v(" 对象。")]),t("p",[s._v("幸运的是，在必要的时候语言会自动地将 "),t("code",{pre:!0},[s._v('"string"')]),s._v(" 基本类型强制转换为 "),t("code",{pre:!0},[s._v("String")]),s._v(" 对象类型，这意味着你几乎从不需要明确地创建对象。JS 社区的绝大部分人都 "),t("strong",[s._v("强烈推荐")]),s._v(" 尽可能地使用字面形式的值，而非使用构造的对象形式。")]),t("p",[s._v("考虑下面的代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" strPrimitive = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"I am a string"')]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( strPrimitive."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" );\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 13")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( strPrimitive."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("charAt")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ) );\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "m"')]),s._v("\n")])]),t("p",[s._v("在这两个例子中，我们在字符串的基本类型上调用属性和方法，引擎会自动地将它强制转换为 "),t("code",{pre:!0},[s._v("String")]),s._v(" 对象，所以这些属性/方法的访问可以工作。")]),t("p",[s._v("当使用如 "),t("code",{pre:!0},[s._v("42.359.toFixed(2)")]),s._v(" 这样的方法时，同样的强制转换也发生在数字基本字面量 "),t("code",{pre:!0},[s._v("42")]),s._v(" 和包装对象 "),t("code",{pre:!0},[s._v("new Number(42)")]),s._v(" 之间。同样的还有 "),t("code",{pre:!0},[s._v("Boolean")]),s._v(" 对象和 "),t("code",{pre:!0},[s._v('"boolean"')]),s._v(" 基本类型。")]),t("p",[t("code",{pre:!0},[s._v("null")]),s._v(" 和 "),t("code",{pre:!0},[s._v("undefined")]),s._v(" 没有对象包装的形式，仅有它们的基本类型值。相比之下，"),t("code",{pre:!0},[s._v("Date")]),s._v(" 的值 "),t("em",[s._v("仅可以")]),s._v(" 由它们的构造对象形式创建，因为它们没有对应的字面形式。")]),t("p",[s._v("无论使用字面还是构造形式，"),t("code",{pre:!0},[s._v("Object")]),s._v("、"),t("code",{pre:!0},[s._v("Array")]),s._v("、"),t("code",{pre:!0},[s._v("Function")]),s._v("、和 "),t("code",{pre:!0},[s._v("RegExp")]),s._v("（正则表达式）都是对象。在某些情况下，构造形式确实会比对应的字面形式提供更多的创建选项。因为对象可以被任意一种方式创建，更简单的字面形式几乎是所有人的首选。"),t("strong",[s._v("仅仅在你需要使用额外的选项时使用构建形式")]),s._v("。")]),t("p",[t("code",{pre:!0},[s._v("Error")]),s._v(" 对象很少在代码中明示地被创建，它们通常在抛出异常时自动地被创建。它们可以由 "),t("code",{pre:!0},[s._v("new Error(..)")]),s._v(" 构造形式创建，但通常是不必要的。")]),t("h2",[s._v("内容")]),t("p",[s._v("正如刚才提到的，对象的内容由存储在特定命名的 "),t("em",[s._v("位置")]),s._v(" 上的（任意类型的）值组成，我们称这些值为属性。")]),t("p",[s._v("有一个重要的事情需要注意：当我们说“内容”时，似乎暗示着这些值 "),t("em",[s._v("实际上")]),s._v(" 存储在对象内部，但那只不过是表面现象。引擎会根据自己的实现来存储这些值，而且通常都不是把它们存储在容器对象 "),t("em",[s._v("内部")]),s._v("。在容器内存储的是这些属性的名称，它们像指针（技术上讲，叫 "),t("em",[s._v("引用（reference）")]),s._v("）一样指向值存储的地方。")]),t("p",[s._v("考虑下面的代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n\nmyObject["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v("];\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("为了访问 "),t("code",{pre:!0},[s._v("myObject")]),s._v(" 在 "),t("em",[s._v("位置")]),s._v(" "),t("code",{pre:!0},[s._v("a")]),s._v(" 的值，我们需要使用 "),t("code",{pre:!0},[s._v(".")]),s._v(" 或 "),t("code",{pre:!0},[s._v("[ ]")]),s._v(" 操作符。"),t("code",{pre:!0},[s._v(".a")]),s._v(" 语法通常称为“属性（property）”访问，而 "),t("code",{pre:!0},[s._v('["a"]')]),s._v(" 语法通常称为“键（key）”访问。在现实中，它们俩都访问相同的 "),t("em",[s._v("位置")]),s._v("，而且会拿出相同的值，"),t("code",{pre:!0},[s._v("2")]),s._v("，所以这些术语可以互换使用。从现在起，我们将使用最常见的术语 —— “属性访问”。")]),t("p",[s._v("两种语法的主要区别在于，"),t("code",{pre:!0},[s._v(".")]),s._v(" 操作符后面需要一个 "),t("code",{pre:!0},[s._v("标识符（Identifier）")]),s._v(" 兼容的属性名，而 "),t("code",{pre:!0},[s._v('[".."]')]),s._v(" 语法基本可以接收任何兼容 UTF-8/unicode 的字符串作为属性名。举个例子，为了引用一个名为“Super-Fun!”的属性，你不得不使用 "),t("code",{pre:!0},[s._v('["Super-Fun!"]')]),s._v(" 语法访问，因为 "),t("code",{pre:!0},[s._v("Super-Fun!")]),s._v(" 不是一个合法的 "),t("code",{pre:!0},[s._v("Identifier")]),s._v(" 属性名。")]),t("p",[s._v("而且，由于 "),t("code",{pre:!0},[s._v('[".."]')]),s._v(" 语法使用字符串的 "),t("strong",[s._v("值")]),s._v(" 来指定位置，这意味着程序可以动态地组建字符串的值。比如：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" wantA = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" idx;\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (wantA) {\n\tidx = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(";\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 稍后")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( myObject[idx] ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("在对象中，属性名 "),t("strong",[s._v("总是")]),s._v(" 字符串。如果你使用 "),t("code",{pre:!0},[s._v("string")]),s._v(" 以外的（基本）类型值，它会首先被转换为字符串。这甚至包括在数组中常用于索引的数字，所以要小心不要将对象和数组使用的数字搞混了。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = { };\n\nmyObject["),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("] = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\nmyObject["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("] = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(";\nmyObject[myObject] = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"baz"')]),s._v(";\n\nmyObject["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"true"')]),s._v("];\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "foo"')]),s._v("\nmyObject["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"3"')]),s._v("];\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "bar"')]),s._v("\nmyObject["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"[object Object]"')]),s._v("];\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "baz"')]),s._v("\n")])]),t("h3",[s._v("计算型属性名")]),t("p",[s._v("如果你需要将一个计算表达式 "),t("em",[s._v("作为")]),s._v(" 一个键名称，那么我们刚刚描述的 "),t("code",{pre:!0},[s._v("myObject[..]")]),s._v(" 属性访问语法是十分有用的，比如 "),t("code",{pre:!0},[s._v("myObject[prefix + name]")]),s._v("。但是当使用字面对象语法声明对象时则没有什么帮助。")]),t("p",[s._v("ES6 加入了 "),t("em",[s._v("计算型属性名")]),s._v("，在一个字面对象声明的键名称位置，你可以指定一个表达式，用 "),t("code",{pre:!0},[s._v("[ ]")]),s._v(" 括起来：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" prefix = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t[prefix + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v("]: "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"hello"')]),s._v(",\n\t[prefix + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"baz"')]),s._v("]: "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"world"')]),s._v("\n};\n\nmyObject["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foobar"')]),s._v("]; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// hello")]),s._v("\nmyObject["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foobaz"')]),s._v("]; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// world")]),s._v("\n")])]),t("p",[t("em",[s._v("计算型属性名")]),s._v(" 的最常见用法，可能是用于 ES6 的 "),t("code",{pre:!0},[s._v("Symbol")]),s._v("，我们将不会在本书中涵盖关于它的细节。简单地说，它们是新的基本数据类型，拥有一个不透明不可知的值（技术上讲是一个 "),t("code",{pre:!0},[s._v("string")]),s._v(" 值）。你将会被强烈地不鼓励使用一个 "),t("code",{pre:!0},[s._v("Symbol")]),s._v(" 的 "),t("em",[s._v("实际值")]),s._v(" （这个值理论上会因 JS 引擎的不同而不同），所以 "),t("code",{pre:!0},[s._v("Symbol")]),s._v(" 的名称，比如 "),t("code",{pre:!0},[s._v("Symbol.Something")]),s._v("（这是个瞎编的名称！），才是你会使用的：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t["),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Symbol")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("Something")]),s._v("]: "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"hello world"')]),s._v("\n};\n")])]),t("h3",[s._v("属性（Property） vs. 方法（Method）")]),t("p",[s._v("有些开发者喜欢在讨论对一个对象的属性访问时做一个区别，如果这个被访问的值恰好是一个函数的话。因为这诱使人们认为函数 "),t("em",[s._v("属于")]),s._v(" 这个对象，而且在其他语言中，属于对象（也就是“类”）的函数被称作“方法”，所以相对于“属性访问”，我们常能听到“方法访问”。")]),t("p",[s._v("有趣的是，"),t("strong",[s._v("语言规范也做出了同样的区别")]),s._v("。")]),t("p",[s._v("从技术上讲，函数绝不会“属于”对象，所以，说一个偶然在对象的引用上被访问的函数就自动地成为了一个“方法”，看起来有些像是牵强附会。")]),t("p",[s._v("有些函数内部确实拥有 "),t("code",{pre:!0},[s._v("this")]),s._v(" 引用，而且 "),t("em",[s._v("有时")]),s._v(" 这些 "),t("code",{pre:!0},[s._v("this")]),s._v(" 引用指向调用点的对象引用。但这个用法确实没有使这个函数比其他函数更像“方法”，因为 "),t("code",{pre:!0},[s._v("this")]),s._v(" 是在运行时在调用点动态绑定的，这使得它与这个对象的关系至多是间接的。")]),t("p",[s._v("每次你访问一个对象的属性都是一个 "),t("strong",[s._v("属性访问")]),s._v("，无论你得到什么类型的值。如果你 "),t("em",[s._v("恰好")]),s._v(" 从属性访问中得到一个函数，它也没有魔法般地在那时成为一个“方法”。一个从属性访问得来的函数没有任何特殊性（隐含的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定的情况在刚才已经解释过了）。")]),t("p",[s._v("举个例子：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" someFoo = foo;\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 对 `foo` 的变量引用")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("someFoo")]),s._v(": foo\n};\n\nfoo;\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// function foo(){..}")]),s._v("\n\nsomeFoo;\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// function foo(){..}")]),s._v("\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("someFoo")]),s._v(";\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// function foo(){..}")]),s._v("\n")])]),t("p",[t("code",{pre:!0},[s._v("someFoo")]),s._v(" 和 "),t("code",{pre:!0},[s._v("myObject.someFoo")]),s._v(" 只不过是同一个函数的两个分离的引用，它们中的任何一个都不意味着这个函数很特别或被其他对象所“拥有”。如果上面的 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 定义里面拥有一个 "),t("code",{pre:!0},[s._v("this")]),s._v(" 引用，那么 "),t("code",{pre:!0},[s._v("myObject.someFoo")]),s._v(" 的 "),t("em",[s._v("隐含绑定")]),s._v(" 将会是这个两个引用间 "),t("strong",[s._v("唯一")]),s._v(" 可以观察到的不同。它们中的任何一个都没有称为“方法”的道理。")]),t("p",[t("strong",[s._v("也许有人会争辩")]),s._v("，函数 "),t("em",[s._v("变成了方法")]),s._v("，不是在定义期间，而是在调用的执行期间，根据它是如何在调用点被调用的（是否带有一个环境对象引用 —— 细节见第二章）。即便是这种解读也有些牵强。")]),t("p",[s._v("可能最安全的结论是，在 JavaScript 中，“函数”和“方法”是可以互换使用的。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" ES6 加入了 "),t("code",{pre:!0},[s._v("super")]),s._v(" 引用，它通常是和 "),t("code",{pre:!0},[s._v("class")]),s._v("（见附录A）一起使用的。"),t("code",{pre:!0},[s._v("super")]),s._v(" 的行为方式（静态绑定，而非像 "),t("code",{pre:!0},[s._v("this")]),s._v(" 一样延迟绑定），给了这种说法更多的权重：一个被 "),t("code",{pre:!0},[s._v("super")]),s._v(" 绑定到某处的函数比起“函数”更像一个“方法”。但是同样地，这仅仅是微妙的语义上的（和机制上的）细微区别。")]),t("p",[s._v("就算你声明一个函数表达式作为字面对象的一部分，那个函数都不会魔法般地 "),t("em",[s._v("属于")]),s._v(" 这个对象 —— 仍然仅仅是同一个函数对象的多个引用罢了。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(" );\n\t}\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" someFoo = myObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(";\n\nsomeFoo;\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// function foo(){..}")]),s._v("\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(";\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// function foo(){..}")]),s._v("\n")])]),t("p",[t("strong",[s._v("注意：")]),s._v(" 在第六章中，我们会为字面对象的 "),t("code",{pre:!0},[s._v("foo: function foo(){ .. }")]),s._v(" 声明语法介绍一种ES6的简化语法。")]),t("h3",[s._v("数组")]),t("p",[s._v("数组也使用 "),t("code",{pre:!0},[s._v("[ ]")]),s._v(" 访问形式，但正如上面提到的，在存储值的方式和位置上它们的组织更加结构化（虽然仍然在存储值的 "),t("em",[s._v("类型")]),s._v(" 上没有限制）。数组采用 "),t("em",[s._v("数字索引")]),s._v("，这意味着值被存储的位置，通常称为 "),t("em",[s._v("下标")]),s._v("，是一个非负整数，比如 "),t("code",{pre:!0},[s._v("0")]),s._v(" 和 "),t("code",{pre:!0},[s._v("42")]),s._v("。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myArray = [ "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(" ];\n\nmyArray."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(";\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\nmyArray["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("];\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "foo"')]),s._v("\n\nmyArray["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("];\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "bar"')]),s._v("\n")])]),t("p",[s._v("数组也是对象，所以虽然每个索引都是正整数，你还可以在数组上添加属性：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myArray = [ "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(" ];\n\nmyArray."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("baz")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"baz"')]),s._v(";\n\nmyArray."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(";\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\nmyArray."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("baz")]),s._v(";\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "baz"')]),s._v("\n")])]),t("p",[s._v("注意，添加命名属性（不论是使用 "),t("code",{pre:!0},[s._v(".")]),s._v(" 还是 "),t("code",{pre:!0},[s._v("[ ]")]),s._v(" 操作符语法）不会改变数组的 "),t("code",{pre:!0},[s._v("length")]),s._v(" 所报告的值。")]),t("p",[s._v("你 "),t("em",[s._v("可以")]),s._v(" 把一个数组当做普通的键/值对象使用，并且从不添加任何数字下标，但这不是一个好主意，因为数组对它本来的用途有着特定的行为和优化方式，普通对象也一样。使用对象来存储键/值对，而用数组在数字下标上存储值。")]),t("p",[t("strong",[s._v("小心：")]),s._v(" 如果你试图在一个数组上添加属性，但是属性名 "),t("em",[s._v("看起来")]),s._v(" 像一个数字，那么最终它会成为一个数字索引（也就是改变了数组的内容）：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myArray = [ "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(" ];\n\nmyArray["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"3"')]),s._v("] = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"baz"')]),s._v(";\n\nmyArray."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(";\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4")]),s._v("\n\nmyArray["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "baz"')]),s._v("\n")])]),t("h3",[s._v("复制对象")]),t("p",[s._v("当开发者们初次拿起 Javascript 语言时，最常需要的特性就是如何复制一个对象。看起来应该有一个内建的 "),t("code",{pre:!0},[s._v("copy()")]),s._v(" 方法，对吧？但是事情实际上比这复杂一些，因为在默认情况下，复制的算法应当是什么，并不十分明确。")]),t("p",[s._v("例如，考虑这个对象：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("anotherFunction")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") { "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*..*/")]),s._v(" }\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" anotherObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("c")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" anotherArray = [];\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": anotherObject,\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 引用，不是拷贝!")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("c")]),s._v(": anotherArray,\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 又一个引用!")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("d")]),s._v(": anotherFunction\n};\n\nanotherArray."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("( anotherObject, myObject );\n")])]),t("p",[s._v("一个"),t("code",{pre:!0},[s._v("myObject")]),s._v("的 "),t("em",[s._v("拷贝")]),s._v(" 究竟应该怎么表现？")]),t("p",[s._v("首先，我们应该回答它是一个 "),t("em",[s._v("浅（shallow）")]),s._v(" 还是一个 "),t("em",[s._v("深（deep）")]),s._v(" 拷贝？一个 "),t("em",[s._v("浅拷贝（shallow copy）")]),s._v(" 会得到一个新对象，它的 "),t("code",{pre:!0},[s._v("a")]),s._v(" 是值 "),t("code",{pre:!0},[s._v("2")]),s._v(" 的拷贝，但 "),t("code",{pre:!0},[s._v("b")]),s._v("、"),t("code",{pre:!0},[s._v("c")]),s._v(" 和 "),t("code",{pre:!0},[s._v("d")]),s._v(" 属性仅仅是引用，它们指向被拷贝对象中引用的相同位置。一个 "),t("em",[s._v("深拷贝（deep copy）")]),s._v(" 将不仅复制 "),t("code",{pre:!0},[s._v("myObject")]),s._v("，还会复制 "),t("code",{pre:!0},[s._v("anotherObject")]),s._v(" 和 "),t("code",{pre:!0},[s._v("anotherArray")]),s._v("。但之后我们让 "),t("code",{pre:!0},[s._v("anotherArray")]),s._v(" 拥有 "),t("code",{pre:!0},[s._v("anotherObject")]),s._v(" 和 "),t("code",{pre:!0},[s._v("myObject")]),s._v(" 的引用，所以 "),t("em",[s._v("那些")]),s._v(" 也应当被复制而不是仅保留引用。现在由于循环引用，我们得到了一个无限循环复制的问题。")]),t("p",[s._v("我们应当检测循环引用并打破循环遍历吗（不管位于深处的，没有完全复制的元素）？我们应当报错退出吗？或者介于两者之间？")]),t("p",[s._v("另外，“复制”一个函数意味着什么，也不是很清楚。有一些技巧，比如提取一个函数源代码的 "),t("code",{pre:!0},[s._v("toString()")]),s._v(" 序列化表达（这个源代码会因实现不同而不同，而且根据被考察的函数的类型，其结果甚至在所有引擎上都不可靠）。")]),t("p",[s._v("那么我们如何解决所有这些刁钻的问题？不同的 JS 框架都各自挑选自己的解释并且做出自己的选择。但是哪一种（如果有的话）才是 JS 应当作为标准采用的呢？长久以来，没有明确答案。")]),t("p",[s._v("一个解决方案是，JSON 安全的对象（也就是，可以被序列化为一个 JSON 字符串，之后还可以被重新解析为拥有相同的结构和值的对象）可以简单地这样 "),t("em",[s._v("复制")]),s._v("：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" newObj = "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("JSON")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("parse")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("JSON")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("stringify")]),s._v("( someObj ) );\n")])]),t("p",[s._v("当然，这要求你保证你的对象是 JSON 安全的。对于某些情况，这没什么大不了的。而对另一些情况，这还不够。")]),t("p",[s._v("同时，浅拷贝相当易懂，而且没有那么多问题，所以 ES6 为此任务已经定义了 "),t("code",{pre:!0},[s._v("Object.assign(..)")]),s._v("。"),t("code",{pre:!0},[s._v("Object.assign(..)")]),s._v(" 接收 "),t("em",[s._v("目标")]),s._v(" 对象作为第一个参数，然后是一个或多个 "),t("em",[s._v("源")]),s._v(" 对象作为后续参数。它会在 "),t("em",[s._v("源")]),s._v(" 对象上迭代所有的 "),t("em",[s._v("可枚举（enumerable）")]),s._v("，"),t("em",[s._v("owned keys")]),s._v("（"),t("strong",[s._v("直接拥有的键")]),s._v("），并把它们拷贝到 "),t("em",[s._v("目标")]),s._v(" 对象上（仅通过 "),t("code",{pre:!0},[s._v("=")]),s._v(" 赋值）。它还会很方便地返回 "),t("em",[s._v("目标")]),s._v(" 对象，正如下面你可以看到的：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" newObj = "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("assign")]),s._v("( {}, myObject );\n\nnewObj."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\t\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nnewObj."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v(" === anotherObject;\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\nnewObj."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("c")]),s._v(" === anotherArray;\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\nnewObj."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("d")]),s._v(" === anotherFunction;\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),t("p",[t("strong",[s._v("注意：")]),s._v(" 在下一部分中，我们将讨论“属性描述符（property descriptors —— 属性的性质）”并展示 "),t("code",{pre:!0},[s._v("Object.defineProperty(..)")]),s._v(" 的使用。然而在 "),t("code",{pre:!0},[s._v("Object.assign(..)")]),s._v(" 中发生的复制是单纯的 "),t("code",{pre:!0},[s._v("=")]),s._v(" 式赋值，所以任何在源对象属性的特殊性质（比如 "),t("code",{pre:!0},[s._v("writable")]),s._v("）在目标对象上 "),t("strong",[s._v("都不会保留")]),s._v(" 。")]),t("h3",[s._v("属性描述符（Property Descriptors）")]),t("p",[s._v("在 ES5 之前，JavaScript 语言没有给出直接的方法，让你的代码可以考察或描述属性性质间的区别，比如属性是否为只读。")]),t("p",[s._v("在 ES5 中，所有的属性都用 "),t("strong",[s._v("属性描述符（Property Descriptors）")]),s._v(" 来描述。")]),t("p",[s._v("考虑这段代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getOwnPropertyDescriptor")]),s._v("( myObject, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(" );\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// {")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    value: 2,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    writable: true,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    enumerable: true,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    configurable: true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// }")]),s._v("\n")])]),t("p",[s._v("正如你所见，我们普通的对象属性 "),t("code",{pre:!0},[s._v("a")]),s._v(" 的属性描述符（称为“数据描述符”，因为它仅持有一个数据值）的内容要比 "),t("code",{pre:!0},[s._v("value")]),s._v(" 为 "),t("code",{pre:!0},[s._v("2")]),s._v(" 多得多。它还包含另外三个性质："),t("code",{pre:!0},[s._v("writable")]),s._v("、"),t("code",{pre:!0},[s._v("enumerable")]),s._v("、和 "),t("code",{pre:!0},[s._v("configurable")]),s._v("。")]),t("p",[s._v("当我们创建一个普通属性时，可以看到属性描述符的各种性质的默认值，同时我们可以用 "),t("code",{pre:!0},[s._v("Object.defineProperty(..)")]),s._v(" 来添加新属性，或使用期望的性质来修改既存的属性（如果它是 "),t("code",{pre:!0},[s._v("configurable")]),s._v(" 的！）。")]),t("p",[s._v("举例来说：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("( myObject, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(", {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("writable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n} );\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("使用 "),t("code",{pre:!0},[s._v("defineProperty(..)")]),s._v("，我们手动、明确地在 "),t("code",{pre:!0},[s._v("myObject")]),s._v(" 上添加了一个直白的，普通的 "),t("code",{pre:!0},[s._v("a")]),s._v(" 属性。然而，你通常不会使用这种手动方法，除非你想要把描述符的某个性质修改为不同的值。")]),t("h4",[s._v("可写性（Writable）")]),t("p",[t("code",{pre:!0},[s._v("writable")]),s._v(" 控制着你改变属性值的能力。")]),t("p",[s._v("考虑这段代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("( myObject, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(", {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("writable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不可写！")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n} );\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("如你所见，我们对 "),t("code",{pre:!0},[s._v("value")]),s._v(" 的修改悄无声息地失败了。如果我们在 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 下进行尝试，会得到一个错误：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v('"use strict"')]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("( myObject, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(", {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("writable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不可写！")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n} );\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError")]),s._v("\n")])]),t("p",[s._v("这个 "),t("code",{pre:!0},[s._v("TypeError")]),s._v(" 告诉我们，我们不能改变一个不可写属性。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" 我们一会儿就会讨论 getters/setters，但是简单地说，你可以观察到 "),t("code",{pre:!0},[s._v("writable:false")]),s._v(" 意味着值不可改变，和你定义一个空的 setter 是有些等价的。实际上，你的空 setter 在被调用时需要扔出一个 "),t("code",{pre:!0},[s._v("TypeError")]),s._v("，来和 "),t("code",{pre:!0},[s._v("writable:false")]),s._v(" 保持一致。")]),t("h4",[s._v("可配置性（Configurable）")]),t("p",[s._v("只要属性当前是可配置的，我们就可以使用相同的 "),t("code",{pre:!0},[s._v("defineProperty(..)")]),s._v(" 工具，修改它的描述符定义。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("( myObject, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(", {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("writable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不可配置！")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n} );\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4")]),s._v("\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(";\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("( myObject, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(", {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("writable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n} ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError")]),s._v("\n")])]),t("p",[s._v("最后的 "),t("code",{pre:!0},[s._v("defineProperty(..)")]),s._v(" 调用导致了一个 TypeError，这与 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 无关，如果你试图改变一个不可配置属性的描述符定义，就会发生 TypeError。要小心：如你所看到的，将 "),t("code",{pre:!0},[s._v("configurable")]),s._v(" 设置为 "),t("code",{pre:!0},[s._v("false")]),s._v(" 是 "),t("strong",[s._v("一个单向操作，不可撤销！")])]),t("p",[t("strong",[s._v("注意：")]),s._v(" 这里有一个需要注意的微小例外：即便属性已经是 "),t("code",{pre:!0},[s._v("configurable:false")]),s._v("，"),t("code",{pre:!0},[s._v("writable")]),s._v(" 总是可以没有错误地从 "),t("code",{pre:!0},[s._v("true")]),s._v(" 改变为 "),t("code",{pre:!0},[s._v("false")]),s._v("，但如果已经是 "),t("code",{pre:!0},[s._v("false")]),s._v(" 的话不能变回 "),t("code",{pre:!0},[s._v("true")]),s._v("。")]),t("p",[t("code",{pre:!0},[s._v("configurable:false")]),s._v(" 阻止的另外一个事情是使用 "),t("code",{pre:!0},[s._v("delete")]),s._v(" 操作符移除既存属性的能力。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("delete")]),s._v(" myObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("( myObject, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(", {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("writable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n} );\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("delete")]),s._v(" myObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(";\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("如你所见，最后的 "),t("code",{pre:!0},[s._v("delete")]),s._v(" 调用（无声地）失败了，因为我们将 "),t("code",{pre:!0},[s._v("a")]),s._v(" 属性设置成了不可配置。")]),t("p",[t("code",{pre:!0},[s._v("delete")]),s._v(" 仅用于直接从目标对象移除该对象的（可以被移除的）属性。如果一个对象的属性是某个其他对象/函数的最后一个现存的引用，而你 "),t("code",{pre:!0},[s._v("delete")]),s._v(" 了它，那么这就移除了这个引用，于是现在那个没有被任何地方所引用的对象/函数就可以被作为垃圾回收。但是，将 "),t("code",{pre:!0},[s._v("delete")]),s._v(" 当做一个像其他语言（如 C/C++）中那样的释放内存工具是 "),t("strong",[s._v("不")]),s._v(" 恰当的。"),t("code",{pre:!0},[s._v("delete")]),s._v(" 仅仅是一个对象属性移除操作 —— 没有更多别的含义。")]),t("h4",[s._v("可枚举性（Enumerable）")]),t("p",[s._v("我们将要在这里提到的最后一个描述符性质是 "),t("code",{pre:!0},[s._v("enumerable")]),s._v("（还有另外两个，我们将在一会儿讨论 getter/setters 时谈到）。")]),t("p",[s._v("它的名称可能已经使它的功能很明显了，这个性质控制着一个属性是否能在特定的对象-属性枚举操作中出现，比如 "),t("code",{pre:!0},[s._v("for..in")]),s._v(" 循环。设置为 "),t("code",{pre:!0},[s._v("false")]),s._v(" 将会阻止它出现在这样的枚举中，即使它依然完全是可以访问的。设置为 "),t("code",{pre:!0},[s._v("true")]),s._v(" 会使它出现。")]),t("p",[s._v("所有普通的用户定义属性都默认是可 "),t("code",{pre:!0},[s._v("enumerable")]),s._v(" 的，正如你通常希望的那样。但如果你有一个特殊的属性，你想让它对枚举隐藏，就将它设置为 "),t("code",{pre:!0},[s._v("enumerable:false")]),s._v("。")]),t("p",[s._v("我们一会儿就更加详细地演示可枚举性，所以在大脑中给这个话题上打一个书签。")]),t("h3",[s._v("不可变性（Immutability）")]),t("p",[s._v("有时我们希望将属性或对象（有意或无意地）设置为不可改变的。ES5 用几种不同的微妙方式，加入了对此功能的支持。")]),t("p",[s._v("一个重要的注意点是："),t("strong",[s._v("所有")]),s._v(" 这些方法创建的都是浅不可变性。也就是，它们仅影响对象和它的直属属性的性质。如果对象拥有对其他对象（数组、对象、函数等）的引用，那个对象的 "),t("em",[s._v("内容")]),s._v(" 不会受影响，任然保持可变。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("myImmutableObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3]")]),s._v("\nmyImmutableObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" );\nmyImmutableObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3,4]")]),s._v("\n")])]),t("p",[s._v("在这段代码中，我们假设 "),t("code",{pre:!0},[s._v("myImmutableObject")]),s._v(" 已经被创建，而且被保护为不可变。但是，为了保护 "),t("code",{pre:!0},[s._v("myImmutableObject.foo")]),s._v(" 的内容（也是一个对象 —— 数组），你将需要使用下面的一个或多个方法将 "),t("code",{pre:!0},[s._v("foo")]),s._v(" 设置为不可变。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" 在 JS 程序中创建完全不可动摇的对象是不那么常见的。有些特殊情况当然需要，但作为一个普通的设计模式，如果你发现自己想要 "),t("em",[s._v("封印（seal）")]),s._v(" 或 "),t("em",[s._v("冻结（freeze）")]),s._v(" 你所有的对象，那么你可能想要退一步来重新考虑你的程序设计，让它对对象值的潜在变化更加健壮。")]),t("h4",[s._v("对象常量（Object Constant）")]),t("p",[s._v("通过将 "),t("code",{pre:!0},[s._v("writable:false")]),s._v(" 与 "),t("code",{pre:!0},[s._v("configurable:false")]),s._v(" 组合，你可以实质上创建了一个作为对象属性的 "),t("em",[s._v("常量")]),s._v("（不能被改变，重定义或删除），比如：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("( myObject, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"FAVORITE_NUMBER"')]),s._v(", {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("writable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("\n} );\n")])]),t("h4",[s._v("防止扩展（Prevent Extensions）")]),t("p",[s._v("如果你想防止一个对象被添加新的属性，但另一方面保留其他既存的对象属性，可以调用 "),t("code",{pre:!0},[s._v("Object.preventExtensions(..)")]),s._v("：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("preventExtensions")]),s._v("( myObject );\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n")])]),t("p",[s._v("在非 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 模式下，"),t("code",{pre:!0},[s._v("b")]),s._v(" 的创建会无声地失败。在 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 下，它会抛出 "),t("code",{pre:!0},[s._v("TypeError")]),s._v("。")]),t("h4",[s._v("封印（Seal）")]),t("p",[t("code",{pre:!0},[s._v("Object.seal(..)")]),s._v(" 创建一个“封印”的对象，这意味着它实质上在当前的对象上调用 "),t("code",{pre:!0},[s._v("Object.preventExtensions(..)")]),s._v("，同时也将它所有的既存属性标记为 "),t("code",{pre:!0},[s._v("configurable:false")]),s._v("。")]),t("p",[s._v("所以，你既不能添加更多的属性，也不能重新配置或删除既存属性（虽然你依然 "),t("em",[s._v("可以")]),s._v(" 修改它们的值）。")]),t("h4",[s._v("冻结（Freeze）")]),t("p",[t("code",{pre:!0},[s._v("Object.freeze(..)")]),s._v(" 创建一个冻结的对象，这意味着它实质上在当前的对象上调用 "),t("code",{pre:!0},[s._v("Object.seal(..)")]),s._v("，同时也将它所有的“数据访问”属性设置为 "),t("code",{pre:!0},[s._v("writable:false")]),s._v("，所以它们的值不可改变。")]),t("p",[s._v("这种方法是你可以从对象自身获得的最高级别的不可变性，因为它阻止任何对对象或对象直属属性的改变（虽然，就像上面提到的，任何被引用的对象的内容不受影响）。")]),t("p",[s._v("你可以“深度冻结”一个对象：在这个对象上调用 "),t("code",{pre:!0},[s._v("Object.freeze(..)")]),s._v("，然后递归地迭代所有它引用的（目前还没有受过影响的）对象，然后也在它们上面调用 "),t("code",{pre:!0},[s._v("Object.freeze(..)")]),s._v("。但是要小心，这可能会影响其他你并不打算影响的（共享的）对象。")]),t("h3",[t("code",{pre:!0},[s._v("[[Get]]")])]),t("p",[s._v("关于属性访问如何工作有一个重要的细节。")]),t("p",[s._v("考虑下面的代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[t("code",{pre:!0},[s._v("myObject.a")]),s._v(" 是一个属性访问，但是它并不是看起来那样，仅仅在 "),t("code",{pre:!0},[s._v("myObject")]),s._v(" 中寻找一个名为 "),t("code",{pre:!0},[s._v("a")]),s._v(" 的属性。")]),t("p",[s._v("根据语言规范，上面的代码实际上在 "),t("code",{pre:!0},[s._v("myObject")]),s._v(" 上执行了一个 "),t("code",{pre:!0},[s._v("[[Get]]")]),s._v(" 操作（有些像 "),t("code",{pre:!0},[s._v("[[Get]]()")]),s._v(" 函数调用）。对一个对象进行默认的内建 "),t("code",{pre:!0},[s._v("[[Get]]")]),s._v(" 操作，会 "),t("em",[s._v("首先")]),s._v(" 检查对象，寻找一个拥有被请求的名称的属性，如果找到，就返回相应的值。")]),t("p",[s._v("然而，如果按照被请求的名称 "),t("em",[s._v("没能")]),s._v(" 找到属性，"),t("code",{pre:!0},[s._v("[[Get]]")]),s._v(" 的算法定义了另一个重要的行为。我们会在第五章来解释 "),t("em",[s._v("接下来")]),s._v(" 会发生什么（遍历 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" 链，如果有的话）。")]),t("p",[s._v("但 "),t("code",{pre:!0},[s._v("[[Get]]")]),s._v(" 操作的一个重要结果是，如果它通过任何方法都不能找到被请求的属性的值，那么它会返回 "),t("code",{pre:!0},[s._v("undefined")]),s._v("。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n")])]),t("p",[s._v("这个行为和你通过标识符名称来引用 "),t("em",[s._v("变量")]),s._v(" 不同。如果你引用了一个在可用的词法作用域内无法解析的变量，其结果不是像对象属性那样返回 "),t("code",{pre:!0},[s._v("undefined")]),s._v("，而是抛出一个 "),t("code",{pre:!0},[s._v("ReferenceError")]),s._v("。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n};\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n")])]),t("p",[s._v("从 "),t("em",[s._v("值")]),s._v(" 的角度来说，这两个引用没有区别 —— 它们的结果都是 "),t("code",{pre:!0},[s._v("undefined")]),s._v("。然而，在 "),t("code",{pre:!0},[s._v("[[Get]]")]),s._v(" 操作的底层，虽然不明显，但是比起处理引用 "),t("code",{pre:!0},[s._v("myObject.a")]),s._v("，处理 "),t("code",{pre:!0},[s._v("myObject.b")]),s._v(" 的操作要多做一些潜在的“工作”。")]),t("p",[s._v("如果仅仅考察结果的值，你无法分辨一个属性是存在并持有一个 "),t("code",{pre:!0},[s._v("undefined")]),s._v(" 值，还是因为属性根本 "),t("em",[s._v("不")]),s._v(" 存在所以 "),t("code",{pre:!0},[s._v("[[Get]]")]),s._v(" 无法返回某个具体值而返回默认的 "),t("code",{pre:!0},[s._v("undefined")]),s._v("。但是，你很快就能看到你其实 "),t("em",[s._v("可以")]),s._v(" 分辨这两种场景。")]),t("h3",[t("code",{pre:!0},[s._v("[[Put]]")])]),t("p",[s._v("既然为了从一个属性中取得值而存在一个内部定义的 "),t("code",{pre:!0},[s._v("[[Get]]")]),s._v(" 操作，那么很明显应该也存在一个默认的 "),t("code",{pre:!0},[s._v("[[Put]]")]),s._v(" 操作。")]),t("p",[s._v("这很容易让人认为，给一个对象的属性赋值，将会在这个对象上调用 "),t("code",{pre:!0},[s._v("[[Put]]")]),s._v(" 来设置或创建这个属性。但是实际情况却有一些微妙的不同。")]),t("p",[s._v("调用 "),t("code",{pre:!0},[s._v("[[Put]]")]),s._v(" 时，它根据几个因素表现不同的行为，包括（影响最大的）属性是否已经在对象中存在了。")]),t("p",[s._v("如果属性存在，"),t("code",{pre:!0},[s._v("[[Put]]")]),s._v(" 算法将会大致检查：")]),t("ol",[t("li",[s._v('这个属性是访问器描述符吗（见下一节"Getters 与 Setters"）？'),t("strong",[s._v("如果是，而且是 setter，就调用 setter。")])]),t("li",[s._v("这个属性是 "),t("code",{pre:!0},[s._v("writable")]),s._v(" 为 "),t("code",{pre:!0},[s._v("false")]),s._v(" 数据描述符吗？"),t("strong",[s._v("如果是，在非 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 下无声地失败，或者在 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 下抛出 "),t("code",{pre:!0},[s._v("TypeError")]),s._v("。")])]),t("li",[s._v("否则，像平常一样设置既存属性的值。")])]),t("p",[s._v("如果属性在当前的对象中还不存在，"),t("code",{pre:!0},[s._v("[[Put]]")]),s._v(" 操作会变得更微妙和复杂。我们将在第五章讨论 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" 时再次回到这个场景，更清楚地解释它。")]),t("h3",[s._v("Getters 与 Setters")]),t("p",[s._v("对象默认的 "),t("code",{pre:!0},[s._v("[[Put]]")]),s._v(" 和 "),t("code",{pre:!0},[s._v("[[Get]]")]),s._v(" 操作分别完全控制着如何设置既存或新属性的值，和如何取得既存属性。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" 使用较先进的语言特性，覆盖整个对象（不仅是每个属性）的默认 "),t("code",{pre:!0},[s._v("[[Put]]")]),s._v(" 和 "),t("code",{pre:!0},[s._v("[[Get]]")]),s._v(" 操作是可能的。这超出了我们要在这本书中讨论的范围，但我们会在后面的“你不懂 JS”系列中涵盖此内容。")]),t("p",[s._v("ES5 引入了一个方法来覆盖这些默认操作的一部分，但不是在对象级别而是针对每个属性，就是通过 getters 和 setters。Getter 是实际上调用一个隐藏函数来取得值的属性。Setter 是实际上调用一个隐藏函数来设置值的属性。")]),t("p",[s._v("当你将一个属性定义为拥有 getter 或 setter 或两者兼备，那么它的定义就成为了“访问器描述符”（与“数据描述符”相对）。对于访问器描述符，它的 "),t("code",{pre:!0},[s._v("value")]),s._v(" 和 "),t("code",{pre:!0},[s._v("writable")]),s._v(" 性质因没有意义而被忽略，取而代之的是 JS 将会考虑属性的 "),t("code",{pre:!0},[s._v("set")]),s._v(" 和 "),t("code",{pre:!0},[s._v("get")]),s._v(" 性质（还有 "),t("code",{pre:!0},[s._v("configurable")]),s._v(" 和 "),t("code",{pre:!0},[s._v("enumerable")]),s._v("）。")]),t("p",[s._v("考虑下面的代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 为 `a` 定义一个 getter")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("a")]),s._v("() {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\t}\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("(\n\tmyObject,\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 目标对象")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"b"')]),s._v(",\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 属性名")]),s._v("\n\t{\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 描述符")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 为 `b` 定义 getter")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("get")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("){ "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" * "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" },\n\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 确保 `b` 作为对象属性出现")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n\t}\n);\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4")]),s._v("\n")])]),t("p",[s._v("不管是通过在字面对象语法中使用 "),t("code",{pre:!0},[s._v("get a() { .. }")]),s._v("，还是通过使用 "),t("code",{pre:!0},[s._v("defineProperty(..)")]),s._v(" 明确定义，我们都在对象上创建了一个没有实际持有值的属性，访问它们将会自动地对 getter 函数进行隐藏的函数调用，其返回的任何值就是属性访问的结果。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 为 `a` 定义 getter")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("a")]),s._v("() {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\t}\n};\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("因为我们仅为 "),t("code",{pre:!0},[s._v("a")]),s._v(" 定义了一个 getter，如果之后我们试着设置 "),t("code",{pre:!0},[s._v("a")]),s._v(" 的值，赋值操作并不会抛出错误而是无声地将赋值废弃。就算这里有一个合法的 setter，我们的自定义 getter 将返回值硬编码为仅返回 "),t("code",{pre:!0},[s._v("2")]),s._v("，所以赋值操作是没有意义的。")]),t("p",[s._v("为了使这个场景更合理，正如你可能期望的那样，每个属性还应当被定义一个覆盖默认 "),t("code",{pre:!0},[s._v("[[Put]]")]),s._v(" 操作（也就是赋值）的 setter。几乎可确定，你将总是想要同时声明 getter 和 setter（仅有它们中的一个经常会导致意外的行为）：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 为 `a` 定义 getter")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("a")]),s._v("() {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("_a_")]),s._v(";\n\t},\n\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 为 `a` 定义 setter")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("a")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("val")]),s._v(") {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("_a_")]),s._v(" = val * "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\t}\n};\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4")]),s._v("\n")])]),t("p",[t("strong",[s._v("注意：")]),s._v(" 在这个例子中，我们实际上将赋值操作（"),t("code",{pre:!0},[s._v("[[Put]]")]),s._v(" 操作）指定的值 "),t("code",{pre:!0},[s._v("2")]),s._v(" 存储到了另一个变量 "),t("code",{pre:!0},[s._v("_a_")]),s._v(" 中。"),t("code",{pre:!0},[s._v("_a_")]),s._v(" 这个名称只是用在这个例子中的单纯惯例，并不意味着它的行为有什么特别之处 —— 它和其他普通属性没有区别。")]),t("h3",[s._v("存在性（Existence）")]),t("p",[s._v("我们早先看到，像 "),t("code",{pre:!0},[s._v("myObject.a")]),s._v(" 这样的属性访问可能会得到一个 "),t("code",{pre:!0},[s._v("undefined")]),s._v(" 值，无论是它明确存储着 "),t("code",{pre:!0},[s._v("undefined")]),s._v(" 还是属性 "),t("code",{pre:!0},[s._v("a")]),s._v(" 根本就不存在。那么，如果这两种情况的值相同，我们还怎么区别它们呢？")]),t("p",[s._v("我们可以查询一个对象是否拥有特定的属性，而 "),t("em",[s._v("不必")]),s._v(" 取得那个属性的值：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\n("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" myObject);\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"b"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" myObject);\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("hasOwnProperty")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(" );\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("hasOwnProperty")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"b"')]),s._v(" );\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),t("p",[t("code",{pre:!0},[s._v("in")]),s._v(" 操作符会检查属性是否存在于对象 "),t("em",[s._v("中")]),s._v("，或者是否存在于 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" 链对象遍历的更高层中（详见第五章）。相比之下，"),t("code",{pre:!0},[s._v("hasOwnProperty(..)")]),s._v(" "),t("em",[s._v("仅仅")]),s._v(" 检查 "),t("code",{pre:!0},[s._v("myObject")]),s._v(" 是否拥有属性，但 "),t("em",[s._v("不会")]),s._v(" 查询 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" 链。我们会在第五章详细讲解 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" 时，回来讨论这个两个操作重要的不同。")]),t("p",[s._v("通过委托到 "),t("code",{pre:!0},[s._v("Object.prototype")]),s._v("，所有的普通对象都可以访问 "),t("code",{pre:!0},[s._v("hasOwnProperty(..)")]),s._v("（详见第五章）。但是创建一个不链接到 "),t("code",{pre:!0},[s._v("Object.prototype")]),s._v(" 的对象也是可能的（通过 "),t("code",{pre:!0},[s._v("Object.create(null)")]),s._v(" —— 详见第五章）。这种情况下，像 "),t("code",{pre:!0},[s._v("myObject.hasOwnProperty(..)")]),s._v(" 这样的方法调用将会失败。")]),t("p",[s._v("在这种场景下，一个进行这种检查的更健壮的方式是 "),t("code",{pre:!0},[s._v('Object.prototype.hasOwnProperty.call(myObject,"a")')]),s._v("，它借用基本的 "),t("code",{pre:!0},[s._v("hasOwnProperty(..)")]),s._v(" 方法而且使用 "),t("em",[s._v("明确的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定")]),s._v("（详见第二章）来对我们的 "),t("code",{pre:!0},[s._v("myObject")]),s._v(" 实施这个方法。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" "),t("code",{pre:!0},[s._v("in")]),s._v(" 操作符看起来像是要检查一个值在容器中的存在性，但是它实际上检查的是属性名的存在性。在使用数组时注意这个区别十分重要，因为我们会有很强的冲动来进行 "),t("code",{pre:!0},[s._v("4 in [2, 4, 6]")]),s._v(" 这样的检查，但是这总是不像我们想象的那样工作。")]),t("h4",[s._v("枚举（Enumeration）")]),t("p",[s._v("先前，在学习 "),t("code",{pre:!0},[s._v("enumerable")]),s._v(' 属性描述符性质时，我们简单地解释了"可枚举性（enumerability）"的含义。现在，让我们来更加详细地重新讲解它。')]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = { };\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("(\n\tmyObject,\n\t"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使 `a` 可枚举，如一般情况")]),s._v("\n\t{ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" }\n);\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("(\n\tmyObject,\n\t"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"b"')]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使 `b` 不可枚举")]),s._v("\n\t{ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" }\n);\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"b"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" myObject); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("hasOwnProperty")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"b"')]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// .......")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" myObject) {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( k, myObject[k] );\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "a" 2')]),s._v("\n")])]),t("p",[s._v("你会注意到，"),t("code",{pre:!0},[s._v("myObject.b")]),s._v(" 实际上 "),t("strong",[s._v("存在")]),s._v("，而且拥有可以访问的值，但是它不出现在 "),t("code",{pre:!0},[s._v("for..in")]),s._v(" 循环中（然而令人诧异的是，它的 "),t("code",{pre:!0},[s._v("in")]),s._v(" 操作符的存在性检查通过了）。这是因为 “enumerable” 基本上意味着“如果对象的属性被迭代时会被包含在内”。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" 将 "),t("code",{pre:!0},[s._v("for..in")]),s._v(" 循环实施在数组上可能会给出意外的结果，因为枚举一个数组将不仅包含所有的数字下标，还包含所有的可枚举属性。所以一个好主意是：将 "),t("code",{pre:!0},[s._v("for..in")]),s._v(" 循环 "),t("em",[s._v("仅")]),s._v(" 用于对象，而为存储在数组中的值使用传统的 "),t("code",{pre:!0},[s._v("for")]),s._v(" 循环并用数字索引迭代。")]),t("p",[s._v("另一个可以区分可枚举和不可枚举属性的方法是：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = { };\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("(\n\tmyObject,\n\t"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使 `a` 可枚举，如一般情况")]),s._v("\n\t{ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" }\n);\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("(\n\tmyObject,\n\t"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"b"')]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使 `b` 不可枚举")]),s._v("\n\t{ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" }\n);\n\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("propertyIsEnumerable")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\nmyObject."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("propertyIsEnumerable")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"b"')]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("keys")]),s._v("( myObject ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["a"]')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getOwnPropertyNames")]),s._v("( myObject ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["a", "b"]')]),s._v("\n")])]),t("p",[t("code",{pre:!0},[s._v("propertyIsEnumerable(..)")]),s._v(" 测试一个给定的属性名是否直 "),t("em",[s._v("接存")]),s._v(" 在于对象上，并且是 "),t("code",{pre:!0},[s._v("enumerable:true")]),s._v("。")]),t("p",[t("code",{pre:!0},[s._v("Object.keys(..)")]),s._v(" 返回一个所有可枚举属性的数组，而 "),t("code",{pre:!0},[s._v("Object.getOwnPropertyNames(..)")]),s._v(" 返回一个 "),t("em",[s._v("所有")]),s._v(" 属性的数组，不论能不能枚举。")]),t("p",[t("code",{pre:!0},[s._v("in")]),s._v(" 和 "),t("code",{pre:!0},[s._v("hasOwnProperty(..)")]),s._v(" 区别于它们是否查询 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" 链，而 "),t("code",{pre:!0},[s._v("Object.keys(..)")]),s._v(" 和 "),t("code",{pre:!0},[s._v("Object.getOwnPropertyNames(..)")]),s._v(" 都 "),t("em",[s._v("只")]),s._v(" 考察直接给定的对象。")]),t("p",[s._v("（当下）没有与 "),t("code",{pre:!0},[s._v("in")]),s._v(" 操作符的查询方式（在整个 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" 链上遍历所有的属性，如我们在第五章解释的）等价的、内建的方法可以得到一个 "),t("strong",[s._v("所有属性")]),s._v(" 的列表。你可以近似地模拟一个这样的工具：递归地遍历一个对象的 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" 链，在每一层都从 "),t("code",{pre:!0},[s._v("Object.keys(..)")]),s._v(" 中取得一个列表——仅包含可枚举属性。")]),t("h2",[s._v("迭代（Iteration）")]),t("p",[t("code",{pre:!0},[s._v("for..in")]),s._v(" 循环迭代一个对象上（包括它的 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" 链）所有的可迭代属性。但如果你想要迭代值呢？")]),t("p",[s._v("在数字索引的数组中，典型的迭代所有的值的办法是使用标准的 "),t("code",{pre:!0},[s._v("for")]),s._v(" 循环，比如：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myArray = ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < myArray."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v("; i++) {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( myArray[i] );\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1 2 3")]),s._v("\n")])]),t("p",[s._v("但是这并没有迭代所有的值，而是迭代了所有的下标，然后由你使用索引来引用值，比如 "),t("code",{pre:!0},[s._v("myArray[i]")]),s._v("。")]),t("p",[s._v("ES5 还为数组加入了几个迭代帮助方法，包括 "),t("code",{pre:!0},[s._v("forEach(..)")]),s._v("、"),t("code",{pre:!0},[s._v("every(..)")]),s._v("、和 "),t("code",{pre:!0},[s._v("some(..)")]),s._v("。这些帮助方法的每一个都接收一个回调函数，这个函数将施用于数组中的每一个元素，仅在如何响应回调的返回值上有所不同。")]),t("p",[t("code",{pre:!0},[s._v("forEach(..)")]),s._v(" 将会迭代数组中所有的值，并且忽略回调的返回值。"),t("code",{pre:!0},[s._v("every(..)")]),s._v(" 会一直迭代到最后，"),t("em",[s._v("或者")]),s._v(" 当回调返回一个 "),t("code",{pre:!0},[s._v("false")]),s._v("（或“falsy”）值，而 "),t("code",{pre:!0},[s._v("some(..)")]),s._v(" 会一直迭代到最后，"),t("em",[s._v("或者")]),s._v(" 当回调返回一个 "),t("code",{pre:!0},[s._v("true")]),s._v("（或“truthy”）值。")]),t("p",[s._v("这些在 "),t("code",{pre:!0},[s._v("every(..)")]),s._v(" 和 "),t("code",{pre:!0},[s._v("some(..)")]),s._v(" 内部的特殊返回值有些像普通 "),t("code",{pre:!0},[s._v("for")]),s._v(" 循环中的 "),t("code",{pre:!0},[s._v("break")]),s._v(" 语句，它们可以在迭代执行到末尾之前将它结束掉。")]),t("p",[s._v("如果你使用 "),t("code",{pre:!0},[s._v("for..in")]),s._v(" 循环在一个对象上进行迭代，你也只能间接地得到值，因为它实际上仅仅迭代对象的所有可枚举属性，让你自己手动地去访问属性来得到值。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" 与以有序数字的方式（"),t("code",{pre:!0},[s._v("for")]),s._v(" 循环或其他迭代器）迭代数组的下标比较起来，迭代对象属性的顺序是 "),t("strong",[s._v("不确定")]),s._v(" 的，而且可能会因 JS 引擎的不同而不同。对于需要跨平台环境保持一致的问题，"),t("strong",[s._v("不要依赖")]),s._v(" 观察到的顺序，因为这个顺序是不可靠的。")]),t("p",[s._v("但是如果你想直接迭代值，而不是数组下标（或对象属性）呢？ES6 加入了一个有用的 "),t("code",{pre:!0},[s._v("for..of")]),s._v(" 循环语法，用来迭代数组（和对象，如果这个对象有定义的迭代器）：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myArray = [ "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ];\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" myArray) {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( v );\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])]),t("p",[t("code",{pre:!0},[s._v("for..of")]),s._v(" 循环要求被迭代的 "),t("em",[s._v("东西")]),s._v(" 提供一个迭代器对象（从一个在语言规范中叫做 "),t("code",{pre:!0},[s._v("@@iterator")]),s._v(" 的默认内部函数那里得到），每次循环都调用一次这个迭代器对象的 "),t("code",{pre:!0},[s._v("next()")]),s._v(" 方法，循环迭代的内容就是这些连续的返回值。")]),t("p",[s._v("数组拥有内建的 "),t("code",{pre:!0},[s._v("@@iterator")]),s._v("，所以正如展示的那样，"),t("code",{pre:!0},[s._v("for..of")]),s._v(" 对于它们很容易使用。但是让我们使用内建的 "),t("code",{pre:!0},[s._v("@@iterator")]),s._v(" 来手动迭代一个数组，来看看它是怎么工作的：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myArray = [ "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ];\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" it = myArray["),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Symbol")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("iterator")]),s._v("]();\n\nit."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("next")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value:1, done:false }")]),s._v("\nit."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("next")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value:2, done:false }")]),s._v("\nit."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("next")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value:3, done:false }")]),s._v("\nit."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("next")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { done:true }")]),s._v("\n")])]),t("p",[t("strong",[s._v("注意：")]),s._v(" 我们使用一个 ES6 的 "),t("code",{pre:!0},[s._v("Symbol")]),s._v("："),t("code",{pre:!0},[s._v("Symbol.iterator")]),s._v(" 来取得一个对象的 "),t("code",{pre:!0},[s._v("@@iterator")]),s._v(" "),t("em",[s._v("内部属性")]),s._v("。我们在本章中简单地提到过 "),t("code",{pre:!0},[s._v("Symbol")]),s._v(" 的语义（见“计算型属性名”），同样的原理也适用于这里。你总是希望通过 "),t("code",{pre:!0},[s._v("Symbol")]),s._v(" 名称，而不是它可能持有的特殊的值，来引用这样特殊的属性。另外，尽管这个名称有这样的暗示，但 "),t("code",{pre:!0},[s._v("@@iterator")]),s._v(" 本身 "),t("strong",[s._v("不是迭代器对象")]),s._v("， 而是一个返回迭代器对象的 "),t("strong",[s._v("方法")]),s._v(" —— 一个重要的细节！")]),t("p",[s._v("正如上面的代码段揭示的，迭代器的 "),t("code",{pre:!0},[s._v("next()")]),s._v(" 调用的返回值是一个 "),t("code",{pre:!0},[s._v("{ value: .. , done: .. }")]),s._v(" 形式的对象，其中 "),t("code",{pre:!0},[s._v("value")]),s._v(" 是当前迭代的值，而 "),t("code",{pre:!0},[s._v("done")]),s._v(" 是一个 "),t("code",{pre:!0},[s._v("boolean")]),s._v("，表示是否还有更多内容可以迭代。")]),t("p",[s._v("注意值 "),t("code",{pre:!0},[s._v("3")]),s._v(" 和 "),t("code",{pre:!0},[s._v("done:false")]),s._v(" 一起返回，猛地一看会有些奇怪。你不得不第四次调用 "),t("code",{pre:!0},[s._v("next()")]),s._v("（在前一个代码段的 "),t("code",{pre:!0},[s._v("for..of")]),s._v(" 循环会自动这样做）来得到 "),t("code",{pre:!0},[s._v("done:true")]),s._v("，以使自己知道迭代已经完成。这个怪异之处的原因超出了我们要在这里讨论的范围，但是它源自于 ES6 生成器（generator）函数的语义。")]),t("p",[s._v("虽然数组可以在 "),t("code",{pre:!0},[s._v("for..of")]),s._v(" 循环中自动迭代，但普通的对象 "),t("strong",[s._v("没有内建的 "),t("code",{pre:!0},[s._v("@@iterator")])]),s._v("。这种故意省略的原因要比我们将在这里解释的更复杂，但一般来说，为了未来的对象类型，最好不要加入那些可能最终被证明是麻烦的实现。")]),t("p",[s._v("但是 "),t("em",[s._v("可以")]),s._v(" 为你想要迭代的对象定义你自己的默认 "),t("code",{pre:!0},[s._v("@@iterator")]),s._v("。比如：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("defineProperty")]),s._v("( myObject, "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Symbol")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("iterator")]),s._v(", {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("writable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" o = "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(";\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" idx = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" ks = "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("keys")]),s._v("( o );\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": o[ks[idx++]],\n\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": (idx > ks."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(")\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n} );\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 手动迭代 `myObject`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" it = myObject["),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Symbol")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("iterator")]),s._v("]();\nit."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("next")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value:2, done:false }")]),s._v("\nit."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("next")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value:3, done:false }")]),s._v("\nit."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("next")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value:undefined, done:true }")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 用 `for..of` 迭代 `myObject`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" myObject) {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( v );\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])]),t("p",[t("strong",[s._v("注意：")]),s._v(" 我们使用了 "),t("code",{pre:!0},[s._v("Object.defineProperty(..)")]),s._v(" 来自定义我们的 "),t("code",{pre:!0},[s._v("@@iterator")]),s._v("（很大程度上是因为我们可以将它指定为不可枚举的），但是通过将 "),t("code",{pre:!0},[s._v("Symbol")]),s._v(" 作为一个 "),t("em",[s._v("计算型属性名")]),s._v("（在本章前面的部分讨论过），我们也可以直接声明它，比如 "),t("code",{pre:!0},[s._v("var myObject = { a:2, b:3, [Symbol.iterator]: function(){ /* .. */ } }")]),s._v("。")]),t("p",[s._v("每次 "),t("code",{pre:!0},[s._v("for..of")]),s._v(" 循环在 "),t("code",{pre:!0},[s._v("myObject")]),s._v(" 的迭代器对象上调用 "),t("code",{pre:!0},[s._v("next()")]),s._v(" 时，迭代器内部的指针将会向前移动并返回对象属性列表的下一个值（关于对象属性/值迭代顺序，参照前面的注意事项）。")]),t("p",[s._v("我们刚刚演示的迭代，是一个简单的一个值一个值的迭代，当然你可以为你的自定义数据结构定义任意复杂的迭代方法，只要你觉得合适。对于操作用户自定义对象来说，自定义迭代器与 ES6 的 "),t("code",{pre:!0},[s._v("for..of")]),s._v(" 循环相组合，是一个新的强大的语法工具。")]),t("p",[s._v("举个例子，一个 "),t("code",{pre:!0},[s._v("Pixel（像素）")]),s._v(" 对象列表（拥有 "),t("code",{pre:!0},[s._v("x")]),s._v(" 和 "),t("code",{pre:!0},[s._v("y")]),s._v(" 的坐标值）可以根据距离原点 "),t("code",{pre:!0},[s._v("(0,0)")]),s._v(" 的直线距离决定它的迭代顺序，或者过滤掉那些“太远”的点，等等。只要你的迭代器从 "),t("code",{pre:!0},[s._v("next()")]),s._v(" 调用返回期望的 "),t("code",{pre:!0},[s._v("{ value: .. }")]),s._v(" 返回值，并在迭代结束后返回一个 "),t("code",{pre:!0},[s._v("{ done: true }")]),s._v(" 值，ES6 的 "),t("code",{pre:!0},[s._v("for..of")]),s._v(" 循环就可以迭代它。")]),t("p",[s._v("其实，你甚至可以生成一个永远不会“结束”，并且总会返回一个新值（比如随机数，递增值，唯一的识别符等等）的“无穷”迭代器，虽然你可能不会将这样的迭代器用于一个没有边界的 "),t("code",{pre:!0},[s._v("for..of")]),s._v(" 循环，因为它永远不会结束，而且会阻塞你的程序。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" randoms = {\n\t["),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Symbol")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("iterator")]),s._v("]: "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Math")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("random")]),s._v("() };\n\t\t\t}\n\t\t};\n\t}\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" randoms_pool = [];\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" randoms) {\n\trandoms_pool."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("( n );\n\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不要超过边界！")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (randoms_pool."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v(";\n}\n")])]),t("p",[s._v("这个迭代器会“永远”生成随机数，所以我们小心地仅从中取出 100 个值，以使我们的程序不被阻塞。")]),t("h2",[s._v("复习")]),t("p",[s._v("JS 中的对象拥有字面形式（比如 "),t("code",{pre:!0},[s._v("var a = { .. }")]),s._v("）和构造形式（比如 "),t("code",{pre:!0},[s._v("var a = new Array(..)")]),s._v("）。字面形式几乎总是首选，但在某些情况下，构造形式提供更多的构建选项。")]),t("p",[s._v("许多人声称“Javascript 中的一切都是对象”，这是不对的。对象是六种（或七中，看你从哪个方面说）基本类型之一。对象有子类型，包括 "),t("code",{pre:!0},[s._v("function")]),s._v("，还可以被行为特化，比如 "),t("code",{pre:!0},[s._v("[object Array]")]),s._v(" 作为内部的标签表示子类型数组。")]),t("p",[s._v("对象是键/值对的集合。通过 "),t("code",{pre:!0},[s._v(".propName")]),s._v(" 或 "),t("code",{pre:!0},[s._v('["propName"]')]),s._v(" 语法，值可以作为属性访问。不管属性什么时候被访问，引擎实际上会调用内部默认的 "),t("code",{pre:!0},[s._v("[[Get]]")]),s._v(" 操作（在设置值时调用 "),t("code",{pre:!0},[s._v("[[Put]]")]),s._v(" 操作），它不仅直接在对象上查找属性，在没有找到时还会遍历 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" 链（见第五章）。")]),t("p",[s._v("属性有一些可以通过属性描述符控制的特定性质，比如 "),t("code",{pre:!0},[s._v("writable")]),s._v(" 和 "),t("code",{pre:!0},[s._v("configurable")]),s._v("。另外，对象拥有它的不可变性（它们的属性也有），可以通过使用 "),t("code",{pre:!0},[s._v("Object.preventExtensions(..)")]),s._v("、"),t("code",{pre:!0},[s._v("Object.seal(..)")]),s._v("、和 "),t("code",{pre:!0},[s._v("Object.freeze(..)")]),s._v(" 来控制几种不同等级的不可变性。")]),t("p",[s._v("属性不必非要包含值 —— 它们也可以是带有 getter/setter 的“访问器属性”。它们也可以是可枚举或不可枚举的，这控制它们是否会在 "),t("code",{pre:!0},[s._v("for..in")]),s._v(" 这样的循环迭代中出现。")]),t("p",[s._v("你也可以使用 ES6 的 "),t("code",{pre:!0},[s._v("for..of")]),s._v(" 语法，在数据结构（数组，对象等）中迭代 "),t("strong",[s._v("值")]),s._v("，它寻找一个内建或自定义的 "),t("code",{pre:!0},[s._v("@@iterator")]),s._v(" 对象，这个对象由一个 "),t("code",{pre:!0},[s._v("next()")]),s._v(" 方法组成，通过这个 "),t("code",{pre:!0},[s._v("next()")]),s._v(" 方法每次迭代一个数据。")])])])])}],!1,null,null,null);e.default=a.exports}}]);