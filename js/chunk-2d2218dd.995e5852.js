(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d2218dd"],{cb9a:function(s,a,r){"use strict";r.r(a);var e=r("2877"),t=Object(e.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,a=s.$createElement,r=s._self._c||a;return r("section",[r("html",[r("head"),r("body",[r("h1",[s._v("对象的扩展")]),r("p",[s._v("对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍"),r("code",{pre:!0},[s._v("Object")]),s._v("对象的新增方法。")]),r("h2",[s._v("属性的简洁表示法")]),r("p",[s._v("ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" foo = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bar'")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" baz = {foo};\nbaz "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// {foo: "bar"}')]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" baz = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo};\n")])]),r("p",[s._v("上面代码中，变量"),r("code",{pre:!0},[s._v("foo")]),s._v("直接写在大括号里面。这时，属性名就是变量名, 属性值就是变量值。下面是另一个例子。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y")]),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {x, y};\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y")]),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": x, "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": y};\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(") "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {x: 1, y: 2}")]),s._v("\n")])]),r("p",[s._v("除了属性简写，方法也可以简写。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" o = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("method")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Hello!"')]),s._v(";\n  }\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" o = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("method")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Hello!"')]),s._v(";\n  }\n};\n")])]),r("p",[s._v("下面是一个实际的例子。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" birth = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'2000/01/01'")]),s._v(";\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Person")]),s._v(" = {\n\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'张三'")]),s._v(",\n\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//等同于birth: birth")]),s._v("\n  birth,\n\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于hello: function ()...")]),s._v("\n  "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("hello")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") { "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'我的名字是'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v("); }\n\n};\n")])]),r("p",[s._v("这种写法用于函数的返回值，将会非常方便。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getPoint")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" y = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(";\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {x, y};\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getPoint")]),s._v("()\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// {x:1, y:10}")]),s._v("\n")])]),r("p",[s._v("CommonJS 模块输出一组变量，就非常合适使用简洁写法。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" ms = {};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getItem")]),s._v(" (key) {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" key "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" ms ? ms[key] : "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("setItem")]),s._v(" (key, value) {\n  ms[key] = value;\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("clear")]),s._v(" () {\n  ms = {};\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("module")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("exports")]),s._v(" = { getItem, setItem, clear };\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("module")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("exports")]),s._v(" = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("getItem")]),s._v(": getItem,\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("setItem")]),s._v(": setItem,\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("clear")]),s._v(": clear\n};\n")])]),r("p",[s._v("属性的赋值器（setter）和取值器（getter），事实上也是采用这种写法。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" cart = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_wheels")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(",\n\n  get wheels () {\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("_wheels")]),s._v(";\n  },\n\n  set wheels (value) {\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (value < "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("_wheels")]),s._v(") {\n      "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Error")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'数值太小了！'")]),s._v(");\n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("_wheels")]),s._v(" = value;\n  }\n}\n")])]),r("p",[s._v("简洁写法在打印对象时也很有用。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" user = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'test'")]),s._v("\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" foo = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'baz'")]),s._v("\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(user, foo)\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// {name: "test"} {bar: "baz"}')]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("({user, foo})\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// {user: {name: "test"}, foo: {bar: "baz"}}')]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("console.log")]),s._v("直接输出"),r("code",{pre:!0},[s._v("user")]),s._v("和"),r("code",{pre:!0},[s._v("foo")]),s._v("两个对象时，就是两组键值对，可能会混淆。把它们放在大括号里面输出，就变成了对象的简洁表示法，每组键值对前面会打印对象名，这样就比较清晰了。")]),r("p",[s._v("注意，简写的对象方法不能用作构造函数，会报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bar'")]),s._v(";\n  }\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" obj."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("() "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("f")]),s._v("是一个简写的对象方法，所以"),r("code",{pre:!0},[s._v("obj.f")]),s._v("不能当作构造函数使用。")]),r("h2",[s._v("属性名表达式")]),r("p",[s._v("JavaScript 定义对象的属性，有两种方法。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 方法一")]),s._v("\nobj."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 方法二")]),s._v("\nobj["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bc'")]),s._v("] = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("123")]),s._v(";\n")])]),r("p",[s._v("上面代码的方法一是直接用标识符作为属性名，方法二是用表达式作为属性名，这时要将表达式放在方括号之内。")]),r("p",[s._v("但是，如果使用字面量方式定义对象（使用大括号），在 ES5 中只能使用方法一（标识符）定义属性。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("abc")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("123")]),s._v("\n};\n")])]),r("p",[s._v("ES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" propKey = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(";\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = {\n  [propKey]: "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  ["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bc'")]),s._v("]: "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("123")]),s._v("\n};\n")])]),r("p",[s._v("下面是另一个例子。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" lastWord = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'last word'")]),s._v(";\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" a = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'first word'")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v(",\n  [lastWord]: "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'world'")]),s._v("\n};\n\na["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'first word'")]),s._v("] "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "hello"')]),s._v("\na[lastWord] "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "world"')]),s._v("\na["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'last word'")]),s._v("] "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "world"')]),s._v("\n")])]),r("p",[s._v("表达式还可以用于定义方法名。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = {\n  ["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'h'")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'ello'")]),s._v("]() {\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hi'")]),s._v(";\n  }\n};\n\nobj."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("hello")]),s._v("() "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// hi")]),s._v("\n")])]),r("p",[s._v("注意，属性名表达式与简洁表示法，不能同时使用，会报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" foo = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bar'")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" bar = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'abc'")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" baz = { [foo] };\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" foo = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bar'")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" baz = { [foo]: "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'abc'")]),s._v("};\n")])]),r("p",[s._v("注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串"),r("code",{pre:!0},[s._v("[object Object]")]),s._v("，这一点要特别小心。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" keyA = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("};\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" keyB = {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" myObject = {\n  [keyA]: "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'valueA'")]),s._v(",\n  [keyB]: "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'valueB'")]),s._v("\n};\n\nmyObject "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// Object {[object Object]: "valueB"}')]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("[keyA]")]),s._v("和"),r("code",{pre:!0},[s._v("[keyB]")]),s._v("得到的都是"),r("code",{pre:!0},[s._v("[object Object]")]),s._v("，所以"),r("code",{pre:!0},[s._v("[keyB]")]),s._v("会把"),r("code",{pre:!0},[s._v("[keyA]")]),s._v("覆盖掉，而"),r("code",{pre:!0},[s._v("myObject")]),s._v("最后只有一个"),r("code",{pre:!0},[s._v("[object Object]")]),s._v("属性。")]),r("h2",[s._v("方法的 name 属性")]),r("p",[s._v("函数的"),r("code",{pre:!0},[s._v("name")]),s._v("属性，返回函数名。对象方法也是函数，因此也有"),r("code",{pre:!0},[s._v("name")]),s._v("属性。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" person = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sayName")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello!'")]),s._v(");\n  },\n};\n\nperson."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("sayName")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v("   "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "sayName"')]),s._v("\n")])]),r("p",[s._v("上面代码中，方法的"),r("code",{pre:!0},[s._v("name")]),s._v("属性返回函数名（即方法名）。")]),r("p",[s._v("如果对象的方法使用了取值函数（"),r("code",{pre:!0},[s._v("getter")]),s._v("）和存值函数（"),r("code",{pre:!0},[s._v("setter")]),s._v("），则"),r("code",{pre:!0},[s._v("name")]),s._v("属性不是在该方法上面，而是该方法的属性的描述对象的"),r("code",{pre:!0},[s._v("get")]),s._v("和"),r("code",{pre:!0},[s._v("set")]),s._v("属性上面，返回值是方法名前加上"),r("code",{pre:!0},[s._v("get")]),s._v("和"),r("code",{pre:!0},[s._v("set")]),s._v("。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("get")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() {},\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("set")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v(") {}\n};\n\nobj."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError: Cannot read property 'name' of undefined")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" descriptor = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getOwnPropertyDescriptor")]),s._v("(obj, "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(");\n\ndescriptor."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("get")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "get foo"')]),s._v("\ndescriptor."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("set")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "set foo"')]),s._v("\n")])]),r("p",[s._v("有两种特殊情况："),r("code",{pre:!0},[s._v("bind")]),s._v("方法创造的函数，"),r("code",{pre:!0},[s._v("name")]),s._v("属性返回"),r("code",{pre:!0},[s._v("bound")]),s._v("加上原函数的名字；"),r("code",{pre:!0},[s._v("Function")]),s._v("构造函数创造的函数，"),r("code",{pre:!0},[s._v("name")]),s._v("属性返回"),r("code",{pre:!0},[s._v("anonymous")]),s._v("。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Function")]),s._v("())."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "anonymous"')]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" doSomething = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n};\ndoSomething."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("()."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "bound doSomething"')]),s._v("\n")])]),r("p",[s._v("如果对象的方法是一个 Symbol 值，那么"),r("code",{pre:!0},[s._v("name")]),s._v("属性返回的是这个 Symbol 值的描述。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" key1 = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Symbol")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'description'")]),s._v(");\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" key2 = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Symbol")]),s._v("();\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = {\n  [key1]() {},\n  [key2]() {},\n};\nobj[key1]."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "[description]"')]),s._v("\nobj[key2]."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ""')]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("key1")]),s._v("对应的 Symbol 值有描述，"),r("code",{pre:!0},[s._v("key2")]),s._v("没有。")]),r("h2",[s._v("属性的可枚举性和遍历")]),r("h3",[s._v("可枚举性")]),r("p",[s._v("对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。"),r("code",{pre:!0},[s._v("Object.getOwnPropertyDescriptor")]),s._v("方法可以获取该属性的描述对象。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("123")]),s._v(" };\n"),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getOwnPropertyDescriptor")]),s._v("(obj, "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(")\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//  {")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    value: 123,")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    writable: true,")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    enumerable: true,")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    configurable: true")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//  }")]),s._v("\n")])]),r("p",[s._v("描述对象的"),r("code",{pre:!0},[s._v("enumerable")]),s._v("属性，称为“可枚举性”，如果该属性为"),r("code",{pre:!0},[s._v("false")]),s._v("，就表示某些操作会忽略当前属性。")]),r("p",[s._v("目前，有四个操作会忽略"),r("code",{pre:!0},[s._v("enumerable")]),s._v("为"),r("code",{pre:!0},[s._v("false")]),s._v("的属性。")]),r("ul",[r("li",[r("code",{pre:!0},[s._v("for...in")]),s._v("循环：只遍历对象自身的和继承的可枚举的属性。")]),r("li",[r("code",{pre:!0},[s._v("Object.keys()")]),s._v("：返回对象自身的所有可枚举的属性的键名。")]),r("li",[r("code",{pre:!0},[s._v("JSON.stringify()")]),s._v("：只串行化对象自身的可枚举的属性。")]),r("li",[r("code",{pre:!0},[s._v("Object.assign()")]),s._v("： 忽略"),r("code",{pre:!0},[s._v("enumerable")]),s._v("为"),r("code",{pre:!0},[s._v("false")]),s._v("的属性，只拷贝对象自身的可枚举的属性。")])]),r("p",[s._v("这四个操作之中，前三个是 ES5 就有的，最后一个"),r("code",{pre:!0},[s._v("Object.assign()")]),s._v("是 ES6 新增的。其中，只有"),r("code",{pre:!0},[s._v("for...in")]),s._v("会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性。实际上，引入“可枚举”（"),r("code",{pre:!0},[s._v("enumerable")]),s._v("）这个概念的最初目的，就是让某些属性可以规避掉"),r("code",{pre:!0},[s._v("for...in")]),s._v("操作，不然所有内部属性和方法都会被遍历到。比如，对象原型的"),r("code",{pre:!0},[s._v("toString")]),s._v("方法，以及数组的"),r("code",{pre:!0},[s._v("length")]),s._v("属性，就通过“可枚举性”，从而避免被"),r("code",{pre:!0},[s._v("for...in")]),s._v("遍历到。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getOwnPropertyDescriptor")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'toString'")]),s._v(")."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("enumerable")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getOwnPropertyDescriptor")]),s._v("([], "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'length'")]),s._v(")."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("enumerable")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("toString")]),s._v("和"),r("code",{pre:!0},[s._v("length")]),s._v("属性的"),r("code",{pre:!0},[s._v("enumerable")]),s._v("都是"),r("code",{pre:!0},[s._v("false")]),s._v("，因此"),r("code",{pre:!0},[s._v("for...in")]),s._v("不会遍历到这两个继承自原型的属性。")]),r("p",[s._v("另外，ES6 规定，所有 Class 的原型的方法都是不可枚举的。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getOwnPropertyDescriptor")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" {"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {}}."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(")."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("enumerable")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),r("p",[s._v("总的来说，操作中引入继承的属性会让问题复杂化，大多数时候，我们只关心对象自身的属性。所以，尽量不要用"),r("code",{pre:!0},[s._v("for...in")]),s._v("循环，而用"),r("code",{pre:!0},[s._v("Object.keys()")]),s._v("代替。")]),r("h3",[s._v("属性的遍历")]),r("p",[s._v("ES6 一共有 5 种方法可以遍历对象的属性。")]),r("p",[r("strong",[s._v("（1）for...in")])]),r("p",[r("code",{pre:!0},[s._v("for...in")]),s._v("循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。")]),r("p",[r("strong",[s._v("（2）Object.keys(obj)")])]),r("p",[r("code",{pre:!0},[s._v("Object.keys")]),s._v("返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。")]),r("p",[r("strong",[s._v("（3）Object.getOwnPropertyNames(obj)")])]),r("p",[r("code",{pre:!0},[s._v("Object.getOwnPropertyNames")]),s._v("返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。")]),r("p",[r("strong",[s._v("（4）Object.getOwnPropertySymbols(obj)")])]),r("p",[r("code",{pre:!0},[s._v("Object.getOwnPropertySymbols")]),s._v("返回一个数组，包含对象自身的所有 Symbol 属性的键名。")]),r("p",[r("strong",[s._v("（5）Reflect.ownKeys(obj)")])]),r("p",[r("code",{pre:!0},[s._v("Reflect.ownKeys")]),s._v("返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。")]),r("p",[s._v("以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。")]),r("ul",[r("li",[s._v("首先遍历所有数值键，按照数值升序排列。")]),r("li",[s._v("其次遍历所有字符串键，按照加入时间升序排列。")]),r("li",[s._v("最后遍历所有 Symbol 键，按照加入时间升序排列。")])]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Reflect")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("ownKeys")]),s._v("({ ["),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Symbol")]),s._v("()]:"),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(":"),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(":"),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(":"),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(":"),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" })\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['2', '10', 'b', 'a', Symbol()]")]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("Reflect.ownKeys")]),s._v("方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是这样的，首先是数值属性"),r("code",{pre:!0},[s._v("2")]),s._v("和"),r("code",{pre:!0},[s._v("10")]),s._v("，其次是字符串属性"),r("code",{pre:!0},[s._v("b")]),s._v("和"),r("code",{pre:!0},[s._v("a")]),s._v("，最后是 Symbol 属性。")]),r("h2",[s._v("super 关键字")]),r("p",[s._v("我们知道，"),r("code",{pre:!0},[s._v("this")]),s._v("关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字"),r("code",{pre:!0},[s._v("super")]),s._v("，指向当前对象的原型对象。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" proto = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v("\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'world'")]),s._v(",\n  "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("find")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("super")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(";\n  }\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("setPrototypeOf")]),s._v("(obj, proto);\nobj."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("find")]),s._v("() "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "hello"')]),s._v("\n")])]),r("p",[s._v("上面代码中，对象"),r("code",{pre:!0},[s._v("obj.find()")]),s._v("方法之中，通过"),r("code",{pre:!0},[s._v("super.foo")]),s._v("引用了原型对象"),r("code",{pre:!0},[s._v("proto")]),s._v("的"),r("code",{pre:!0},[s._v("foo")]),s._v("属性。")]),r("p",[s._v("注意，"),r("code",{pre:!0},[s._v("super")]),s._v("关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("super")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("super")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("super")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("\n  }\n}\n")])]),r("p",[s._v("上面三种"),r("code",{pre:!0},[s._v("super")]),s._v("的用法都会报错，因为对于 JavaScript 引擎来说，这里的"),r("code",{pre:!0},[s._v("super")]),s._v("都没有用在对象的方法之中。第一种写法是"),r("code",{pre:!0},[s._v("super")]),s._v("用在属性里面，第二种和第三种写法是"),r("code",{pre:!0},[s._v("super")]),s._v("用在一个函数里面，然后赋值给"),r("code",{pre:!0},[s._v("foo")]),s._v("属性。目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。")]),r("p",[s._v("JavaScript 引擎内部，"),r("code",{pre:!0},[s._v("super.foo")]),s._v("等同于"),r("code",{pre:!0},[s._v("Object.getPrototypeOf(this).foo")]),s._v("（属性）或"),r("code",{pre:!0},[s._v("Object.getPrototypeOf(this).foo.call(this)")]),s._v("（方法）。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" proto = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v(",\n  "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("x")]),s._v(");\n  },\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'world'")]),s._v(",\n  "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("super")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("();\n  }\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("setPrototypeOf")]),s._v("(obj, proto);\n\nobj."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "world"')]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("super.foo")]),s._v("指向原型对象"),r("code",{pre:!0},[s._v("proto")]),s._v("的"),r("code",{pre:!0},[s._v("foo")]),s._v("方法，但是绑定的"),r("code",{pre:!0},[s._v("this")]),s._v("却还是当前对象"),r("code",{pre:!0},[s._v("obj")]),s._v("，因此输出的就是"),r("code",{pre:!0},[s._v("world")]),s._v("。")]),r("h2",[s._v("对象的扩展运算符")]),r("p",[s._v("《数组的扩展》一章中，已经介绍过扩展运算符（"),r("code",{pre:!0},[s._v("...")]),s._v("）。ES2018 将这个运算符"),r("a",{attrs:{href:"https://github.com/sebmarkbage/ecmascript-rest-spread"}},[s._v("引入")]),s._v("了对象。")]),r("h3",[s._v("解构赋值")]),r("p",[s._v("对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { x, y, ...z } = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" };\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\ny "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nz "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { a: 3, b: 4 }")]),s._v("\n")])]),r("p",[s._v("上面代码中，变量"),r("code",{pre:!0},[s._v("z")]),s._v("是解构赋值所在的对象。它获取等号右边的所有尚未读取的键（"),r("code",{pre:!0},[s._v("a")]),s._v("和"),r("code",{pre:!0},[s._v("b")]),s._v("），将它们连同值一起拷贝过来。")]),r("p",[s._v("由于解构赋值要求等号右边是一个对象，所以如果等号右边是"),r("code",{pre:!0},[s._v("undefined")]),s._v("或"),r("code",{pre:!0},[s._v("null")]),s._v("，就会报错，因为它们无法转为对象。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { ...z } = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 运行时错误")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { ...z } = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 运行时错误")]),s._v("\n")])]),r("p",[s._v("解构赋值必须是最后一个参数，否则会报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { ...x, y, z } = someObject; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 句法错误")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { x, ...y, ...z } = someObject; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 句法错误")]),s._v("\n")])]),r("p",[s._v("上面代码中，解构赋值不是最后一个参数，所以会报错。")]),r("p",[s._v("注意，解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" } };\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { ...x } = obj;\nobj."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\nx."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("x")]),s._v("是解构赋值所在的对象，拷贝了对象"),r("code",{pre:!0},[s._v("obj")]),s._v("的"),r("code",{pre:!0},[s._v("a")]),s._v("属性。"),r("code",{pre:!0},[s._v("a")]),s._v("属性引用了一个对象，修改这个对象的值，会影响到解构赋值对它的引用。")]),r("p",[s._v("另外，扩展运算符的解构赋值，不能复制继承自原型对象的属性。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" o1 = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" };\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" o2 = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" };\no2."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("__proto__")]),s._v(" = o1;\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { ...o3 } = o2;\no3 "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { b: 2 }")]),s._v("\no3."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n")])]),r("p",[s._v("上面代码中，对象"),r("code",{pre:!0},[s._v("o3")]),s._v("复制了"),r("code",{pre:!0},[s._v("o2")]),s._v("，但是只复制了"),r("code",{pre:!0},[s._v("o2")]),s._v("自身的属性，没有复制它的原型对象"),r("code",{pre:!0},[s._v("o1")]),s._v("的属性。")]),r("p",[s._v("下面是另一个例子。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" o = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("create")]),s._v("({ "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" });\no."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("z")]),s._v(" = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { x, ...newObj } = o;\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { y, z } = newObj;\nx "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\ny "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\nz "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])]),r("p",[s._v("上面代码中，变量"),r("code",{pre:!0},[s._v("x")]),s._v("是单纯的解构赋值，所以可以读取对象"),r("code",{pre:!0},[s._v("o")]),s._v("继承的属性；变量"),r("code",{pre:!0},[s._v("y")]),s._v("和"),r("code",{pre:!0},[s._v("z")]),s._v("是扩展运算符的解构赋值，只能读取对象"),r("code",{pre:!0},[s._v("o")]),s._v("自身的属性，所以变量"),r("code",{pre:!0},[s._v("z")]),s._v("可以赋值成功，变量"),r("code",{pre:!0},[s._v("y")]),s._v("取不到值。ES6 规定，变量声明语句之中，如果使用解构赋值，扩展运算符后面必须是一个变量名，而不能是一个解构赋值表达式，所以上面代码引入了中间变量"),r("code",{pre:!0},[s._v("newObj")]),s._v("，如果写成下面这样会报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { x, ...{ y, z } } = o;\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// SyntaxError: ... must be followed by an identifier in declaration contexts")]),s._v("\n")])]),r("p",[s._v("解构赋值的一个用处，是扩展某个函数的参数，引入其他操作。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("baseFunction")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{ a, b }")]),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("wrapperFunction")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{ x, y, ...restConfig }")]),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使用 x 和 y 参数进行操作")]),s._v("\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 其余参数传给原始函数")]),s._v("\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("baseFunction")]),s._v("(restConfig);\n}\n")])]),r("p",[s._v("上面代码中，原始函数"),r("code",{pre:!0},[s._v("baseFunction")]),s._v("接受"),r("code",{pre:!0},[s._v("a")]),s._v("和"),r("code",{pre:!0},[s._v("b")]),s._v("作为参数，函数"),r("code",{pre:!0},[s._v("wrapperFunction")]),s._v("在"),r("code",{pre:!0},[s._v("baseFunction")]),s._v("的基础上进行了扩展，能够接受多余的参数，并且保留原始函数的行为。")]),r("h3",[s._v("扩展运算符")]),r("p",[s._v("对象的扩展运算符（"),r("code",{pre:!0},[s._v("...")]),s._v("）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" z = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" };\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" n = { ...z };\nn "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { a: 3, b: 4 }")]),s._v("\n")])]),r("p",[s._v("由于数组是特殊的对象，所以对象的扩展运算符也可以用于数组。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" foo = { ...["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'c'")]),s._v("] };\nfoo\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// {0: "a", 1: "b", 2: "c"}')]),s._v("\n")])]),r("p",[s._v("如果扩展运算符后面是一个空对象，则没有任何效果。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("{...{}, "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("}\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { a: 1 }")]),s._v("\n")])]),r("p",[s._v("如果扩展运算符后面不是对象，则会自动将其转为对象。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于 {...Object(1)}")]),s._v("\n{..."),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("} "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// {}")]),s._v("\n")])]),r("p",[s._v("上面代码中，扩展运算符后面是整数"),r("code",{pre:!0},[s._v("1")]),s._v("，会自动转为数值的包装对象"),r("code",{pre:!0},[s._v("Number{1}")]),s._v("。由于该对象没有自身属性，所以返回一个空对象。")]),r("p",[s._v("下面的例子都是类似的道理。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于 {...Object(true)}")]),s._v("\n{..."),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("} "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// {}")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于 {...Object(undefined)}")]),s._v("\n{..."),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("} "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// {}")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于 {...Object(null)}")]),s._v("\n{..."),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("} "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// {}")]),s._v("\n")])]),r("p",[s._v("但是，如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("{..."),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v("}\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// {0: "h", 1: "e", 2: "l", 3: "l", 4: "o"}')]),s._v("\n")])]),r("p",[s._v("对象的扩展运算符等同于使用"),r("code",{pre:!0},[s._v("Object.assign()")]),s._v("方法。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" aClone = { ...a };\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" aClone = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("assign")]),s._v("({}, a);\n")])]),r("p",[s._v("上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 写法一")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" clone1 = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("__proto__")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getPrototypeOf")]),s._v("(obj),\n  ...obj\n};\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 写法二")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" clone2 = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("assign")]),s._v("(\n  "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("create")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getPrototypeOf")]),s._v("(obj)),\n  obj\n);\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 写法三")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" clone3 = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("create")]),s._v("(\n  "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getPrototypeOf")]),s._v("(obj),\n  "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getOwnPropertyDescriptors")]),s._v("(obj)\n)\n")])]),r("p",[s._v("上面代码中，写法一的"),r("code",{pre:!0},[s._v("__proto__")]),s._v("属性在非浏览器的环境不一定部署，因此推荐使用写法二和写法三。")]),r("p",[s._v("扩展运算符可以用于合并两个对象。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" ab = { ...a, ...b };\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" ab = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("assign")]),s._v("({}, a, b);\n")])]),r("p",[s._v("如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" aWithOverrides = { ...a, "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" };\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" aWithOverrides = { ...a, ...{ "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" } };\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", y = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", aWithOverrides = { ...a, x, y };\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" aWithOverrides = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("assign")]),s._v("({}, a, { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" });\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("a")]),s._v("对象的"),r("code",{pre:!0},[s._v("x")]),s._v("属性和"),r("code",{pre:!0},[s._v("y")]),s._v("属性，拷贝到新对象后会被覆盖掉。")]),r("p",[s._v("这用来修改现有对象部分的属性就很方便了。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" newVersion = {\n  ...previousVersion,\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'New Name'")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Override the name property")]),s._v("\n};\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("newVersion")]),s._v("对象自定义了"),r("code",{pre:!0},[s._v("name")]),s._v("属性，其他属性全部复制自"),r("code",{pre:!0},[s._v("previousVersion")]),s._v("对象。")]),r("p",[s._v("如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" aWithDefaults = { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", ...a };\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" aWithDefaults = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("assign")]),s._v("({}, { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" }, a);\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" aWithDefaults = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("assign")]),s._v("({ "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" }, a);\n")])]),r("p",[s._v("与数组的扩展运算符一样，对象的扩展运算符后面可以跟表达式。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj = {\n  ...(x > "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" ? {"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("} : {}),\n  "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n};\n")])]),r("p",[s._v("扩展运算符的参数对象之中，如果有取值函数"),r("code",{pre:!0},[s._v("get")]),s._v("，这个函数是会执行的。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("get")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("x")]),s._v("() {\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Error")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'not throw yet'")]),s._v(");\n  }\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" aWithXGetter = { ...a }; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n")])]),r("p",[s._v("上面例子中，取值函数"),r("code",{pre:!0},[s._v("get")]),s._v("在扩展"),r("code",{pre:!0},[s._v("a")]),s._v("对象时会自动执行，导致报错。")]),r("h2",[s._v("链判断运算符")]),r("p",[s._v("编程实务中，如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。比如，要读取"),r("code",{pre:!0},[s._v("message.body.user.firstName")]),s._v("，安全的写法是写成下面这样。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 错误的写法")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v("  firstName = message."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("body")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("user")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("firstName")]),s._v(";\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确的写法")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" firstName = (message\n  && message."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("body")]),s._v("\n  && message."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("body")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("user")]),s._v("\n  && message."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("body")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("user")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("firstName")]),s._v(") || "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'default'")]),s._v(";\n")])]),r("p",[s._v("上面例子中，"),r("code",{pre:!0},[s._v("firstName")]),s._v("属性在对象的第四层，所以需要判断四次，每一层是否有值。")]),r("p",[s._v("三元运算符"),r("code",{pre:!0},[s._v("?:")]),s._v("也常用于判断对象是否存在。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" fooInput = myForm."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("querySelector")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'input[name=foo]'")]),s._v(")\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" fooValue = fooInput ? fooInput."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("value")]),s._v(" : "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n")])]),r("p",[s._v("上面例子中，必须先判断"),r("code",{pre:!0},[s._v("fooInput")]),s._v("是否存在，才能读取"),r("code",{pre:!0},[s._v("fooInput.value")]),s._v("。")]),r("p",[s._v("这样的层层判断非常麻烦，因此 "),r("a",{attrs:{href:"https://github.com/tc39/proposal-optional-chaining"}},[s._v("ES2020")]),s._v(" 引入了“链判断运算符”（optional chaining operator）"),r("code",{pre:!0},[s._v("?.")]),s._v("，简化上面的写法。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" firstName = message?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("body")]),s._v("?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("user")]),s._v("?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("firstName")]),s._v(" || "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'default'")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" fooValue = myForm."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("querySelector")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'input[name=foo]'")]),s._v(")?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("value")]),s._v("\n")])]),r("p",[s._v("上面代码使用了"),r("code",{pre:!0},[s._v("?.")]),s._v("运算符，直接在链式调用的时候判断，左侧的对象是否为"),r("code",{pre:!0},[s._v("null")]),s._v("或"),r("code",{pre:!0},[s._v("undefined")]),s._v("。如果是的，就不再往下运算，而是返回"),r("code",{pre:!0},[s._v("undefined")]),s._v("。")]),r("p",[s._v("下面是判断对象方法是否存在，如果存在就立即执行的例子。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("iterator."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("return")]),s._v("?.()\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("iterator.return")]),s._v("如果有定义，就会调用该方法，否则"),r("code",{pre:!0},[s._v("iterator.return")]),s._v("直接返回"),r("code",{pre:!0},[s._v("undefined")]),s._v("，不再执行"),r("code",{pre:!0},[s._v("?.")]),s._v("后面的部分。")]),r("p",[s._v("对于那些可能没有实现的方法，这个运算符尤其有用。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (myForm."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("checkValidity")]),s._v("?.() === "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 表单校验失败")]),s._v("\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(";\n}\n")])]),r("p",[s._v("上面代码中，老式浏览器的表单可能没有"),r("code",{pre:!0},[s._v("checkValidity")]),s._v("这个方法，这时"),r("code",{pre:!0},[s._v("?.")]),s._v("运算符就会返回"),r("code",{pre:!0},[s._v("undefined")]),s._v("，判断语句就变成了"),r("code",{pre:!0},[s._v("undefined === false")]),s._v("，所以就会跳过下面的代码。")]),r("p",[s._v("链判断运算符有三种用法。")]),r("ul",[r("li",[r("code",{pre:!0},[s._v("obj?.prop")]),s._v(" // 对象属性")]),r("li",[r("code",{pre:!0},[s._v("obj?.[expr]")]),s._v(" // 同上")]),r("li",[r("code",{pre:!0},[s._v("func?.(...args)")]),s._v(" // 函数或对象方法的调用")])]),r("p",[s._v("下面是"),r("code",{pre:!0},[s._v("obj?.[expr]")]),s._v("用法的一个例子。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("let")]),s._v(" hex = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"#C0FFEE"')]),s._v(".match(/"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("#([A-Z]+)/i)?.[1];")]),s._v("\n")])]),r("p",[s._v("上面例子中，字符串的"),r("code",{pre:!0},[s._v("match()")]),s._v("方法，如果没有发现匹配会返回"),r("code",{pre:!0},[s._v("null")]),s._v("，如果发现匹配会返回一个数组，"),r("code",{pre:!0},[s._v("?.")]),s._v("运算符起到了判断作用。")]),r("p",[s._v("下面是"),r("code",{pre:!0},[s._v("?.")]),s._v("运算符常见形式，以及不使用该运算符时的等价形式。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("a?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\na == "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" ? "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" : a."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v("\n\na?.[x]\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\na == "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" ? "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" : a[x]\n\na?."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("b")]),s._v("()\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\na == "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" ? "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" : a."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("b")]),s._v("()\n\na?.()\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\na == "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" ? "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" : "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("a")]),s._v("()\n")])]),r("p",[s._v("上面代码中，特别注意后两种形式，如果"),r("code",{pre:!0},[s._v("a?.b()")]),s._v("里面的"),r("code",{pre:!0},[s._v("a.b")]),s._v("不是函数，不可调用，那么"),r("code",{pre:!0},[s._v("a?.b()")]),s._v("是会报错的。"),r("code",{pre:!0},[s._v("a?.()")]),s._v("也是如此，如果"),r("code",{pre:!0},[s._v("a")]),s._v("不是"),r("code",{pre:!0},[s._v("null")]),s._v("或"),r("code",{pre:!0},[s._v("undefined")]),s._v("，但也不是函数，那么"),r("code",{pre:!0},[s._v("a?.()")]),s._v("会报错。")]),r("p",[s._v("使用这个运算符，有几个注意点。")]),r("p",[s._v("（1）短路机制")]),r("p",[r("code",{pre:!0},[s._v("?.")]),s._v("运算符相当于一种短路机制，只要不满足条件，就不再往下执行。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("a?.[++x]\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\na == "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" ? "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" : a[++x]\n")])]),r("p",[s._v("上面代码中，如果"),r("code",{pre:!0},[s._v("a")]),s._v("是"),r("code",{pre:!0},[s._v("undefined")]),s._v("或"),r("code",{pre:!0},[s._v("null")]),s._v("，那么"),r("code",{pre:!0},[s._v("x")]),s._v("不会进行递增运算。也就是说，链判断运算符一旦为真，右侧的表达式就不再求值。")]),r("p",[s._v("（2）delete 运算符")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("delete")]),s._v(" a?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\na == "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" ? "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" : "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("delete")]),s._v(" a."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v("\n")])]),r("p",[s._v("上面代码中，如果"),r("code",{pre:!0},[s._v("a")]),s._v("是"),r("code",{pre:!0},[s._v("undefined")]),s._v("或"),r("code",{pre:!0},[s._v("null")]),s._v("，会直接返回"),r("code",{pre:!0},[s._v("undefined")]),s._v("，而不会进行"),r("code",{pre:!0},[s._v("delete")]),s._v("运算。")]),r("p",[s._v("（3）括号的影响")]),r("p",[s._v("如果属性链有圆括号，链判断运算符对圆括号外部没有影响，只对圆括号内部有影响。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("(a?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v(")."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("c")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等价于")]),s._v("\n(a == "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" ? "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" : a."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v(")."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("c")]),s._v("\n")])]),r("p",[s._v("上面代码中，"),r("code",{pre:!0},[s._v("?.")]),s._v("对圆括号外部没有影响，不管"),r("code",{pre:!0},[s._v("a")]),s._v("对象是否存在，圆括号后面的"),r("code",{pre:!0},[s._v(".c")]),s._v("总是会执行。")]),r("p",[s._v("一般来说，使用"),r("code",{pre:!0},[s._v("?.")]),s._v("运算符的场合，不应该使用圆括号。")]),r("p",[s._v("（4）报错场合")]),r("p",[s._v("以下写法是禁止的，会报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 构造函数")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" a?.()\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" a?."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("b")]),s._v("()\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 链判断运算符的右侧有模板字符串")]),s._v("\na?."),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`{b}`")]),s._v("\na?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`{c}`")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 链判断运算符的左侧是 super")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("super")]),s._v("?.()\n"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("super")]),s._v("?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 链运算符用于赋值运算符左侧")]),s._v("\na?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v(" = c\n")])]),r("p",[s._v("（5）右侧不得为十进制数值")]),r("p",[s._v("为了保证兼容以前的代码，允许"),r("code",{pre:!0},[s._v("foo?.3:0")]),s._v("被解析成"),r("code",{pre:!0},[s._v("foo ? .3 : 0")]),s._v("，因此规定如果"),r("code",{pre:!0},[s._v("?.")]),s._v("后面紧跟一个十进制数字，那么"),r("code",{pre:!0},[s._v("?.")]),s._v("不再被看成是一个完整的运算符，而会按照三元运算符进行处理，也就是说，那个小数点会归属于后面的十进制数字，形成一个小数。")]),r("h2",[s._v("Null 判断运算符")]),r("p",[s._v("读取对象属性的时候，如果某个属性的值是"),r("code",{pre:!0},[s._v("null")]),s._v("或"),r("code",{pre:!0},[s._v("undefined")]),s._v("，有时候需要为它们指定默认值。常见做法是通过"),r("code",{pre:!0},[s._v("||")]),s._v("运算符指定默认值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" headerText = response."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("settings")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("headerText")]),s._v(" || "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello, world!'")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" animationDuration = response."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("settings")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("animationDuration")]),s._v(" || "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("300")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" showSplashScreen = response."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("settings")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("showSplashScreen")]),s._v(" || "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n")])]),r("p",[s._v("上面的三行代码都通过"),r("code",{pre:!0},[s._v("||")]),s._v("运算符指定默认值，但是这样写是错的。开发者的原意是，只要属性的值为"),r("code",{pre:!0},[s._v("null")]),s._v("或"),r("code",{pre:!0},[s._v("undefined")]),s._v("，默认值就会生效，但是属性的值如果为空字符串或"),r("code",{pre:!0},[s._v("false")]),s._v("或"),r("code",{pre:!0},[s._v("0")]),s._v("，默认值也会生效。")]),r("p",[s._v("为了避免这种情况，"),r("a",{attrs:{href:"https://github.com/tc39/proposal-nullish-coalescing"}},[s._v("ES2020")]),s._v(" 引入了一个新的 Null 判断运算符"),r("code",{pre:!0},[s._v("??")]),s._v("。它的行为类似"),r("code",{pre:!0},[s._v("||")]),s._v("，但是只有运算符左侧的值为"),r("code",{pre:!0},[s._v("null")]),s._v("或"),r("code",{pre:!0},[s._v("undefined")]),s._v("时，才会返回右侧的值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" headerText = response."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("settings")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("headerText")]),s._v(" ?? "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello, world!'")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" animationDuration = response."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("settings")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("animationDuration")]),s._v(" ?? "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("300")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" showSplashScreen = response."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("settings")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("showSplashScreen")]),s._v(" ?? "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n")])]),r("p",[s._v("上面代码中，默认值只有在左侧属性值为"),r("code",{pre:!0},[s._v("null")]),s._v("或"),r("code",{pre:!0},[s._v("undefined")]),s._v("时，才会生效。")]),r("p",[s._v("这个运算符的一个目的，就是跟链判断运算符"),r("code",{pre:!0},[s._v("?.")]),s._v("配合使用，为"),r("code",{pre:!0},[s._v("null")]),s._v("或"),r("code",{pre:!0},[s._v("undefined")]),s._v("的值设置默认值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" animationDuration = response."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("settings")]),s._v("?."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("animationDuration")]),s._v(" ?? "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("300")]),s._v(";\n")])]),r("p",[s._v("上面代码中，如果"),r("code",{pre:!0},[s._v("response.settings")]),s._v("是"),r("code",{pre:!0},[s._v("null")]),s._v("或"),r("code",{pre:!0},[s._v("undefined")]),s._v("，或者"),r("code",{pre:!0},[s._v("response.settings.animationDuration")]),s._v("是"),r("code",{pre:!0},[s._v("null")]),s._v("或"),r("code",{pre:!0},[s._v("undefined")]),s._v("，就会返回默认值300。也就是说，这一行代码包括了两级属性的判断。")]),r("p",[s._v("这个运算符很适合判断函数参数是否赋值。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Component")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("props")]),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" enable = props."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("enabled")]),s._v(" ?? "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// …")]),s._v("\n}\n")])]),r("p",[s._v("上面代码判断"),r("code",{pre:!0},[s._v("props")]),s._v("参数的"),r("code",{pre:!0},[s._v("enabled")]),s._v("属性是否赋值，基本等同于下面的写法。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Component")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("props")]),s._v(") {\n  "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" {\n    "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enabled")]),s._v(": enable = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  } = props;\n  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// …")]),s._v("\n}\n")])]),r("p",[r("code",{pre:!0},[s._v("??")]),s._v("有一个运算优先级问题，它与"),r("code",{pre:!0},[s._v("&&")]),s._v("和"),r("code",{pre:!0},[s._v("||")]),s._v("的优先级孰高孰低。现在的规则是，如果多个逻辑运算符一起使用，必须用括号表明优先级，否则会报错。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\nlhs && middle ?? rhs\nlhs ?? middle && rhs\nlhs || middle ?? rhs\nlhs ?? middle || rhs\n")])]),r("p",[s._v("上面四个表达式都会报错，必须加入表明优先级的括号。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("(lhs && middle) ?? rhs;\nlhs && (middle ?? rhs);\n\n(lhs ?? middle) && rhs;\nlhs ?? (middle && rhs);\n\n(lhs || middle) ?? rhs;\nlhs || (middle ?? rhs);\n\n(lhs ?? middle) || rhs;\nlhs ?? (middle || rhs);\n")])])])])])}],!1,null,null,null);a.default=t.exports}}]);