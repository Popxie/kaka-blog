(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d20ee0f"],{b0f1:function(s,a,t){"use strict";t.r(a);var l=t("2877"),e=Object(l.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("html",[t("head"),t("body",[t("h1",[s._v("09 参数按值传递")]),t("blockquote",[t("p",[s._v("JavaScript 深入系列第九篇，除了按值传递、引用传递，还有第三种传递方式 —— 按共享传递")])]),t("h2",[s._v("定义")]),t("p",[s._v("在《JavaScript 高级程序设计》第三版 4.1.3，讲到传递参数：")]),t("blockquote",[t("p",[s._v("ECMAScript 中所有函数的参数都是按值传递的。")])]),t("p",[s._v("什么是按值传递呢？")]),t("blockquote",[t("p",[s._v("也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。")])]),t("h2",[s._v("按值传递")]),t("p",[s._v("举个简单的例子：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" value = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v")]),s._v(") {\n  v = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(v) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//2")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(value)\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(value) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n")])]),t("p",[s._v("很好理解，当传递 value 到函数 foo 中，相当于拷贝了一份 value，假设拷贝的这份叫 _value，函数中修改的都是 _value 的值，而不会影响原来的 value 值。")]),t("h2",[s._v("引用传递")]),t("p",[s._v("拷贝虽然很好理解，但是当值是一个复杂的数据结构的时候，拷贝就会产生性能上的问题。")]),t("p",[s._v("所以还有另一种传递方式叫做按引用传递。")]),t("p",[s._v("所谓按引用传递，就是传递对象的引用，函数内部对参数的任何改变都会影响该对象的值，因为两者引用的是同一个对象。")]),t("p",[s._v("举个例子：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("o")]),s._v(") {\n  o."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("value")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(o."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("value")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//2")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(obj)\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(obj."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("value")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("哎，不对啊，连我们的红宝书都说了 ECMAScript 中所有函数的参数都是按值传递的，这怎么能按引用传递成功呢？")]),t("p",[s._v("而这究竟是不是引用传递呢？")]),t("h2",[s._v("第三种传递方式")]),t("p",[s._v("不急，让我们再看个例子：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("o")]),s._v(") {\n  o = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(o) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//2")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(obj)\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(obj."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("value")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n")])]),t("p",[s._v("如果 JavaScript 采用的是引用传递，外层的值也会被修改呐，这怎么又没被改呢？所以真的不是引用传递吗？")]),t("p",[s._v("这就要讲到其实还有第三种传递方式，叫按共享传递。")]),t("p",[s._v("而共享传递是指，在传递对象的时候，传递对象的引用的副本。")]),t("p",[t("strong",[s._v("注意： 按引用传递是传递对象的引用，而按共享传递是传递对象的引用的副本！")])]),t("p",[s._v("所以修改 o.value，可以通过引用找到原值，但是直接修改 o，并不会修改原值。所以第二个和第三个例子其实都是按共享传递。")]),t("p",[s._v("最后，你可以这样理解：")]),t("p",[s._v("参数如果是基本类型是按值传递，如果是引用类型按共享传递。")]),t("p",[s._v("但是因为拷贝副本也是一种值的拷贝，所以在高程中也直接认为是按值传递了。")]),t("p",[s._v("所以，高程，谁叫你是红宝书嘞！")]),t("h2",[s._v("下一篇文章")]),t("p",[t("a",{attrs:{href:"#/qingfeng/deep/deep-10"}},[s._v("10 call 和 apply 的模拟实现")])])])])])}],!1,null,null,null);a.default=e.exports}}]);