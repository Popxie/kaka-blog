(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d0c1c9b"],{4812:function(s,r,e){"use strict";e.r(r);var a=e("2877"),t=Object(a.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,r=s.$createElement,e=s._self._c||r;return e("section",[e("html",[e("head"),e("body",[e("h1",[s._v("你不懂JS：类型与语法")]),e("h1",[s._v("第二章：值")]),e("p",[e("code",{pre:!0},[s._v("array")]),s._v("、"),e("code",{pre:!0},[s._v("string")]),s._v("、和 "),e("code",{pre:!0},[s._v("number")]),s._v(" 是任何程序的最基础构建块，但是 JavaScript 在这些类型上有一些或使你惊喜或使你惊讶的独特性质。")]),e("p",[s._v("让我们来看几种 JS 内建的值类型，并探讨一下我们如何才能更加全面地理解并正确地利用它们的行为。")]),e("h2",[s._v("Array")]),e("p",[s._v("和其他强制类型的语言相比，JavaScript 的 "),e("code",{pre:!0},[s._v("array")]),s._v(" 只是值的容器，而这些值可以是任何类型："),e("code",{pre:!0},[s._v("string")]),s._v(" 或者 "),e("code",{pre:!0},[s._v("number")]),s._v(" 或者 "),e("code",{pre:!0},[s._v("object")]),s._v("，甚至是另一个 "),e("code",{pre:!0},[s._v("array")]),s._v("（这也是你得到多维数组的方法）。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = [ "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"2"')]),s._v(", ["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("] ];\n\na."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(";\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\na["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\na["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("]["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("你不需要预先指定 "),e("code",{pre:!0},[s._v("array")]),s._v(" 的大小，你可以仅声明它们并加入你觉得合适的值：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = [ ];\n\na."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0")]),s._v("\n\na["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\na["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"2"')]),s._v(";\na["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("] = [ "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ];\n\na."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])]),e("p",[e("strong",[s._v("警告：")]),s._v(" 在一个 "),e("code",{pre:!0},[s._v("array")]),s._v(" 值上使用 "),e("code",{pre:!0},[s._v("delete")]),s._v(" 将会从这个 "),e("code",{pre:!0},[s._v("array")]),s._v(" 上移除一个值槽，但就算你移除了最后一个元素，它也 "),e("strong",[s._v("不会")]),s._v(" 更新 "),e("code",{pre:!0},[s._v("length")]),s._v(" 属性，所以多加小心！我们会在第五章讨论 "),e("code",{pre:!0},[s._v("delete")]),s._v(" 操作符的更多细节。")]),e("p",[s._v("要小心创建“稀散”的 "),e("code",{pre:!0},[s._v("array")]),s._v("（留下或创建空的/丢失的值槽）：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = [ ];\n\na["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里没有设置值槽 `a[1]`")]),s._v("\na["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("] = [ "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ];\n\na["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("];\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n\na."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])]),e("p",[s._v("虽然这可以工作，但你留下的“空值槽”可能会导致一些令人困惑的行为。虽然这样的值槽看起来拥有 "),e("code",{pre:!0},[s._v("undefined")]),s._v(" 值，但是它不会像被明确设置（"),e("code",{pre:!0},[s._v("a[1] = undefined")]),s._v("）的值槽那样动作。更多信息可以参见第三章的“Array”。")]),e("p",[e("code",{pre:!0},[s._v("array")]),s._v(" 是被数字索引的（正如你所想的那样），但微妙的是它们也是对象，可以在它们上面添加 "),e("code",{pre:!0},[s._v("string")]),s._v(" 键/属性（但是这些属性不会计算在 "),e("code",{pre:!0},[s._v("array")]),s._v(" 的 "),e("code",{pre:!0},[s._v("length")]),s._v(" 中）：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = [ ];\n\na["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\na["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foobar"')]),s._v("] = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\na."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(";\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\na["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foobar"')]),s._v("];\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foobar")]),s._v(";\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),e("p",[s._v("然而，一个需要小心的坑是，如果一个可以被强制转换为10进制 "),e("code",{pre:!0},[s._v("number")]),s._v(" 的 "),e("code",{pre:!0},[s._v("string")]),s._v(" 值被用作键的话，它会认为你想使用 "),e("code",{pre:!0},[s._v("number")]),s._v(" 索引而不是一个 "),e("code",{pre:!0},[s._v("string")]),s._v(" 键！")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = [ ];\n\na["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"13"')]),s._v("] = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(";\n\na."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 14")]),s._v("\n")])]),e("p",[s._v("一般来说，向 "),e("code",{pre:!0},[s._v("array")]),s._v(" 添加 "),e("code",{pre:!0},[s._v("string")]),s._v(" 键/属性不是一个好主意。最好使用 "),e("code",{pre:!0},[s._v("object")]),s._v(" 来持有键/属性形式的值，而将 "),e("code",{pre:!0},[s._v("array")]),s._v(" 专用于严格地数字索引的值。")]),e("h3",[s._v("类 Array")]),e("p",[s._v("偶尔你需要将一个类 "),e("code",{pre:!0},[s._v("array")]),s._v(" 值（一个数字索引的值的集合）转换为一个真正的 "),e("code",{pre:!0},[s._v("array")]),s._v("，通常你可以对这些值的集合调用数组的工具函数（比如 "),e("code",{pre:!0},[s._v("indexOf(..)")]),s._v("、"),e("code",{pre:!0},[s._v("concat(..)")]),s._v("、"),e("code",{pre:!0},[s._v("forEach(..)")]),s._v(" 等等）。")]),e("p",[s._v("举个例子，各种 DOM 查询操作会返回一个 DOM 元素的列表，对于我们转换的目的来说，这些列表不是真正的 "),e("code",{pre:!0},[s._v("array")]),s._v(" 但是也足够类似 "),e("code",{pre:!0},[s._v("array")]),s._v("。另一个常见的例子是，函数为了像列表一样访问它的参数值，而暴露了 "),e("code",{pre:!0},[s._v("arguments")]),s._v(" 对象（类 "),e("code",{pre:!0},[s._v("array")]),s._v("，在 ES6 中被废弃了）。")]),e("p",[s._v("一个进行这种转换的很常见的方法是对这个值借用 "),e("code",{pre:!0},[s._v("slice(..)")]),s._v(" 工具：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" arr = "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Array")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("slice")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(" );\n\tarr."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bam"')]),s._v(" );\n\t"),e("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( arr );\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"baz"')]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["bar","baz","bam"]')]),s._v("\n")])]),e("p",[s._v("如果 "),e("code",{pre:!0},[s._v("slice()")]),s._v(" 没有用其他额外的参数调用，就像上面的代码段那样，它的参数的默认值会使它具有复制这个 "),e("code",{pre:!0},[s._v("array")]),s._v("（或者，在这个例子中，是一个类 "),e("code",{pre:!0},[s._v("array")]),s._v("）的效果。")]),e("p",[s._v("在 ES6 中，还有一种称为 "),e("code",{pre:!0},[s._v("Array.from(..)")]),s._v(" 的内建工具可以执行相同的任务：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("...\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" arr = "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Array")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("from")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(" );\n...\n")])]),e("p",[e("strong",[s._v("注意：")]),s._v(" "),e("code",{pre:!0},[s._v("Array.from(..)")]),s._v(" 拥有其他几种强大的能力，我们将在本系列的 "),e("em",[s._v("ES6 与未来")]),s._v(" 中涵盖它的细节。")]),e("h2",[s._v("String")]),e("p",[s._v("一个很常见的想法是，"),e("code",{pre:!0},[s._v("string")]),s._v(" 实质上只是字符的 "),e("code",{pre:!0},[s._v("array")]),s._v("。虽然内部的实现可能是也可能不是 "),e("code",{pre:!0},[s._v("array")]),s._v("，但重要的是要理解 JavaScript 的 "),e("code",{pre:!0},[s._v("string")]),s._v(" 与字符的 "),e("code",{pre:!0},[s._v("array")]),s._v(" 确实不一样。它们的相似性几乎只是表面上的。")]),e("p",[s._v("举个例子，让我们考虑这两个值：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = ["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"f"')]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"o"')]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"o"')]),s._v("];\n")])]),e("p",[s._v("String 确实与 "),e("code",{pre:!0},[s._v("array")]),s._v(" 有很肤浅的相似性 -- 也就是上面说的，类 "),e("code",{pre:!0},[s._v("array")]),s._v(" -- 举例来说，它们都有一个 "),e("code",{pre:!0},[s._v("length")]),s._v(" 属性，一个 "),e("code",{pre:!0},[s._v("indexOf(..)")]),s._v(" 方法（在 ES5 中仅有 "),e("code",{pre:!0},[s._v("array")]),s._v(" 版本），和一个 "),e("code",{pre:!0},[s._v("concat(..)")]),s._v(" 方法：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("a."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(";\t\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\nb."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(";\t\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("indexOf")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"o"')]),s._v(" );\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\nb."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("indexOf")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"o"')]),s._v(" );\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" c = a."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("concat")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(" );\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "foobar"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" d = b."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("concat")]),s._v("( ["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"b"')]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"r"')]),s._v("] );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["f","o","o","b","a","r"]')]),s._v("\n\na === c;\t\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\nb === d;\t\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n\na;\t\t\t\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "foo"')]),s._v("\nb;\t\t\t\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["f","o","o"]')]),s._v("\n")])]),e("p",[s._v("那么，它们基本上都仅仅是“字符的数组”，对吧？ "),e("strong",[s._v("不确切")]),s._v("：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("a["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"O"')]),s._v(";\nb["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"O"')]),s._v(";\n\na; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "foo"')]),s._v("\nb; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["f","O","o"]')]),s._v("\n")])]),e("p",[s._v("JavaScript 的 "),e("code",{pre:!0},[s._v("string")]),s._v(" 是不可变的，而 "),e("code",{pre:!0},[s._v("array")]),s._v(" 是相当可变的。另外，在 JavaScript 中用位置访问字符的 "),e("code",{pre:!0},[s._v("a[1]")]),s._v(" 形式不总是广泛合法的。老版本的 IE 就不允许这种语法（但是它们现在允许了）。相反，"),e("em",[s._v("正确的")]),s._v(" 方式是 "),e("code",{pre:!0},[s._v("a.charAt(1)")]),s._v("。")]),e("p",[e("code",{pre:!0},[s._v("string")]),s._v(" 不可变性的进一步的后果是，"),e("code",{pre:!0},[s._v("string")]),s._v(" 上没有一个方法是可以原地修改它的内容的，而是创建并返回一个新的 "),e("code",{pre:!0},[s._v("string")]),s._v("。与之相对的是，许多改变 "),e("code",{pre:!0},[s._v("array")]),s._v(" 内容的方法实际上 "),e("em",[s._v("是")]),s._v(" 原地修改的。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("c = a."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toUpperCase")]),s._v("();\na === c;\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\na;\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "foo"')]),s._v("\nc;\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "FOO"')]),s._v("\n\nb."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"!"')]),s._v(" );\nb;\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["f","O","o","!"]')]),s._v("\n")])]),e("p",[s._v("另外，许多 "),e("code",{pre:!0},[s._v("array")]),s._v(" 方法在处理 "),e("code",{pre:!0},[s._v("string")]),s._v(" 时非常有用，虽然这些方法不属于 "),e("code",{pre:!0},[s._v("string")]),s._v("，但我们可以对我们的 "),e("code",{pre:!0},[s._v("string")]),s._v(" “借用”非变化的 "),e("code",{pre:!0},[s._v("array")]),s._v(" 方法：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("a."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("join")]),s._v(";\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("map")]),s._v(";\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" c = "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Array")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("join")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( a, "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"-"')]),s._v(" );\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" d = "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Array")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("map")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( a, "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v")]),s._v("){\n\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" v."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toUpperCase")]),s._v("() + "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"."')]),s._v(";\n} )."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("join")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(" );\n\nc;\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "f-o-o"')]),s._v("\nd;\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "F.O.O."')]),s._v("\n")])]),e("p",[s._v("让我们来看另一个例子：翻转一个 "),e("code",{pre:!0},[s._v("string")]),s._v("（顺带一提，这是一个 JavaScript 面试中常见的细节问题！）。"),e("code",{pre:!0},[s._v("array")]),s._v(" 拥有一个原地的 "),e("code",{pre:!0},[s._v("reverse()")]),s._v(" 修改器方法，但是 "),e("code",{pre:!0},[s._v("string")]),s._v(" 没有：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("a."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("reverse")]),s._v(";\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n\nb."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("reverse")]),s._v("();\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["!","o","O","f"]')]),s._v("\nb;\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["!","o","O","f"]')]),s._v("\n")])]),e("p",[s._v("不幸的是，这种“借用” "),e("code",{pre:!0},[s._v("array")]),s._v(" 修改器不起作用，因为 "),e("code",{pre:!0},[s._v("string")]),s._v(" 是不可变的，因此它不能被原地修改：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Array")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("reverse")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( a );\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 仍然返回一个“foo”的 String 对象包装器（见第三章） :(")]),s._v("\n")])]),e("p",[s._v("另一种迂回的做法（也是黑科技）是，将 "),e("code",{pre:!0},[s._v("string")]),s._v(" 转换为一个 "),e("code",{pre:!0},[s._v("array")]),s._v("，实施我们想做的操作，然后将它转回 "),e("code",{pre:!0},[s._v("string")]),s._v("。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" c = a\n\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将 `a` 切分成一个字符的数组")]),s._v("\n\t."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("split")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(" )\n\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 翻转字符的数组")]),s._v("\n\t."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("reverse")]),s._v("()\n\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将字符的数组连接回一个字符串")]),s._v("\n\t."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("join")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(" );\n\nc; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "oof"')]),s._v("\n")])]),e("p",[s._v("如果你觉得这很难看，没错。不管怎样，对于简单的 "),e("code",{pre:!0},[s._v("string")]),s._v(" 它 "),e("em",[s._v("好用")]),s._v("，所以如果你需要某些快速但是“脏”的东西，像这样的方式经常能满足你。")]),e("p",[e("strong",[s._v("警告：")]),s._v(" 小心！这种方法对含有复杂（unicode）字符（星型字符、多字节字符等）的 "),e("code",{pre:!0},[s._v("string")]),s._v(" "),e("strong",[s._v("不起作用")]),s._v("。你需要支持 unicode 的更精巧的工具库来准确地处理这种操作。在这个问题上可以咨询 Mathias Bynens 的作品："),e("em",[s._v("Esrever")]),s._v("（https://github.com/mathiasbynens/esrever）。")]),e("p",[s._v("另外一种考虑这个问题的方式是：如果你更经常地将你的“string”基本上作为 "),e("em",[s._v("字符的数组")]),s._v(" 来执行一些任务的话，也许就将它们作为 "),e("code",{pre:!0},[s._v("array")]),s._v(" 而不是作为 "),e("code",{pre:!0},[s._v("string")]),s._v(" 存储更好。你可能会因此省去很多每次都将 "),e("code",{pre:!0},[s._v("string")]),s._v(" 转换为 "),e("code",{pre:!0},[s._v("array")]),s._v(" 的麻烦。无论何时你确实需要 "),e("code",{pre:!0},[s._v("string")]),s._v(" 的表现形式的话，你总是可以调用 "),e("em",[s._v("字符的")]),s._v(" "),e("code",{pre:!0},[s._v("array")]),s._v(" 的 "),e("code",{pre:!0},[s._v('join("")')]),s._v(" 方法。")]),e("h2",[s._v("Number")]),e("p",[s._v("JavaScript 只有一种数字类型："),e("code",{pre:!0},[s._v("number")]),s._v("。这种类型包含“整数”值和小数值。我说“整数”时加了引号，因为 JS 的一个长久以来为人诟病的原因是，和其他语言不同，JS 没有真正的整数。这可能在未来某个时候会改变，但是目前，我们只有 "),e("code",{pre:!0},[s._v("number")]),s._v(" 可用。")]),e("p",[s._v("所以，在 JS 中，一个“整数”只是一个没有小数部分的小数值。也就是说，"),e("code",{pre:!0},[s._v("42.0")]),s._v(" 和 "),e("code",{pre:!0},[s._v("42")]),s._v(" 一样是“整数”。")]),e("p",[s._v("像大多数现代计算机语言，以及几乎所有的脚本语言一样，JavaScript 的 "),e("code",{pre:!0},[s._v("number")]),s._v(" 的实现基于“IEEE 754”标准，通常被称为“浮点”。JavaScript 明确地使用了这个标准的“双精度”（也就是“64位二进制”）格式。")]),e("p",[s._v("在网络上有许多了不起的文章都在介绍二进制浮点数如何在内存中存储的细节，以及选择这些做法的意义。因为对于理解如何在 JS 中正确使用 "),e("code",{pre:!0},[s._v("number")]),s._v(" 来说，理解内存中的位模式不是必须的，所以我们将这个话题作为练习留给那些想要进一步挖掘 IEEE 754 的细节的读者。")]),e("h3",[s._v("数字的语法")]),e("p",[s._v("在 JavaScript 中字面数字一般用十进制小数表达。例如：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.3")]),s._v(";\n")])]),e("p",[s._v("小数的整数部分如果是 "),e("code",{pre:!0},[s._v("0")]),s._v("，是可选的：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.42")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v(".42")]),s._v(";\n")])]),e("p",[s._v("相似地，一个小数在 "),e("code",{pre:!0},[s._v(".")]),s._v(" 之后的小数部分如果是 "),e("code",{pre:!0},[s._v("0")]),s._v("，是可选的：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.0")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.")]),s._v(";\n")])]),e("p",[e("strong",[s._v("警告：")]),s._v(" "),e("code",{pre:!0},[s._v("42.")]),s._v(" 是极不常见的，如果你正在努力避免别人阅读你的代码时感到困惑，它可能不是一个好主意。但不管怎样，它是合法的。")]),e("p",[s._v("默认情况下，大多数 "),e("code",{pre:!0},[s._v("number")]),s._v(" 将会以十进制小数的形式输出，并去掉末尾小数部分的 "),e("code",{pre:!0},[s._v("0")]),s._v("。所以：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.300")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.0")]),s._v(";\n\na; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 42.3")]),s._v("\nb; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 42")]),s._v("\n")])]),e("p",[s._v("非常大或非常小的 "),e("code",{pre:!0},[s._v("number")]),s._v(" 将默认以指数形式输出，与 "),e("code",{pre:!0},[s._v("toExponential()")]),s._v(" 方法的输出一样，比如：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5E10")]),s._v(";\na;\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 50000000000")]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toExponential")]),s._v("();\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "5e+10"')]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = a * a;\nb;\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2.5e+21")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" c = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" / a;\nc;\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2e-11")]),s._v("\n")])]),e("p",[s._v("因为 "),e("code",{pre:!0},[s._v("number")]),s._v(" 值可以用 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 对象包装器封装（见第三章），所以 "),e("code",{pre:!0},[s._v("number")]),s._v(" 值可以访问内建在 "),e("code",{pre:!0},[s._v("Number.prototype")]),s._v(" 上的方法（见第三章）。举个例子，"),e("code",{pre:!0},[s._v("toFixed(..)")]),s._v(" 方法允许你指定一个值在被表示时，带有多少位小数：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.59")]),s._v(";\n\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toFixed")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "43"')]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toFixed")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.6"')]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toFixed")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.59"')]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toFixed")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.590"')]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toFixed")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.5900"')]),s._v("\n")])]),e("p",[s._v("要注意的是，它的输出实际上是一个 "),e("code",{pre:!0},[s._v("number")]),s._v(" 的 "),e("code",{pre:!0},[s._v("string")]),s._v(" 表现形式，而且如果你指定的位数多于值持有的小数位数时，会在右侧补 "),e("code",{pre:!0},[s._v("0")]),s._v("。")]),e("p",[e("code",{pre:!0},[s._v("toPrecision(..)")]),s._v(" 很相似，但它指定的是有多少 "),e("em",[s._v("有效数字")]),s._v(" 用来表示这个值：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.59")]),s._v(";\n\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toPrecision")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "4e+1"')]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toPrecision")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "43"')]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toPrecision")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.6"')]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toPrecision")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.59"')]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toPrecision")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.590"')]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toPrecision")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.5900"')]),s._v("\n")])]),e("p",[s._v("你不必非得使用持有这个值的变量来访问这些方法；你可以直接在 "),e("code",{pre:!0},[s._v("number")]),s._v(" 的字面上访问这些方法。但你不得不小心 "),e("code",{pre:!0},[s._v(".")]),s._v(" 操作符。因为 "),e("code",{pre:!0},[s._v(".")]),s._v(" 是一个合法数字字符，如果可能的话，它会首先被翻译为 "),e("code",{pre:!0},[s._v("number")]),s._v(" 字面的一部分，而不是被翻译为属性访问操作符。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不合法的语法：")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.")]),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toFixed")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// SyntaxError")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这些都是合法的：")]),s._v("\n("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(")."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toFixed")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.000"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.42")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toFixed")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "0.420"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toFixed")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.000"')]),s._v("\n")])]),e("p",[e("code",{pre:!0},[s._v("42.toFixed(3)")]),s._v(" 是不合法的语法，因为 "),e("code",{pre:!0},[s._v(".")]),s._v(" 作为 "),e("code",{pre:!0},[s._v("42.")]),s._v(" 字面（这是合法的 -- 参见上面的讨论！）的一部分被吞掉了，因此没有 "),e("code",{pre:!0},[s._v(".")]),s._v(" 属性操作符来表示 "),e("code",{pre:!0},[s._v(".toFixed")]),s._v(" 访问。")]),e("p",[e("code",{pre:!0},[s._v("42..toFixed(3)")]),s._v(" 可以工作，因为第一个 "),e("code",{pre:!0},[s._v(".")]),s._v(" 是 "),e("code",{pre:!0},[s._v("number")]),s._v(" 的一部分，而第二个 "),e("code",{pre:!0},[s._v(".")]),s._v(" 是属性操作符。但它可能看起来很古怪，而且确实在实际的 JavaScript 代码中很少会看到这样的东西。实际上，在任何基本类型上直接访问方法是十分不常见的。但是不常见并不意味着 "),e("em",[s._v("坏")]),s._v(" 或者 "),e("em",[s._v("错")]),s._v("。")]),e("p",[e("strong",[s._v("注意：")]),s._v(" 有一些库扩展了内建的 "),e("code",{pre:!0},[s._v("Number.prototype")]),s._v("（见第三章），使用 "),e("code",{pre:!0},[s._v("number")]),s._v(" 或在 "),e("code",{pre:!0},[s._v("number")]),s._v(" 上提供了额外的操作，所以在这些情况下，像使用 "),e("code",{pre:!0},[s._v("10..makeItRain()")]),s._v(" 来设定一个十秒钟的下钱雨的动画，或者其他诸如此类的傻事是完全合法的。")]),e("p",[s._v("在技术上讲，这也是合法的（注意那个空格）：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(" ."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toFixed")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "42.000"')]),s._v("\n")])]),e("p",[s._v("但是，尤其是对 "),e("code",{pre:!0},[s._v("number")]),s._v(" 字面量来说，"),e("strong",[s._v("这是特别使人糊涂的代码风格")]),s._v("，而且除了使其他开发者（和未来的你）糊涂以外没有任何用处。避免它。")]),e("p",[e("code",{pre:!0},[s._v("number")]),s._v(" 还可以使用科学计数法的形式指定，这在表示很大的 "),e("code",{pre:!0},[s._v("number")]),s._v(" 时很常见，比如：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" onethousand = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1E3")]),s._v(";\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 代表 1 * 10^3")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" onemilliononehundredthousand = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1.1E6")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 代表 1.1 * 10^6")]),s._v("\n")])]),e("p",[e("code",{pre:!0},[s._v("number")]),s._v(" 字面量还可以使用其他进制表达，比如二进制，八进制，和十六进制。")]),e("p",[s._v("这些格式是可以在当前版本的 JavaScript 中使用的：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0xf3")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 十六进制的: 243")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0Xf3")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 同上")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0363")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 八进制的: 243")]),s._v("\n")])]),e("p",[e("strong",[s._v("注意：")]),s._v(" 从 ES6 + "),e("code",{pre:!0},[s._v("strict")]),s._v(" 模式开始，不再允许 "),e("code",{pre:!0},[s._v("0363")]),s._v(" 这样的的八进制形式（新的形式参见后面的讨论）。"),e("code",{pre:!0},[s._v("0363")]),s._v(" 在非 "),e("code",{pre:!0},[s._v("strict")]),s._v(" 模式下依然是允许的，但是不管怎样你应当停止使用它，来拥抱未来（而且因为你现在应当在使用 "),e("code",{pre:!0},[s._v("strict")]),s._v(" 模式了！）。")]),e("p",[s._v("至于 ES6，下面的新形式也是合法的：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0o363")]),s._v(";\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 八进制的: 243")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0O363")]),s._v(";\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 同上")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0b11110011")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 二进制的: 243")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0B11110011")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 同上")]),s._v("\n")])]),e("p",[s._v("请为你的开发者同胞们做件好事：绝不要使用 "),e("code",{pre:!0},[s._v("0O363")]),s._v(" 形式。把 "),e("code",{pre:!0},[s._v("0")]),s._v(" 放在大写的 "),e("code",{pre:!0},[s._v("O")]),s._v(" 旁边就是在制造困惑。保持使用小写的谓词 "),e("code",{pre:!0},[s._v("0x")]),s._v("、"),e("code",{pre:!0},[s._v("0b")]),s._v("、和"),e("code",{pre:!0},[s._v("0o")]),s._v("。")]),e("h3",[s._v("小数值")]),e("p",[s._v("使用二进制浮点数的最出名（臭名昭著）的副作用是（记住，这是对 "),e("strong",[s._v("所有")]),s._v(" 使用 IEEE 754 的语言都成立的 —— 不是许多人认为/假装 "),e("em",[s._v("仅")]),s._v(" 在 JavaScript 中存在的问题）：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.1")]),s._v(" + "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.2")]),s._v(" === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.3")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("p",[s._v("从数学的意义上，我们知道这个语句应当为 "),e("code",{pre:!0},[s._v("true")]),s._v("。为什么它是 "),e("code",{pre:!0},[s._v("false")]),s._v("？")]),e("p",[s._v("简单地说，"),e("code",{pre:!0},[s._v("0.1")]),s._v(" 和 "),e("code",{pre:!0},[s._v("0.2")]),s._v(" 的二进制表示形式是不精确的，所以它们相加时，结果不是精确地 "),e("code",{pre:!0},[s._v("0.3")]),s._v("。而是 "),e("strong",[s._v("非常")]),s._v(" 接近的值："),e("code",{pre:!0},[s._v("0.30000000000000004")]),s._v("，但是如果你的比较失败了，“接近”是无关紧要的。")]),e("p",[e("strong",[s._v("注意：")]),s._v(" JavaScript 应当切换到可以精确表达所有值的一个不同的 "),e("code",{pre:!0},[s._v("number")]),s._v(" 实现吗？有些人认为应该。多年以来有许多选项出现过。但是没有一个被采纳，而且也许永远也不会。它看起来就像挥挥手然后说“已经改好那个 bug 了!”那么简单，但根本不是那么回事儿。如果真有这么简单，它绝对在很久以前就被改掉了。")]),e("p",[s._v("现在的问题是，如果一些 "),e("code",{pre:!0},[s._v("number")]),s._v(" 不能被 "),e("em",[s._v("信任")]),s._v(" 为精确的，这不是意味着我们根本不能使用 "),e("code",{pre:!0},[s._v("number")]),s._v(" 吗？ "),e("strong",[s._v("当然不是。")])]),e("p",[s._v("在一些应用程序中你需要多加小心，特别是在对付小数的时候。还有许多（也许是大多数？）应用程序只处理整数，而且，最大只处理到几百万到几万亿。这些应用程序使用 JS 中的数字操作是，而且将总是，"),e("strong",[s._v("非常安全")]),s._v(" 的。")]),e("p",[s._v("要是我们 "),e("em",[s._v("确实")]),s._v(" 需要比较两个 "),e("code",{pre:!0},[s._v("number")]),s._v("，就像 "),e("code",{pre:!0},[s._v("0.1 + 0.2")]),s._v(" 与 "),e("code",{pre:!0},[s._v("0.3")]),s._v("，而且知道这个简单的相等测试将会失败呢？")]),e("p",[s._v("可以接受的最常见的做法是使用一个很小的“错误舍入”值作为比较的 "),e("em",[s._v("容差")]),s._v("。这个很小的值经常被称为“机械极小值（machine epsilon）”，对于 JavaScript 来说这种 "),e("code",{pre:!0},[s._v("number")]),s._v(" 通常为 "),e("code",{pre:!0},[s._v("2^-52")]),s._v("（"),e("code",{pre:!0},[s._v("2.220446049250313e-16")]),s._v("）。")]),e("p",[s._v("在 ES6 中，使用这个容差值预定义了 "),e("code",{pre:!0},[s._v("Number.EPSILON")]),s._v("，所以你将会想要使用它，你也可以在前 ES6 中安全地填补这个定义：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("EPSILON")]),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("EPSILON")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Math")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("pow")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",-"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("52")]),s._v(");\n}\n")])]),e("p",[s._v("我们可以使用这个 "),e("code",{pre:!0},[s._v("Number.EPSILON")]),s._v(" 来比较两个 "),e("code",{pre:!0},[s._v("number")]),s._v(" 的“等价性”（带有错误舍入的容差）：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("numbersCloseEnoughToEqual")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n1,n2")]),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Math")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("abs")]),s._v("( n1 - n2 ) < "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("EPSILON")]),s._v(";\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.1")]),s._v(" + "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.2")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.3")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("numbersCloseEnoughToEqual")]),s._v("( a, b );\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("numbersCloseEnoughToEqual")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.0000001")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.0000002")]),s._v(" );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("p",[s._v("可以被表示的最大的浮点值大概是 "),e("code",{pre:!0},[s._v("1.798e+308")]),s._v("（它真的非常，非常，非常大！），它为你预定义为 "),e("code",{pre:!0},[s._v("Number.MAX_VALUE")]),s._v("。在极小的一端，"),e("code",{pre:!0},[s._v("Number.MIN_VALUE")]),s._v(" 大概是 "),e("code",{pre:!0},[s._v("5e-324")]),s._v("，它不是负数但是非常接近于0！")]),e("h3",[s._v("安全整数范围")]),e("p",[s._v("由于 "),e("code",{pre:!0},[s._v("number")]),s._v(" 的表示方式，对完全是 "),e("code",{pre:!0},[s._v("number")]),s._v(" 的“整数”而言有一个“安全”的值的范围，而且它要比 "),e("code",{pre:!0},[s._v("Number.MAX_VALUE")]),s._v(" 小得多。")]),e("p",[s._v("可以“安全地”被表示的最大整数（也就是说，可以保证被表示的值是实际可以无误地表示的）是"),e("code",{pre:!0},[s._v("2^53 - 1")]),s._v("，也就是"),e("code",{pre:!0},[s._v("9007199254740991")]),s._v("，如果你插入一些数字分隔符，可以看到它刚好超过9万亿。所以对于"),e("code",{pre:!0},[s._v("number")]),s._v("能表示的上限来说它确实是够TM大的。")]),e("p",[s._v("在ES6中这个值实际上是自动预定义的，它是"),e("code",{pre:!0},[s._v("Number.MAX_SAFE_INTEGER")]),s._v("。意料之中的是，还有一个最小值，"),e("code",{pre:!0},[s._v("-9007199254740991")]),s._v("，它在ES6中定义为"),e("code",{pre:!0},[s._v("Number.MIN_SAFE_INTEGER")]),s._v("。")]),e("p",[s._v("JS 程序面临处理这样大的数字的主要情况是，处理数据库中的64位 ID 等等。64位数字不能使用 "),e("code",{pre:!0},[s._v("number")]),s._v(" 类型准确表达，所以在 JavaScript 中必须使用 "),e("code",{pre:!0},[s._v("string")]),s._v(" 表现形式存储（和传递）。")]),e("p",[s._v("谢天谢地，在这样的大 ID "),e("code",{pre:!0},[s._v("number")]),s._v(" 值上的数字操作（除了比较，它使用 "),e("code",{pre:!0},[s._v("string")]),s._v(" 也没问题）并不很常见。但是如果你 "),e("em",[s._v("确实")]),s._v(" 需要在这些非常大的值上实施数学操作，目前来讲你需要使用一个 "),e("em",[s._v("大数字")]),s._v(" 工具。在未来版本的 JavaScript 中，大数字也许会得到官方支持。")]),e("h3",[s._v("测试整数")]),e("p",[s._v("测试一个值是否是整数，你可以使用 ES6 定义的 "),e("code",{pre:!0},[s._v("Number.isInteger(..)")]),s._v("：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isInteger")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(" );\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isInteger")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.000")]),s._v(" );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isInteger")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42.3")]),s._v(" );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("p",[s._v("可以为前 ES6 填补 "),e("code",{pre:!0},[s._v("Number.isInteger(..)")]),s._v("：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("isInteger")]),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("isInteger")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("num")]),s._v(") {\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" num == "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"number"')]),s._v(" && num % "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" == "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n\t};\n}\n")])]),e("p",[s._v("要测试一个值是否是 "),e("em",[s._v("安全整数")]),s._v("，使用 ES6 定义的 "),e("code",{pre:!0},[s._v("Number.isSafeInteger(..)")]),s._v("：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isSafeInteger")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("MAX_SAFE_INTEGER")]),s._v(" );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isSafeInteger")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Math")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("pow")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("53")]),s._v(" ) );\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isSafeInteger")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Math")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("pow")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("53")]),s._v(" ) - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" );\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("可以为前 ES6 浏览器填补 "),e("code",{pre:!0},[s._v("Number.isSafeInteger(..)")]),s._v("：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("isSafeInteger")]),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("isSafeInteger")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("num")]),s._v(") {\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isInteger")]),s._v("( num ) &&\n\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Math")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("abs")]),s._v("( num ) <= "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("MAX_SAFE_INTEGER")]),s._v(";\n\t};\n}\n")])]),e("h3",[s._v("32位（有符号）整数")]),e("p",[s._v("虽然整数可以安全地最大达到约九万亿（53比特），但有一些数字操作（比如位操作符）是仅仅为32位 "),e("code",{pre:!0},[s._v("number")]),s._v(" 定义的，所以对于被这样使用的 "),e("code",{pre:!0},[s._v("number")]),s._v(" 来说，“安全范围”一定会小得多。")]),e("p",[s._v("这个范围是从 "),e("code",{pre:!0},[s._v("Math.pow(-2,31)")]),s._v("（"),e("code",{pre:!0},[s._v("-2147483648")]),s._v("，大约-21亿）到 "),e("code",{pre:!0},[s._v("Math.pow(2,31)-1")]),s._v("（"),e("code",{pre:!0},[s._v("2147483647")]),s._v("，大约+21亿）。")]),e("p",[s._v("要强制 "),e("code",{pre:!0},[s._v("a")]),s._v(" 中的 "),e("code",{pre:!0},[s._v("number")]),s._v(" 值是32位有符号整数，使用 "),e("code",{pre:!0},[s._v("a | 0")]),s._v("。这可以工作是因为 "),e("code",{pre:!0},[s._v("|")]),s._v(" 位操作符仅仅对32位值起作用（意味着它可以只关注32位，而其他的位将被丢掉）。而且，和 0 进行“或”的位操作实质上是什么也不做。")]),e("p",[e("strong",[s._v("注意：")]),s._v(" 特定的特殊值（我们将在下一节讨论），比如 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 和 "),e("code",{pre:!0},[s._v("Infinity")]),s._v(" 不是“32位安全”的，当这些值被传入位操作符时将会通过一个抽象操作 "),e("code",{pre:!0},[s._v("ToInt32")]),s._v("（见第四章）并为了位操作而简单地变成 "),e("code",{pre:!0},[s._v("+0")]),s._v(" 值。")]),e("h2",[s._v("特殊值")]),e("p",[s._v("在各种类型中散布着一些特殊值，需要 "),e("em",[s._v("警惕")]),s._v(" 的 JS 开发者小心，并正确使用。")]),e("h3",[s._v("不是值的值")]),e("p",[s._v("对于 "),e("code",{pre:!0},[s._v("undefined")]),s._v(" 类型来说，有且仅有一个值："),e("code",{pre:!0},[s._v("undefined")]),s._v("。对于 "),e("code",{pre:!0},[s._v("null")]),s._v(" 类型来说，有且仅有一个值："),e("code",{pre:!0},[s._v("null")]),s._v("。所以对它们而言，这些文字既是它们的类型也是它们的值。")]),e("p",[e("code",{pre:!0},[s._v("undefined")]),s._v(" 和 "),e("code",{pre:!0},[s._v("null")]),s._v(" 作为“空”值或者“没有”值，经常被认为是可以互换的。另一些开发者偏好于使用微妙的区别将它们区分开。举例来讲：")]),e("ul",[e("li",[e("code",{pre:!0},[s._v("null")]),s._v(" 是一个空值")]),e("li",[e("code",{pre:!0},[s._v("undefined")]),s._v(" 是一个丢失的值")])]),e("p",[s._v("或者：")]),e("ul",[e("li",[e("code",{pre:!0},[s._v("undefined")]),s._v(" 还没有值")]),e("li",[e("code",{pre:!0},[s._v("null")]),s._v(" 曾经有过值但现在没有")])]),e("p",[s._v("不管你选择如何“定义”和使用这两个值，"),e("code",{pre:!0},[s._v("null")]),s._v(" 是一个特殊的关键字，不是一个标识符，因此你不能将它作为一个变量对待来给它赋值（为什么你要给它赋值呢？！）。然而，"),e("code",{pre:!0},[s._v("undefined")]),s._v("（不幸地）"),e("em",[s._v("是")]),s._v(" 一个标识符。噢。")]),e("h3",[s._v("Undefined")]),e("p",[s._v("在非 "),e("code",{pre:!0},[s._v("strict")]),s._v(" 模式下，给在全局上提供的 "),e("code",{pre:!0},[s._v("undefined")]),s._v(" 标识符赋一个值实际上是可能的（虽然这是一个非常不好的做法！）：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 非常差劲儿的主意！")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("();\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"use strict"')]),s._v(";\n\t"),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError!")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("();\n")])]),e("p",[s._v("但是，在非 "),e("code",{pre:!0},[s._v("strict")]),s._v(" 模式和 "),e("code",{pre:!0},[s._v("strict")]),s._v(" 模式下，你可以创建一个名叫 "),e("code",{pre:!0},[s._v("undefined")]),s._v(" 局部变量。但这又是一个很差劲儿的主意！")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"use strict"')]),s._v(";\n\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\t"),e("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("();\n")])]),e("p",[e("strong",[s._v("朋友永远不让朋友覆盖 "),e("code",{pre:!0},[s._v("undefined")]),s._v("。")])]),e("h4",[e("code",{pre:!0},[s._v("void")]),s._v(" 操作符")]),e("p",[s._v("虽然 "),e("code",{pre:!0},[s._v("undefined")]),s._v(" 是一个持有内建的值 "),e("code",{pre:!0},[s._v("undefined")]),s._v(" 的内建标识符（除非被修改 —— 见上面的讨论！），另一个得到这个值的方法是 "),e("code",{pre:!0},[s._v("void")]),s._v(" 操作符。")]),e("p",[s._v("表达式 "),e("code",{pre:!0},[s._v("void __")]),s._v(" 会“躲开”任何值，所以这个表达式的结果总是值 "),e("code",{pre:!0},[s._v("undefined")]),s._v("。它不会修改任何已经存在的值；只是确保不会有值从操作符表达式中返回来。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" a, a ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined 42")]),s._v("\n")])]),e("p",[s._v("从惯例上讲（大约是从 C 语言编程中发展而来），要通过使用 "),e("code",{pre:!0},[s._v("void")]),s._v(" 来独立表现值 "),e("code",{pre:!0},[s._v("undefined")]),s._v("，你可以使用 "),e("code",{pre:!0},[s._v("void 0")]),s._v("（虽然，很明显，"),e("code",{pre:!0},[s._v("void true")]),s._v(" 或者任何其他的 "),e("code",{pre:!0},[s._v("void")]),s._v(" 表达式都做同样的事情）。在 "),e("code",{pre:!0},[s._v("void 0")]),s._v("、"),e("code",{pre:!0},[s._v("void 1")]),s._v(" 和 "),e("code",{pre:!0},[s._v("undefined")]),s._v(" 之间没有实际上的区别。")]),e("p",[s._v("但是在几种其他的环境下 "),e("code",{pre:!0},[s._v("void")]),s._v(" 操作符可以十分有用：如果你需要确保一个表达式没有结果值（即便它有副作用）。")]),e("p",[s._v("举个例子：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomething")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 注意：`APP.ready` 是由我们的应用程序提供的")]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("APP")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("ready")]),s._v(") {\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 稍后再试一次")]),s._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("( doSomething, "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(" );\n\t}\n\n\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result;\n\n\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 做其他一些事情")]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 我们能立即执行吗？")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomething")]),s._v("()) {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 马上处理其他任务")]),s._v("\n}\n")])]),e("p",[s._v("这里，"),e("code",{pre:!0},[s._v("setTimeout(..)")]),s._v(" 函数返回一个数字值（时间间隔定时器的唯一标识符，用于取消它自己），但是我们想 "),e("code",{pre:!0},[s._v("void")]),s._v(" 它，这样我们函数的返回值不会在 "),e("code",{pre:!0},[s._v("if")]),s._v(" 语句上给出一个成立的误报。")]),e("p",[s._v("许多开发者宁愿将这些动作分开，这样的效用相同但不使用 "),e("code",{pre:!0},[s._v("void")]),s._v(" 操作符：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("APP")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("ready")]),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 稍后再试一次")]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("( doSomething, "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(" );\n\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(";\n}\n")])]),e("p",[s._v("一般来说，如果有那么一个地方，有一个值存在（来自某个表达式）而你发现这个值如果是 "),e("code",{pre:!0},[s._v("undefined")]),s._v(" 才有用，就使用 "),e("code",{pre:!0},[s._v("void")]),s._v(" 操作符。这可能在你的程序中不是非常常见，但如果在一些稀有的情况下你需要它，它就十分有用。")]),e("h3",[s._v("特殊的数字")]),e("p",[e("code",{pre:!0},[s._v("number")]),s._v(" 类型包含几种特殊值。我们将会仔细考察每一种。")]),e("h4",[s._v("不是数字的数字")]),e("p",[s._v("如果你不使用同为 "),e("code",{pre:!0},[s._v("number")]),s._v("（或者可以被翻译为十进制或十六进制的普通 "),e("code",{pre:!0},[s._v("number")]),s._v(" 的值）的两个操作数进行任何算数操作，那么操作的结果将失败而产生一个不合法的 "),e("code",{pre:!0},[s._v("number")]),s._v("，在这种情况下你将得到 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 值。")]),e("p",[e("code",{pre:!0},[s._v("NaN")]),s._v(" 在字面上代表“不是一个 "),e("code",{pre:!0},[s._v("number")]),s._v("（Not a Number）”，但是正如我们即将看到的，这种文字描述十分失败而且容易误导人。将 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 考虑为“不合法数字”，“失败的数字”，甚至是“坏掉的数字”都要比“不是一个数字”准确得多。")]),e("p",[s._v("举例来说：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" / "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// NaN")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" a === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"number"')]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("换句话说：“‘不是一个数字’的类型是‘数字’”！为这使人糊涂的名字和语义欢呼吧。")]),e("p",[e("code",{pre:!0},[s._v("NaN")]),s._v(" 是一种“哨兵值”（一个被赋予了特殊意义的普通的值），它代表 "),e("code",{pre:!0},[s._v("number")]),s._v(" 集合内的一种特殊的错误情况。这种错误情况实质上是：“我试着进行数学操作但是失败了，而这就是失败的 "),e("code",{pre:!0},[s._v("number")]),s._v(" 结果。”")]),e("p",[s._v("那么，如果你有一个值存在某个变量中，而且你想要测试它是否是这个特殊的失败数字 "),e("code",{pre:!0},[s._v("NaN")]),s._v("，你也许认为你可以直接将它与 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 本身比较，就像你能对其它的值做的那样，比如 "),e("code",{pre:!0},[s._v("null")]),s._v(" 和 "),e("code",{pre:!0},[s._v("undefined")]),s._v("。不是这样。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" / "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\n\na == "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Na")]),s._v("N;\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\na === "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Na")]),s._v("N;\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("p",[e("code",{pre:!0},[s._v("NaN")]),s._v(" 是一个非常特殊的值，它从来不会等于另一个 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 值（也就是，它从来不等于它自己）。实际上，它是唯一一个不具有反射性的值（没有恒等性 "),e("code",{pre:!0},[s._v("x === x")]),s._v("）。所以，"),e("code",{pre:!0},[s._v("NaN !== NaN")]),s._v("。有点奇怪，对吧？")]),e("p",[s._v("那么，如果不能与 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 进行比较（因为这种比较将总是失败），我们该如何测试它呢？")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" / "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("isNaN")]),s._v("( a ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("够简单的吧？我们使用称为 "),e("code",{pre:!0},[s._v("isNaN(..)")]),s._v(" 的内建全局工具，它告诉我们这个值是否是 "),e("code",{pre:!0},[s._v("NaN")]),s._v("。问题解决了！")]),e("p",[s._v("别高兴得太早。")]),e("p",[e("code",{pre:!0},[s._v("isNaN(..)")]),s._v(" 工具有一个重大缺陷。它似乎过于按照字面的意思（“不是一个数字”）去理解 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 的含义了 —— 它的工作基本上是：“测试这个传进来的东西是否不是一个 "),e("code",{pre:!0},[s._v("number")]),s._v(" 或者是一个 "),e("code",{pre:!0},[s._v("number")]),s._v("”。但这不是十分准确。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" / "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\n\na; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// NaN")]),s._v("\nb; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "foo"')]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("window")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("isNaN")]),s._v("( a ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("window")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("isNaN")]),s._v("( b ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true -- 噢!")]),s._v("\n")])]),e("p",[s._v("很明显，"),e("code",{pre:!0},[s._v('"foo"')]),s._v(" 根本 "),e("em",[s._v("不是一个 "),e("code",{pre:!0},[s._v("number")])]),s._v("，但它也绝不是一个 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 值！这个 bug 从最开始的时候就存在于 JS 中了（存在超过了十九年的坑）。")]),e("p",[s._v("在 ES6 中，终于提供了一个替代它的工具："),e("code",{pre:!0},[s._v("Number.isNaN(..)")]),s._v("。有一个简单的填补，可以让你即使是在前 ES6 的浏览器中安全地检查 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 值：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("isNaN")]),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("isNaN")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n")]),s._v(") {\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" (\n\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" n === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"number"')]),s._v(" &&\n\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("window")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("isNaN")]),s._v("( n )\n\t\t);\n\t};\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" / "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("isNaN")]),s._v("( a ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("isNaN")]),s._v("( b ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false -- 咻!")]),s._v("\n")])]),e("p",[s._v("实际上，通过利用 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 与它自己不相等这个特殊的事实，我们可以更简单地实现 "),e("code",{pre:!0},[s._v("Number.isNaN(..)")]),s._v(" 的填补。在整个语言中 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 是唯一一个这样的值；其他的值都总是 "),e("strong",[s._v("等于它自己")]),s._v("。")]),e("p",[s._v("所以：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("isNaN")]),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("isNaN")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n")]),s._v(") {\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" n !== n;\n\t};\n}\n")])]),e("p",[s._v("怪吧？但是好用！")]),e("p",[s._v("不管有意还是无意，在许多真实世界的 JS 程序中 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 可能是一个现实的问题。使用 "),e("code",{pre:!0},[s._v("Number.isNaN(..)")]),s._v("（或者它的填补）这样的可靠测试来正确地识别它们是一个非常好的主意。")]),e("p",[s._v("如果你正在程序中仅使用 "),e("code",{pre:!0},[s._v("isNaN(..)")]),s._v("，悲惨的现实是你的程序 "),e("em",[s._v("有 bug")]),s._v("，即便是你还没有被它咬到！")]),e("h4",[s._v("无穷")]),e("p",[s._v("来自于像 C 这样的传统编译型语言的开发者，可能习惯于看到编译器错误或者是运行时异常，比如对这样一个操作给出的“除数为 0”：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" / "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n")])]),e("p",[s._v("然而在 JS 中，这个操作是明确定义的，而且它的结果是值 "),e("code",{pre:!0},[s._v("Infinity")]),s._v("（也就是 "),e("code",{pre:!0},[s._v("Number.POSITIVE_INFINITY")]),s._v("）。意料之中的是：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" / "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Infinity")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = -"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" / "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// -Infinity")]),s._v("\n")])]),e("p",[s._v("如你所见，"),e("code",{pre:!0},[s._v("-Infinity")]),s._v("（也就是 "),e("code",{pre:!0},[s._v("Number.NEGATIVE_INFINITY")]),s._v("）是从任一个被除数为负（不是两个都是负数！）的除 0 操作得来的。")]),e("p",[s._v("JS 使用有限的数字表现形式（IEEE 754 浮点，我们早先讨论过），所以和单纯的数学相比，它看起来甚至在做加法和减法这样的操作时都有可能溢出，这样的情况下你将会得到 "),e("code",{pre:!0},[s._v("Infinity")]),s._v(" 或 "),e("code",{pre:!0},[s._v("-Infinity")]),s._v("。")]),e("p",[s._v("例如：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("MAX_VALUE")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1.7976931348623157e+308")]),s._v("\na + a;\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Infinity")]),s._v("\na + "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Math")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("pow")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("970")]),s._v(" );\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Infinity")]),s._v("\na + "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Math")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("pow")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("969")]),s._v(" );\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1.7976931348623157e+308")]),s._v("\n")])]),e("p",[s._v("根据语言规范，如果一个像加法这样的操作得到一个太大而不能表示的值，IEEE 754 “就近舍入”模式将会指明结果应该是什么。所以粗略的意义上，"),e("code",{pre:!0},[s._v("Number.MAX_VALUE + Math.pow( 2, 969 )")]),s._v(" 比起 "),e("code",{pre:!0},[s._v("Infinity")]),s._v(" 更接近于 "),e("code",{pre:!0},[s._v("Number.MAX_VALUE")]),s._v("，所以它“向下舍入”，而 "),e("code",{pre:!0},[s._v("Number.MAX_VALUE + Math.pow( 2, 970 )")]),s._v(" 距离 "),e("code",{pre:!0},[s._v("Infinity")]),s._v(" 更近，所以它“向上舍入”。")]),e("p",[s._v("如果你对此考虑的太多，它会使你头疼的。所以别想了。我是认真的，停！")]),e("p",[s._v("一旦你溢出了任意一个 "),e("em",[s._v("无限值")]),s._v("，那么，就没有回头路了。换句最有诗意的话说，你可以从有限迈向无限，但不能从无限回归有限。")]),e("p",[s._v("“无限除以无限等于什么”，这简直是一个哲学问题。我们幼稚的大脑可能会说“1”或“无限”。事实表明它们都不对。在数学上和在 JavaScript 中，"),e("code",{pre:!0},[s._v("Infinity / Infinity")]),s._v(" 不是一个有定义的操作。在 JS 中，它的结果为 "),e("code",{pre:!0},[s._v("NaN")]),s._v("。")]),e("p",[s._v("一个有限的正 "),e("code",{pre:!0},[s._v("number")]),s._v(" 除以 "),e("code",{pre:!0},[s._v("Infinity")]),s._v(" 呢？简单！"),e("code",{pre:!0},[s._v("0")]),s._v("。那一个有限的负 "),e("code",{pre:!0},[s._v("number")]),s._v(" 处理 "),e("code",{pre:!0},[s._v("Infinity")]),s._v(" 呢？接着往下读！")]),e("h4",[s._v("零")]),e("p",[s._v("虽然这可能使有数学头脑的读者困惑，但 JavaScript 拥有普通的零 "),e("code",{pre:!0},[s._v("0")]),s._v("（也称为正零 "),e("code",{pre:!0},[s._v("+0")]),s._v("） "),e("em",[s._v("和")]),s._v(" 一个负零 "),e("code",{pre:!0},[s._v("-0")]),s._v("。在我们讲解为什么 "),e("code",{pre:!0},[s._v("-0")]),s._v(" 存在之前，我们应该考察 JS 如何处理它，因为它可能十分令人困惑。")]),e("p",[s._v("除了使用字面量 "),e("code",{pre:!0},[s._v("-0")]),s._v(" 指定，负的零还可以从特定的数学操作中得出。比如：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" / -"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// -0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" * -"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// -0")]),s._v("\n")])]),e("p",[s._v("加法和减法无法得出负零。")]),e("p",[s._v("在开发者控制台中考察一个负的零，经常显示为 "),e("code",{pre:!0},[s._v("-0")]),s._v("，然而直到最近这才是一个常见情况，所以一些你可能遇到的老版本浏览器也许依然将它报告为 "),e("code",{pre:!0},[s._v("0")]),s._v("。")]),e("p",[s._v("但是根据语言规范，如果你试着将一个负零转换为字符串，它将总会被报告为 "),e("code",{pre:!0},[s._v('"0"')]),s._v("。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" / -"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 至少（有些浏览器）控制台是对的")]),s._v("\na;\t\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// -0")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 但是语言规范坚持要向你撒谎！")]),s._v("\na."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toString")]),s._v("();\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "0"')]),s._v("\na + "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(";\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "0"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("String")]),s._v("( a );\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "0"')]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 奇怪的是，就连 JSON 也加入了骗局之中")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("JSON")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("stringify")]),s._v("( a );\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "0"')]),s._v("\n")])]),e("p",[s._v("有趣的是，反向操作（从 "),e("code",{pre:!0},[s._v("string")]),s._v(" 到 "),e("code",{pre:!0},[s._v("number")]),s._v("）不会撒谎：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("+"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"-0"')]),s._v(";\t\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// -0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"-0"')]),s._v(" );\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// -0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("JSON")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("parse")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"-0"')]),s._v(" );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// -0")]),s._v("\n")])]),e("p",[e("strong",[s._v("警告：")]),s._v(" 当你观察的时候，"),e("code",{pre:!0},[s._v("JSON.stringify( -0 )")]),s._v(" 产生 "),e("code",{pre:!0},[s._v('"0"')]),s._v(" 显得特别奇怪，因为它与反向操作不符："),e("code",{pre:!0},[s._v('JSON.parse( "-0" )')]),s._v(" 将像你期望地那样报告"),e("code",{pre:!0},[s._v("-0")]),s._v("。")]),e("p",[s._v("除了一个负零的字符串化会欺骗性地隐藏它实际的值外，比较操作符也被设定为（有意地） "),e("em",[s._v("要说谎")]),s._v("。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" / -"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n\na == b;\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n-"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" == "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n\na === b;\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n-"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" > -"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\na > b;\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("p",[s._v("很明显，如果你想在你的代码中区分 "),e("code",{pre:!0},[s._v("-0")]),s._v(" 和 "),e("code",{pre:!0},[s._v("0")]),s._v("，你就不能仅依靠开发者控制台的输出，你必须更聪明一些：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isNegZero")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n")]),s._v(") {\n\tn = "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("( n );\n\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" (n === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") && ("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" / n === -"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Infinity")]),s._v(");\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isNegZero")]),s._v("( -"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" );\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isNegZero")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" / -"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isNegZero")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" );\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("p",[s._v("那么，除了学院派的细节以外，我们为什么需要一个负零呢？")]),e("p",[s._v("在一些应用程序中，开发者使用值的大小来表示一部分信息（比如动画中每一帧的速度），而这个 "),e("code",{pre:!0},[s._v("number")]),s._v(" 的符号来表示另一部分信息（比如移动的方向）。")]),e("p",[s._v("在这些应用程序中，举例来说，如果一个变量的值变成了 0，而它丢失了符号，那么你就丢失了它是从哪个方向移动到 0 的信息。保留零的符号避免了潜在的意外信息丢失。")]),e("h3",[s._v("特殊等价")]),e("p",[s._v("正如我们上面看到的，当使用等价性比较时，值 "),e("code",{pre:!0},[s._v("NaN")]),s._v(" 和值 "),e("code",{pre:!0},[s._v("-0")]),s._v(" 拥有特殊的行为。"),e("code",{pre:!0},[s._v("NaN")]),s._v(" 永远不会和自己相等，所以你不得不使用 ES6 的 "),e("code",{pre:!0},[s._v("Number.isNaN(..)")]),s._v("（或者它的填补）。相似地，"),e("code",{pre:!0},[s._v("-0")]),s._v(" 撒谎并假装它和普通的正零相等（即使使用 "),e("code",{pre:!0},[s._v("===")]),s._v(" 严格等价 —— 见第四章），所以你不得不使用我们上面建议的某些 "),e("code",{pre:!0},[s._v("isNegZero(..)")]),s._v(" 黑科技工具。")]),e("p",[s._v("在 ES6 中，有一个新工具可以用于测试两个值的绝对等价性，而没有任何这些例外。它称为 "),e("code",{pre:!0},[s._v("Object.is(..)")]),s._v(":")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" / "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = -"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" * "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("is")]),s._v("( a, "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Na")]),s._v("N );\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("is")]),s._v("( b, -"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" );\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("is")]),s._v("( b, "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" );\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// false")]),s._v("\n")])]),e("p",[s._v("对于前 ES6 环境，这是一个相当简单的 "),e("code",{pre:!0},[s._v("Object.is(..)")]),s._v(" 填补：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("is")]),s._v(") {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("is")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v1, v2")]),s._v(") {\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 测试 `-0`")]),s._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (v1 === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" && v2 === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" / v1 === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" / v2;\n\t\t}\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 测试 `NaN`")]),s._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (v1 !== v1) {\n\t\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" v2 !== v2;\n\t\t}\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 其他情况")]),s._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" v1 === v2;\n\t};\n}\n")])]),e("p",[e("code",{pre:!0},[s._v("Object.is(..)")]),s._v(" 可能不应当用于那些 "),e("code",{pre:!0},[s._v("==")]),s._v(" 或 "),e("code",{pre:!0},[s._v("===")]),s._v(" 已知 "),e("em",[s._v("安全")]),s._v(" 的情况（见第四章“强制转换”），因为这些操作符可能高效得多，并且更惯用/常见。"),e("code",{pre:!0},[s._v("Object.is(..)")]),s._v(" 很大程度上是为这些特殊的等价情况准备的。")]),e("h2",[s._v("值与引用")]),e("p",[s._v("在其他许多语言中，根据你使用的语法，值可以通过值拷贝，也可以通过引用拷贝来赋予/传递。")]),e("p",[s._v("比如，在 C++ 中如果你想要把一个 "),e("code",{pre:!0},[s._v("number")]),s._v(" 变量传递进一个函数，并使这个变量的值被更新，你可以用 "),e("code",{pre:!0},[s._v("int& myNum")]),s._v(" 这样的东西来声明函数参数，当你传入一个变量 "),e("code",{pre:!0},[s._v("x")]),s._v(" 时，"),e("code",{pre:!0},[s._v("myNum")]),s._v(" 将是一个 "),e("strong",[s._v("指向 "),e("code",{pre:!0},[s._v("x")]),s._v(" 的引用")]),s._v("；引用就像一个特殊形式的指针，你得到的是一个指向另一个变量的指针（像一个 "),e("em",[s._v("别名（alias）")]),s._v("） 。如果你没有声明一个引用参数，被传入的值将 "),e("em",[s._v("总是")]),s._v(" 被拷贝的，就算它是一个复杂的对象。")]),e("p",[s._v("在 JavaScript 中，没有指针，并且引用的工作方式有一点儿不同。你不能拥有一个从一个 JS 变量到另一个 JS 变量的引用。这是完全不可能的。")]),e("p",[s._v("JS 中的引用指向一个（共享的） "),e("strong",[s._v("值")]),s._v("，所以如果你有十个不同的引用，它们都总是同一个共享值的不同引用；"),e("strong",[s._v("它们没有一个是另一个的引用/指针。")])]),e("p",[s._v("另外，在 JavaScript 中，没有语法上的提示可以控制值和引用的赋值/传递。取而代之的是，值的 "),e("em",[s._v("类型")]),s._v(" 用来 "),e("em",[s._v("唯一")]),s._v(" 控制值是通过值拷贝，还是引用拷贝来赋予。")]),e("p",[s._v("让我们来展示一下：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = a; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// `b` 总是 `a` 中的值的拷贝")]),s._v("\nb++;\na; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nb; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" c = ["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" d = c; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// `d` 是共享值 `[1,2,3]` 的引用")]),s._v("\nd."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" );\nc; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3,4]")]),s._v("\nd; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3,4]")]),s._v("\n")])]),e("p",[s._v("简单值（也叫基本标量） "),e("em",[s._v("总是")]),s._v(" 通过值拷贝来赋予/传递："),e("code",{pre:!0},[s._v("null")]),s._v("、"),e("code",{pre:!0},[s._v("undefined")]),s._v("、"),e("code",{pre:!0},[s._v("string")]),s._v("、"),e("code",{pre:!0},[s._v("number")]),s._v("、 "),e("code",{pre:!0},[s._v("boolean")]),s._v("、以及 ES6 的 "),e("code",{pre:!0},[s._v("symbol")]),s._v("。")]),e("p",[s._v("复合值 —— "),e("code",{pre:!0},[s._v("object")]),s._v("（包括 "),e("code",{pre:!0},[s._v("array")]),s._v("，和所有的对象包装器 —— 见第三章）和 "),e("code",{pre:!0},[s._v("function")]),s._v(" —— "),e("em",[s._v("总是")]),s._v(" 在赋值或传递时创建一个引用的拷贝。")]),e("p",[s._v("在上面的代码段中，因为 "),e("code",{pre:!0},[s._v("2")]),s._v(" 是一个基本标量，"),e("code",{pre:!0},[s._v("a")]),s._v(" 持有一个这个值的初始拷贝，而 "),e("code",{pre:!0},[s._v("b")]),s._v(" 被赋予了这个值的另一个拷贝。当改变 "),e("code",{pre:!0},[s._v("b")]),s._v(" 时，你根本没有在改变 "),e("code",{pre:!0},[s._v("a")]),s._v(" 中的值。")]),e("p",[s._v("但 "),e("strong",[e("code",{pre:!0},[s._v("c")]),s._v(" 和 "),e("code",{pre:!0},[s._v("d")]),s._v(" 两个都")]),s._v(" 是同一个共享的值 "),e("code",{pre:!0},[s._v("[1,2,3]")]),s._v(" 的分离的引用。重要的是，"),e("code",{pre:!0},[s._v("c")]),s._v(" 和 "),e("code",{pre:!0},[s._v("d")]),s._v(" 对值 "),e("code",{pre:!0},[s._v("[1,2,3]")]),s._v(" 的“拥有”程度上是一样的 —— 它们只是同一个值的对等引用。所以，不管使用哪一个引用去修改（"),e("code",{pre:!0},[s._v(".push(4)")]),s._v("）实际上共享的 "),e("code",{pre:!0},[s._v("array")]),s._v(" 值本身，影响的仅仅是这一个共享值，而且这两个引用将会指向新修改的值 "),e("code",{pre:!0},[s._v("[1,2,3,4]")]),s._v("。")]),e("p",[s._v("因为引用指向的是值本身而不是变量，你不能使用一个引用来改变另一个引用所指向的值：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = ["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = a;\na; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3]")]),s._v("\nb; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3]")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 稍后")]),s._v("\nb = ["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v("];\na; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3]")]),s._v("\nb; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [4,5,6]")]),s._v("\n")])]),e("p",[s._v("当我们做赋值操作 "),e("code",{pre:!0},[s._v("b = [4,5,6]")]),s._v(" 时，我们做的事情绝对不会对 "),e("code",{pre:!0},[s._v("a")]),s._v(" 所指向的 "),e("em",[s._v("位置")]),s._v("（"),e("code",{pre:!0},[s._v("[1,2,3]")]),s._v("）造成任何影响。如果那可能的话，"),e("code",{pre:!0},[s._v("b")]),s._v(" 就会是 "),e("code",{pre:!0},[s._v("a")]),s._v(" 的指针而不是这个 "),e("code",{pre:!0},[s._v("array")]),s._v(" 的引用 —— 但是这样的能力在 JS 中是不存在的！")]),e("p",[s._v("这样的困惑最常见于函数参数：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v(") {\n\tx."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" );\n\tx; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3,4]")]),s._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 稍后")]),s._v("\n\tx = ["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v("];\n\tx."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("7")]),s._v(" );\n\tx; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [4,5,6,7]")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = ["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("( a );\n\na; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3,4] 不是 [4,5,6,7]")]),s._v("\n")])]),e("p",[s._v("当我们传入参数 "),e("code",{pre:!0},[s._v("a")]),s._v(" 时，它将一份 "),e("code",{pre:!0},[s._v("a")]),s._v(" 引用的拷贝赋值给 "),e("code",{pre:!0},[s._v("x")]),s._v("。"),e("code",{pre:!0},[s._v("x")]),s._v(" 和 "),e("code",{pre:!0},[s._v("a")]),s._v(" 是指向相同的 "),e("code",{pre:!0},[s._v("[1,2,3]")]),s._v(" 的不同引用。现在，在函数内部，我们可以使用这个引用来改变值本身（"),e("code",{pre:!0},[s._v("push(4)")]),s._v("）。但是当我们进行赋值操作 "),e("code",{pre:!0},[s._v("x = [4,5,6]")]),s._v(" 时，不可能影响原来的引用 "),e("code",{pre:!0},[s._v("a")]),s._v(" 所指向的东西 —— 它仍然指向（已经被修改了的）值 "),e("code",{pre:!0},[s._v("[1,2,3,4]")]),s._v("。")]),e("p",[s._v("没有办法可以使用 "),e("code",{pre:!0},[s._v("x")]),s._v(" 引用来改变 "),e("code",{pre:!0},[s._v("a")]),s._v(" 指向哪里。我们只能修改 "),e("code",{pre:!0},[s._v("a")]),s._v(" 和 "),e("code",{pre:!0},[s._v("x")]),s._v(" 共通指向的那个共享值的内容。")]),e("p",[s._v("要想改变 "),e("code",{pre:!0},[s._v("a")]),s._v(" 来使它拥有内容为 "),e("code",{pre:!0},[s._v("[4,5,6,7]")]),s._v(" 的值，你不能创建一个新的 "),e("code",{pre:!0},[s._v("array")]),s._v(" 并赋值 —— 你必须修改现存的 "),e("code",{pre:!0},[s._v("array")]),s._v(" 值：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v(") {\n\tx."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" );\n\tx; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3,4]")]),s._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 稍后")]),s._v("\n\tx."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 原地清空既存的数组")]),s._v("\n\tx."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("( "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("7")]),s._v(" );\n\tx; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [4,5,6,7]")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = ["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(","),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("];\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("( a );\n\na; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [4,5,6,7] 不是 [1,2,3,4]")]),s._v("\n")])]),e("p",[s._v("正如你看到的，"),e("code",{pre:!0},[s._v("x.length = 0")]),s._v(" 和 "),e("code",{pre:!0},[s._v("x.push(4,5,6,7)")]),s._v(" 没有创建一个新的 "),e("code",{pre:!0},[s._v("array")]),s._v("，但是修改了现存的共享 "),e("code",{pre:!0},[s._v("array")]),s._v("。所以理所当然地，"),e("code",{pre:!0},[s._v("a")]),s._v(" 引用了新的内容 "),e("code",{pre:!0},[s._v("[4,5,6,7]")]),s._v("。")]),e("p",[s._v("记住：你不能直接控制/覆盖值拷贝和引用拷贝的行为 —— 这些语义是完全由当前值的类型来控制的。")]),e("p",[s._v("为了实质上地通过值拷贝传递一个复合值（比如一个 "),e("code",{pre:!0},[s._v("array")]),s._v("），你需要手动制造一个它的拷贝，使被传递的引用不指向原来的值。比如：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("( a."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("slice")]),s._v("() );\n")])]),e("p",[s._v("不带参数的 "),e("code",{pre:!0},[s._v("slice(..)")]),s._v(" 方法默认地为这个 "),e("code",{pre:!0},[s._v("array")]),s._v(" 制造一个全新的（浅）拷贝。所以，我们传入的引用仅指向拷贝的 "),e("code",{pre:!0},[s._v("array")]),s._v("，这样 "),e("code",{pre:!0},[s._v("foo(..)")]),s._v(" 不会影响 "),e("code",{pre:!0},[s._v("a")]),s._v(" 的内容。")]),e("p",[s._v("反之 —— 传递一个基本标量值，使它的值的变化可见，就像引用那样 —— 你不得不将这个值包装在另一个可以通过引用拷贝来传递的复合值中（"),e("code",{pre:!0},[s._v("object")]),s._v("、"),e("code",{pre:!0},[s._v("array")]),s._v(" 等等）：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("wrapper")]),s._v(") {\n\twrapper."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(";\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("( obj );\n\nobj."),e("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 42")]),s._v("\n")])]),e("p",[s._v("这里，"),e("code",{pre:!0},[s._v("obj")]),s._v(" 作为基本标量属性 "),e("code",{pre:!0},[s._v("a")]),s._v(" 的包装。当传递给 "),e("code",{pre:!0},[s._v("foo(..)")]),s._v(" 时，一个 "),e("code",{pre:!0},[s._v("obj")]),s._v(" 引用的拷贝被传入并设置给 "),e("code",{pre:!0},[s._v("wrapper")]),s._v(" 参数。我们现在可以使用 "),e("code",{pre:!0},[s._v("wrapper")]),s._v(" 引用来访问这个共享的对象，并更新它的值。在函数完成时，"),e("code",{pre:!0},[s._v("obj.a")]),s._v(" 将被更新为值 "),e("code",{pre:!0},[s._v("42")]),s._v("。")]),e("p",[s._v("你可能会遇到这样的情况，如果你想要传入一个像 "),e("code",{pre:!0},[s._v("2")]),s._v(" 这样的基本标量值的引用，你可以将这个值包装在它的 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 对象包装器中（见第三章）。")]),e("p",[s._v("这个 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 对象的引用的拷贝 "),e("em",[s._v("将")]),s._v(" 会被传递给函数是事实，但不幸的是，和你可能期望的不同，拥有一个共享独享的引用不会给你修改这个共享的基本值的能力：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v(") {\n\tx = x + "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n\tx; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Number")]),s._v("( a ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 或等价的 `Object(a)`")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("( b );\n"),e("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( b ); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2, 不是 3")]),s._v("\n")])]),e("p",[s._v("这里的问题是，底层的基本标量值是 "),e("em",[s._v("不可变的")]),s._v("（"),e("code",{pre:!0},[s._v("String")]),s._v(" 和 "),e("code",{pre:!0},[s._v("Boolean")]),s._v(" 也一样）。如果一个 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 对象持有一个基本标量值 "),e("code",{pre:!0},[s._v("2")]),s._v("，那么这个 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 对象就永远不能再持有另一个值；你只能用一个不同的值创建一个全新的 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 对象。")]),e("p",[s._v("当 "),e("code",{pre:!0},[s._v("x")]),s._v(" 用于表达式 "),e("code",{pre:!0},[s._v("x + 1")]),s._v(" 时，底层的基本标量值 "),e("code",{pre:!0},[s._v("2")]),s._v(" 被自动地从 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 对象中开箱（抽出），所以 "),e("code",{pre:!0},[s._v("x = x + 1")]),s._v(" 这一行很微妙地将 "),e("code",{pre:!0},[s._v("x")]),s._v(" 从一个共享的 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 对象的引用，改变为仅持有加法操作 "),e("code",{pre:!0},[s._v("2 + 1")]),s._v(" 的结果 "),e("code",{pre:!0},[s._v("3")]),s._v(" 的基本标量值。因此，外面的 "),e("code",{pre:!0},[s._v("b")]),s._v(" 仍然引用原来的未被改变/不可变的，持有 "),e("code",{pre:!0},[s._v("2")]),s._v(" 的 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 对象。")]),e("p",[s._v("你 "),e("em",[s._v("可以")]),s._v(" 在 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 对象上添加属性（只是不要改变它内部的基本值），所以你可间接地通过这些额外的属性交换信息。")]),e("p",[s._v("不过，这可不太常见；对大多数开发者来说这可能不是一个好的做法。")]),e("p",[s._v("与其这样使用 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 包装器对象，使用早先的代码段中那样的手动对象包装器（"),e("code",{pre:!0},[s._v("obj")]),s._v("）要好得多。这不是说像 "),e("code",{pre:!0},[s._v("Number")]),s._v(" 这样包装好的对象包装器没有用处 —— 而是说在大多数情况下，你可能应该优先使用基本标量值的形式。")]),e("p",[s._v("引用十分强大，但是有时候它们碍你的事儿，而有时你会在它们不存在时需要它们。你唯一可以用来控制引用与值拷贝的东西是值本身的类型，所以你必须通过你选用的值的类型来间接地影响赋值/传递行为。")]),e("h2",[s._v("复习")]),e("p",[s._v("在 JavaScript 中，"),e("code",{pre:!0},[s._v("array")]),s._v(" 仅仅是数字索引的集合，可以容纳任何类型的值。"),e("code",{pre:!0},[s._v("string")]),s._v(" 是某种“类 "),e("code",{pre:!0},[s._v("array")]),s._v("”，但它们有着不同的行为，如果你想要将它们作为 "),e("code",{pre:!0},[s._v("array")]),s._v(" 对待的话，必须要小心。JavaScript 中的数字既包括“整数”也包括浮点数。")]),e("p",[s._v("几种特殊值被定义在基本类型内部。")]),e("p",[e("code",{pre:!0},[s._v("null")]),s._v(" 类型只有一个值 "),e("code",{pre:!0},[s._v("null")]),s._v("，"),e("code",{pre:!0},[s._v("undefined")]),s._v(" 类型同样地只有 "),e("code",{pre:!0},[s._v("undefined")]),s._v(" 值。对于任何没有值存在的变量或属性，"),e("code",{pre:!0},[s._v("undefined")]),s._v(" 基本上是默认值。"),e("code",{pre:!0},[s._v("void")]),s._v(" 操作符允许你从任意另一个值中创建 "),e("code",{pre:!0},[s._v("undefined")]),s._v(" 值。")]),e("p",[e("code",{pre:!0},[s._v("number")]),s._v(" 包含几种特殊值，比如 "),e("code",{pre:!0},[s._v("NaN")]),s._v("（意为“不是一个数字”，但称为“非法数字”更合适）；"),e("code",{pre:!0},[s._v("+Infinity")]),s._v(" 和 "),e("code",{pre:!0},[s._v("-Infinity")]),s._v("；还有 "),e("code",{pre:!0},[s._v("-0")]),s._v("。")]),e("p",[s._v("简单基本标量（"),e("code",{pre:!0},[s._v("string")]),s._v("、"),e("code",{pre:!0},[s._v("number")]),s._v(" 等）通过值拷贝进行赋值/传递，而复合值（"),e("code",{pre:!0},[s._v("object")]),s._v(" 等）通过引用拷贝进行赋值/传递。引用与其他语言中的引用/指针不同 —— 它们从不指向其他的变量/引用，而仅指向底层的值。")])])])])}],!1,null,null,null);r.default=t.exports}}]);