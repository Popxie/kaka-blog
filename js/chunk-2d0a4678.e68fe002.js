(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d0a4678"],{"05fc":function(s,e,t){"use strict";t.r(e);var a=t("2877"),n=Object(a.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("section",[t("html",[t("head"),t("body",[t("h1",[s._v(".gitconfig 的基本配置")]),t("h2",[s._v("前言")]),t("p",[s._v("通常情况下当们在初次使用 Git 的时候，需要设置一些"),t("code",{pre:!0},[s._v("个人信息")]),s._v("&"),t("code",{pre:!0},[s._v("git alias")]),s._v("等，从而提高一些 git 方面的效率。")]),t("ul",[t("li",[t("p",[t("code",{pre:!0},[s._v("个人信息")])]),t("ul",[t("li",[s._v("个人邮箱")]),t("li",[s._v("用户名")]),t("li",[s._v("……")])]),t("p",[s._v("这样我们在 "),t("code",{pre:!0},[s._v("commit")]),s._v(" 的时候能把个人信息附带上")])]),t("li",[t("p",[t("code",{pre:!0},[s._v("git alias")]),s._v(" 别名")]),t("p",[s._v("配置以后可以用简短的命令代替默认命令，而且还可以自定义一些个性"),t("code",{pre:!0},[s._v("git <命令>")])])])]),t("h2",[s._v("寻找 .gitconfig 文件")]),t("blockquote",[t("p",[s._v("路径都是默认路径")])]),t("ul",[t("li",[t("p",[s._v("Mac:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("vim ~/.gitconfig\n")])])]),t("li",[t("p",[s._v("Windows:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("vim /c/Users/"),t("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${自己电脑的用户名}")]),s._v("/.gitconfig "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在Git Bash Here中才可以使用 vim")]),s._v("\n")])])])]),t("h2",[s._v("配置 .gitconfig 文件")]),t("p",[s._v("下面的 alias 是我个人习惯，可以根据自己的习惯进行修改")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("[user]\n  name = KaKa_Xie\n  email = mrxiehuaqiang@163.com\n["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("alias")]),s._v("]\n  sta = status\n  com = commit\n  mer = merge\n  reb = rebase\n  che = checkout\n  swi = switch\n  br = branch\n  unstage = reset HEAD --\n  last = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -1 HEAD\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# --pretty[=<format>],<format> can be one of oneline, short, medium, full, fuller, reference, email, raw")]),s._v("\n  lp = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" --pretty=oneline\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# %Cred: switch color to red;")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# %Creset: reset color;")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# %cI: committer date, strict ISO 8601 format")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# %cr: committer date, relative")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# %ae email")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# %s subject")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# %n newline")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# %C(...) color specification")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset <%ae>'")]),s._v("\n  lg = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" --color --graph --pretty=format:"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'%Cred%h%Creset%C(yellow)%d%Creset %s %Cgreen%ci'")]),s._v("\n  lg5 = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -5 --color --graph --pretty=format:"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'%Cred%h%Creset%C(yellow)%d%Creset %s %Cgreen%ci'")]),s._v("\n  lg10 = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -10 --color --graph --pretty=format:"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'%Cred%h%Creset%C(yellow)%d%Creset %s %Cgreen%ci %C(bold blue)<%an>'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# [color]")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# branch = auto")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# diff = auto")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# status = auto")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# ui = auto")]),s._v("\n\n[color "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"branch"')]),s._v("]\n  current = magenta\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("local")]),s._v(" = yellow\n  remote = cyan\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# git status 的颜色配置")]),s._v("\n[color "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"status"')]),s._v("]\n  changed = green   "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 已变更的文件")]),s._v("\n  added = yellow    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 已暂存的文件 git add .")]),s._v("\n  untracked = cyan  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 未跟踪的文件 新增的文件")]),s._v("\n\n[color "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"diff"')]),s._v("]\n  meta = yellow\n  frag = magenta bold\n  commit = yellow bold\n  old = red bold\n  new = green bold\n  whitespace = red reverse\n\n[color "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"diff-highlight"')]),s._v("]\n  oldNormal = red bold\n  oldHighlight = red bold 52\n  newNormal = green bold\n  newHighlight = green bold 22\n\n[core]\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# https://git-scm.com/book/zh/v2/自定义-Git-配置-Git")]),s._v("\n  excludesfile = /Users/"),t("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${用户名}")]),s._v("/.gitignore_global "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# git config --global core.excludesfile ~/.gitignore_global会自动生成路径")]),s._v("\n  ignorecase = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 开启敏感模式")]),s._v("\n  pager = less  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 分页器 默认是less")]),s._v("\n\n[pager]\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# branch, log, diff等支持paper")]),s._v("\n  branch = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 当启用了zsh shell之后 执行git相关操作（log,branch）时会进入vim模式，一旦按q退出以后，就会导致上次操作的查询的结果被清空.设置了这个以后就可以避免了")]),s._v("\n\n")])]),t("p",[s._v("git lg 效果如下：")]),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/24952644/127742626-4f5eebb6-e8ba-47e5-b4be-c94fa5cfea7e.png",alt:"14_git_lg"}})]),t("h2",[s._v("查看设置邮箱")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 全局设置")]),s._v("\ngit config --global user.name "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"kaka"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 设置Git的用户名")]),s._v("\ngit config --global user.email "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"kaka@xx.com"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 设置Git的邮箱")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 项目本地设置")]),s._v("\ngit config user.name "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"user2"')]),s._v("\ngit config user.email "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"gitlab@xx.com"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看")]),s._v("\ngit config --get-all user.name  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 获取所有的Git名字")]),s._v("\ngit config --get-all user.email "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 获取所有的Git邮箱")]),s._v("\ngit config --get user.name  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 获取本地git用户名")]),s._v("\n\ngit config --global  --list "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看当前用户（global）配置")]),s._v("\ngit config --"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("local")]),s._v("  --list  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看当前仓库配置信息")]),s._v("\ngit config --system --list  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看系统config")]),s._v("\n\ngit config --list   "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 会查询到全局跟项目本地的所有配置")]),s._v("\n")])]),t("h2",[s._v("友情提示")]),t("blockquote",[t("p",[s._v("之前有个项目后端把前端的项目文件路径给存起来了，以便动态注册路由，但是由于文件夹命名不规范(大驼峰)便改成了小驼峰，导致文件夹名字变更未被 git 当做变更而记录，最后就导致后端回来的路径跟实际项目路径不一致从而导致动态路由注册失败引发 bug！")])]),t("p",[t("strong",[s._v("git 默认"),t("code",{pre:!0},[s._v("不区分")]),s._v("文件名"),t("code",{pre:!0},[s._v("大小写")]),s._v("变化！！")])]),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/24952644/127742637-60a7e807-c8f1-4458-be5f-d3c8dbae1e39.jpg",alt:"23"}})]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 开启区分大小写")]),s._v("\ngit config core.ignorecase "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("\n")])]),t("h2",[s._v("如何使用使用"),t("code",{pre:!0},[s._v("git config")]),s._v("的文档提示")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("Config file location\n    --global              use global config file\n    --system              use system config file\n    --"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("local")]),s._v("               use repository config file\n    --worktree            use per-worktree config file\n    -f, --file <file>     use given config file\n    --blob <blob-id>      "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("read")]),s._v(" config from given blob object\n\nAction\n    --get                 get value: name [value-regex]\n    --get-all             get all values: key [value-regex]\n    --get-regexp          get values "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" regexp: name-regex [value-regex]\n    --get-urlmatch        get value specific "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" the URL: section[.var] URL\n    --replace-all         replace all matching variables: name value [value_regex]\n    --add                 add a new variable: name value\n    --"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("unset")]),s._v("               remove a variable: name [value-regex]\n    --unset-all           remove all matches: name [value-regex]\n    --rename-section      rename section: old-name new-name\n    --remove-section      remove a section: name\n    -l, --list            list all\n    -e, --edit            open an editor\n    --get-color           find the color configured: slot [default]\n    --get-colorbool       find the color setting: slot [stdout-is-tty]\n\nType\n    -t, --"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("type")]),s._v(" <>         value is given this "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("type")]),s._v("\n    --bool                value is "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"true"')]),s._v(" or "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"false"')]),s._v("\n    --int                 value is decimal number\n    --bool-or-int         value is --bool or --int\n    --bool-or-str         value is --bool or string\n    --path                value is a path (file or directory name)\n    --expiry-date         value is an expiry "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("date")]),s._v("\n\nOther\n    -z, --null            terminate values with NUL byte\n    --name-only           show variable names only\n    --includes            respect include directives on lookup\n    --show-origin         show origin of config (file, standard input, blob, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("command")]),s._v(" line)\n    --show-scope          show scope of config (worktree, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("local")]),s._v(", global, system, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("command")]),s._v(")\n    --default <value>     with --get, use default value when missing entry\n")])]),t("h3",[s._v("形式 1")]),t("ul",[t("li",[t("p",[s._v("通过 "),t("code",{pre:!0},[s._v("git config")]),s._v(" + "),t("code",{pre:!0},[s._v("Config file location")]),s._v(" + "),t("code",{pre:!0},[s._v("Action")]),s._v(" 的组合形式")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git config --system --list\n")])])])]),t("h3",[s._v("形式 2")]),t("ul",[t("li",[t("p",[s._v("通过 "),t("code",{pre:!0},[s._v("git config")]),s._v(" + "),t("code",{pre:!0},[s._v("Action")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git config --get core.ignorecase\n")])])])]),t("h3",[s._v("形式 n")]),t("p",[s._v("....")]),t("h2",[s._v("参考文献")]),t("p",[t("a",{attrs:{href:"https://git-scm.com/docs/git-config"}},[s._v("git-config")]),t("br"),t("a",{attrs:{href:"https://git-scm.com/docs/pretty-formats"}},[s._v("pretty-formats")]),t("br"),t("a",{attrs:{href:"https://git-scm.com/docs/pretty-options"}},[s._v("pretty-options")])])])])])}],!1,null,null,null);e.default=n.exports}}]);