(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d213ae9"],{ae5d:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("html",[t("head"),t("body",[t("h1",[s._v("你不懂JS: "),t("em",[s._v("this")]),s._v(" 与对象原型")]),t("h1",[s._v("第二章: "),t("code",{pre:!0},[s._v("this")]),s._v(" 豁然开朗！")]),t("p",[s._v("在第一章中，我们摒弃了种种对 "),t("code",{pre:!0},[s._v("this")]),s._v(" 的误解，并且知道了 "),t("code",{pre:!0},[s._v("this")]),s._v(" 是一个完全根据"),t("strong",[s._v("调用点")]),s._v("（函数是如何被调用的）而为每次函数调用建立的绑定。")]),t("h2",[s._v("调用点（Call-site）")]),t("p",[s._v("为了理解 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定，我们不得不理解调用点：函数在代码中被调用的位置（"),t("strong",[s._v("不是被声明的位置")]),s._v("）。我们必须考察调用点来回答这个问题：这个 "),t("code",{pre:!0},[s._v("this")]),s._v(" 指向什么？")]),t("p",[s._v("一般来说寻找调用点就是：“找到一个函数是在哪里被调用的”，但它不总是那么简单，比如某些特定的编码模式会使 "),t("em",[s._v("真正的")]),s._v(" 调用点变得不那么明确。")]),t("p",[s._v("考虑 "),t("strong",[s._v("调用栈（call-stack）")]),s._v(" （使我们到达当前执行位置而被调用的所有方法的堆栈）是十分重要的。我们关心的调用点就位于当前执行中的函数 "),t("em",[s._v("之前")]),s._v(" 的调用。")]),t("p",[s._v("我们来展示一下调用栈和调用点：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("baz")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用栈是: `baz`")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 我们的调用点是 global scope（全局作用域）")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"baz"')]),s._v(" );\n    "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// <-- `bar` 的调用点")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用栈是: `baz` -> `bar`")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 我们的调用点位于 `baz`")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(" );\n    "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// <-- `foo` 的 call-site")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用栈是: `baz` -> `bar` -> `foo`")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 我们的调用点位于 `bar`")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"foo"')]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("baz")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// <-- `baz` 的调用点")]),s._v("\n")])]),t("p",[s._v("在分析代码来寻找（从调用栈中）真正的调用点时要小心，因为它是影响 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定的唯一因素。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" 你可以通过按顺序观察函数的调用链在你的大脑中建立调用栈的视图，就像我们在上面代码段中的注释那样。但是这很痛苦而且易错。另一种观察调用栈的方式是使用你的浏览器的调试工具。大多数现代的桌面浏览器都内建开发者工具，其中就包含 JS 调试器。在上面的代码段中，你可以在调试工具中为 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 函数的第一行设置一个断点，或者简单的在这第一行上插入一个 "),t("code",{pre:!0},[s._v("debugger")]),s._v(" 语句。当你运行这个网页时，调试工具将会停止在这个位置，并且向你展示一个到达这一行之前所有被调用过的函数的列表，这就是你的调用栈。所以，如果你想调查"),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定，可以使用开发者工具取得调用栈，之后从上向下找到第二个记录，那就是你真正的调用点。")]),t("h2",[s._v("仅仅是规则")]),t("p",[s._v("现在我们将注意力转移到调用点 "),t("em",[s._v("如何")]),s._v(" 决定在函数执行期间 "),t("code",{pre:!0},[s._v("this")]),s._v(" 指向哪里。")]),t("p",[s._v("你必须考察调用点并判定4种规则中的哪一种适用。我们将首先独立地解释一下这4种规则中的每一种，之后我们来展示一下如果有多种规则可以适用于调用点时，它们的优先顺序。")]),t("h3",[s._v("默认绑定（Default Binding）")]),t("p",[s._v("我们要考察的第一种规则源于函数调用的最常见的情况：独立函数调用。可以认为这种 "),t("code",{pre:!0},[s._v("this")]),s._v(" 规则是在没有其他规则适用时的默认规则。")]),t("p",[s._v("考虑这个代码段：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("第一点要注意的，如果你还没有察觉到，是在全局作用域中的声明变量，也就是"),t("code",{pre:!0},[s._v("var a = 2")]),s._v("，是全局对象的同名属性的同义词。它们不是互相拷贝对方，它们 "),t("em",[s._v("就是")]),s._v(" 彼此。正如一个硬币的两面。")]),t("p",[s._v("第二，我们看到当"),t("code",{pre:!0},[s._v("foo()")]),s._v("被调用时，"),t("code",{pre:!0},[s._v("this.a")]),s._v("解析为我们的全局变量"),t("code",{pre:!0},[s._v("a")]),s._v("。为什么？因为在这种情况下，对此方法调用的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 实施了 "),t("em",[s._v("默认绑定")]),s._v("，所以使 "),t("code",{pre:!0},[s._v("this")]),s._v(" 指向了全局对象。")]),t("p",[s._v("我们怎么知道这里适用 "),t("em",[s._v("默认绑定")]),s._v(" ？我们考察调用点来看看 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 是如何被调用的。在我们的代码段中，"),t("code",{pre:!0},[s._v("foo()")]),s._v(" 是被一个直白的，毫无修饰的函数引用调用的。没有其他的我们将要展示的规则适用于这里，所以 "),t("em",[s._v("默认绑定")]),s._v(" 在这里适用。")]),t("p",[s._v("如果 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 在这里生效，那么对于 "),t("em",[s._v("默认绑定")]),s._v(" 来说全局对象是不合法的，所以 "),t("code",{pre:!0},[s._v("this")]),s._v(" 将被设置为 "),t("code",{pre:!0},[s._v("undefined")]),s._v("。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"use strict"')]),s._v(";\n\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError: `this` is `undefined`")]),s._v("\n")])]),t("p",[s._v("一个微妙但是重要的细节是：即便所有的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定规则都是完全基于调用点的，但如果 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 的 "),t("strong",[s._v("内容")]),s._v(" 没有在 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 下执行，对于 "),t("em",[s._v("默认绑定")]),s._v(" 来说全局对象是 "),t("strong",[s._v("唯一")]),s._v(" 合法的；"),t("code",{pre:!0},[s._v("foo()")]),s._v(" 的调用点的 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 状态与此无关。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\n("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("){\n\t"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"use strict"')]),s._v(";\n\n\t"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n})();\n")])]),t("p",[t("strong",[s._v("注意：")]),s._v(" 在你的代码中故意混用 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 和非 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 通常是让人皱眉头的。你的程序整体可能应当不是 "),t("strong",[s._v("Strict")]),s._v(" 就是 "),t("strong",[s._v("非 Strict")]),s._v("。然而，有时你可能会引用与你的 "),t("strong",[s._v("Strict")]),s._v(" 模式不同的第三方包，所以对这些微妙的兼容性细节要多加小心。")]),t("h3",[s._v("隐含绑定（Implicit Binding）")]),t("p",[s._v("另一种要考虑的规则是：调用点是否有一个环境对象（context object），也称为拥有者（owning）或容器（containing）对象，虽然这些名词可能有些误导人。")]),t("p",[s._v("考虑这段代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo\n};\n\nobj."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("首先，注意 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 被声明然后作为引用属性添加到 "),t("code",{pre:!0},[s._v("obj")]),s._v(" 上的方式。无论 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 是否一开始就在 "),t("code",{pre:!0},[s._v("obj")]),s._v(" 上被声明，还是后来作为引用添加（如上面代码所示），这个 "),t("strong",[s._v("函数")]),s._v(" 都不被 "),t("code",{pre:!0},[s._v("obj")]),s._v(" 所真正“拥有”或“包含”。")]),t("p",[s._v("然而，调用点 "),t("em",[s._v("使用")]),s._v(" "),t("code",{pre:!0},[s._v("obj")]),s._v(" 环境来 "),t("strong",[s._v("引用")]),s._v(" 函数，所以你 "),t("em",[s._v("可以说")]),s._v(" "),t("code",{pre:!0},[s._v("obj")]),s._v(" 对象在函数被调用的时间点上“拥有”或“包含”这个 "),t("strong",[s._v("函数引用")]),s._v("。")]),t("p",[s._v("不论你怎样称呼这个模式，在 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 被调用的位置上，它被冠以一个指向 "),t("code",{pre:!0},[s._v("obj")]),s._v(" 的对象引用。当一个方法引用存在一个环境对象时，"),t("em",[s._v("隐含绑定")]),s._v(" 规则会说：是这个对象应当被用于这个函数调用的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定。")]),t("p",[s._v("因为 "),t("code",{pre:!0},[s._v("obj")]),s._v(" 是 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 调用的 "),t("code",{pre:!0},[s._v("this")]),s._v("，所以 "),t("code",{pre:!0},[s._v("this.a")]),s._v(" 就是 "),t("code",{pre:!0},[s._v("obj.a")]),s._v(" 的同义词。")]),t("p",[s._v("只有对象属性引用链的最后一层是影响调用点的。比如：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj2 = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj1 = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("obj2")]),s._v(": obj2\n};\n\nobj1."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("obj2")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 42")]),s._v("\n")])]),t("h4",[s._v("隐含丢失（Implicitly Lost）")]),t("p",[t("code",{pre:!0},[s._v("this")]),s._v(" 绑定最常让人沮丧的事情之一，就是当一个 "),t("em",[s._v("隐含绑定")]),s._v(" 丢失了它的绑定，这通常意味着它会退回到 "),t("em",[s._v("默认绑定")]),s._v("， 根据 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 的状态，其结果不是全局对象就是 "),t("code",{pre:!0},[s._v("undefined")]),s._v("。")]),t("p",[s._v("考虑这段代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = obj."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数引用！")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"oops, global"')]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// `a` 也是一个全局对象的属性")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "oops, global"')]),s._v("\n")])]),t("p",[s._v("尽管 "),t("code",{pre:!0},[s._v("bar")]),s._v(" 似乎是 "),t("code",{pre:!0},[s._v("obj.foo")]),s._v(" 的引用，但实际上它只是另一个 "),t("code",{pre:!0},[s._v("foo")]),s._v(" 本身的引用而已。另外，起作用的调用点是 "),t("code",{pre:!0},[s._v("bar()")]),s._v("，一个直白，毫无修饰的调用，因此 "),t("em",[s._v("默认绑定")]),s._v(" 适用于这里。")]),t("p",[s._v("这种情况发生的更加微妙，更常见，而且更意外的方式，是当我们考虑传递一个回调函数时：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doFoo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fn")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// `fn` 只不过 `foo` 的另一个引用")]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fn")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// <-- 调用点!")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"oops, global"')]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// `a` 也是一个全局对象的属性")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doFoo")]),s._v("( obj."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "oops, global"')]),s._v("\n")])]),t("p",[s._v("参数传递仅仅是一种隐含的赋值，而且因为我们在传递一个函数，它是一个隐含的引用赋值，所以最终结果和我们前一个代码段一样。")]),t("p",[s._v("那么如果接收你所传递回调的函数不是你的，而是语言内建的呢？没有区别，同样的结果。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"oops, global"')]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// `a` 也是一个全局对象的属性")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("( obj."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "oops, global"')]),s._v("\n")])]),t("p",[s._v("把这个粗糙的，理论上的 "),t("code",{pre:!0},[s._v("setTimeout()")]),s._v(" 假想实现当做 JavaScript 环境内建的实现的话：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("setTimeout")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fn,delay")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// （通过某种方法）等待 `delay` 毫秒")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fn")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// <-- 调用点!")]),s._v("\n}\n")])]),t("p",[s._v("正如我们刚刚看到的，我们的回调函数丢掉他们的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定是十分常见的事情。但是 "),t("code",{pre:!0},[s._v("this")]),s._v(" 使我们吃惊的另一种方式是，接收我们回调的函数故意改变调用的 "),t("code",{pre:!0},[s._v("this")]),s._v("。那些很流行的 JavaScript 库中的事件处理器就十分喜欢强制你的回调的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 指向触发事件的 DOM 元素。虽然有时这很有用，但其他时候这简直能气死人。不幸的是，这些工具很少给你选择。")]),t("p",[s._v("不管哪一种意外改变 "),t("code",{pre:!0},[s._v("this")]),s._v(" 的方式，你都不能真正地控制你的回调函数引用将如何被执行，所以你（还）没有办法控制调用点给你一个故意的绑定。我们很快就会看到一个方法，通过 "),t("em",[s._v("固定")]),s._v(" "),t("code",{pre:!0},[s._v("this")]),s._v(" 来解决这个问题。")]),t("h3",[s._v("明确绑定（Explicit Binding）")]),t("p",[s._v("用我们刚看到的 "),t("em",[s._v("隐含绑定")]),s._v("，我们不得不改变目标对象使它自身包含一个对函数的引用，而后使用这个函数引用属性来间接地（隐含地）将 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定到这个对象上。")]),t("p",[s._v("但是，如果你想强制一个函数调用使用某个特定对象作为 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定，而不在这个对象上放置一个函数引用属性呢？")]),t("p",[s._v("JavaScript 语言中的“所有”函数都有一些工具（通过他们的 "),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v(" —— 待会儿详述）可以用于这个任务。具体地说，函数拥有 "),t("code",{pre:!0},[s._v("call(..)")]),s._v(" 和 "),t("code",{pre:!0},[s._v("apply(..)")]),s._v(" 方法。从技术上讲，JavaScript 宿主环境有时会提供一些（说得好听点儿！）很特别的函数，它们没有这些功能。但这很少见。绝大多数被提供的函数，当然还有你将创建的所有的函数，都可以访问 "),t("code",{pre:!0},[s._v("call(..)")]),s._v(" 和 "),t("code",{pre:!0},[s._v("apply(..)")]),s._v("。")]),t("p",[s._v("这些工具如何工作？它们接收的第一个参数都是一个用于 "),t("code",{pre:!0},[s._v("this")]),s._v(" 的对象，之后使用这个指定的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 来调用函数。因为你已经直接指明你想让 "),t("code",{pre:!0},[s._v("this")]),s._v(" 是什么，所以我们称这种方式为 "),t("em",[s._v("明确绑定（explicit binding)")]),s._v("。")]),t("p",[s._v("考虑这段代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( obj ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("通过 "),t("code",{pre:!0},[s._v("foo.call(..)")]),s._v(" 使用 "),t("em",[s._v("明确绑定")]),s._v(" 来调用 "),t("code",{pre:!0},[s._v("foo")]),s._v("，允许我们强制函数的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 指向 "),t("code",{pre:!0},[s._v("obj")]),s._v("。")]),t("p",[s._v("如果你传递一个简单基本类型值（"),t("code",{pre:!0},[s._v("string")]),s._v("，"),t("code",{pre:!0},[s._v("boolean")]),s._v("，或 "),t("code",{pre:!0},[s._v("number")]),s._v(" 类型）作为 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定，那么这个基本类型值会被包装在它的对象类型中（分别是 "),t("code",{pre:!0},[s._v("new String(..)")]),s._v("，"),t("code",{pre:!0},[s._v("new Boolean(..)")]),s._v("，或 "),t("code",{pre:!0},[s._v("new Number(..)")]),s._v("）。这通常称为“封箱（boxing）”。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" 就 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定的角度讲，"),t("code",{pre:!0},[s._v("call(..)")]),s._v(" 和 "),t("code",{pre:!0},[s._v("apply(..)")]),s._v(" 是完全一样的。它们确实在处理其他参数上的方式不同，但那不是我们当前关心的。")]),t("p",[s._v("不幸的是，单独依靠 "),t("em",[s._v("明确绑定")]),s._v(" 仍然不能为我们先前提到的问题提供解决方案，也就是函数“丢失”自己原本的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定，或者被第三方框架覆盖，等等问题。")]),t("h4",[s._v("硬绑定（Hard Binding）")]),t("p",[s._v("但是有一个 "),t("em",[s._v("明确绑定")]),s._v(" 的变种确实可以实现这个技巧。考虑这段代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\tfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( obj );\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("( bar, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// `bar` 将 `foo` 的 `this` 硬绑定到 `obj`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 所以它不可以被覆盖")]),s._v("\nbar."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("window")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("我们来看看这个变种是如何工作的。我们创建了一个函数 "),t("code",{pre:!0},[s._v("bar()")]),s._v("，在它的内部手动调用 "),t("code",{pre:!0},[s._v("foo.call(obj)")]),s._v("，由此强制 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定到 "),t("code",{pre:!0},[s._v("obj")]),s._v(" 并调用 "),t("code",{pre:!0},[s._v("foo")]),s._v("。无论你过后怎样调用函数 "),t("code",{pre:!0},[s._v("bar")]),s._v("，它总是手动使用 "),t("code",{pre:!0},[s._v("obj")]),s._v(" 调用 "),t("code",{pre:!0},[s._v("foo")]),s._v("。这种绑定即明确又坚定，所以我们称之为 "),t("em",[s._v("硬绑定（hard binding）")])]),t("p",[s._v("用 "),t("em",[s._v("硬绑定")]),s._v(" 将一个函数包装起来的最典型的方法，是为所有传入的参数和传出的返回值创建一个通道：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("something")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(", something );\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" + something;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" foo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("apply")]),s._v("( obj, "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(" );\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2 3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( b ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5")]),s._v("\n")])]),t("p",[s._v("另一种表达这种模式的方法是创建一个可复用的帮助函数：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("something")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(", something );\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" + something;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 简单的 `bind` 帮助函数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fn, obj")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" fn."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("apply")]),s._v("( obj, "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(" );\n\t};\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("( foo, obj );\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2 3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( b ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5")]),s._v("\n")])]),t("p",[s._v("由于 "),t("em",[s._v("硬绑定")]),s._v(" 是一个如此常用的模式，它已作为 ES5 的内建工具提供："),t("code",{pre:!0},[s._v("Function.prototype.bind")]),s._v("，像这样使用：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("something")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(", something );\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" + something;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = foo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("( obj );\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2 3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( b ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5")]),s._v("\n")])]),t("p",[t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 返回一个硬编码的新函数，它使用你指定的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 环境来调用原本的函数。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" 在 ES6 中，"),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 生成的硬绑定函数有一个名为 "),t("code",{pre:!0},[s._v(".name")]),s._v(" 的属性，它源自于原始的 "),t("em",[s._v("目标函数（target function）")]),s._v("。举例来说："),t("code",{pre:!0},[s._v("bar = foo.bind(..)")]),s._v(" 应该会有一个 "),t("code",{pre:!0},[s._v("bar.name")]),s._v(" 属性，它的值为 "),t("code",{pre:!0},[s._v('"bound foo"')]),s._v("，这个值应当会显示在调用栈轨迹的函数调用名称中。")]),t("h4",[s._v("API 调用的“环境”")]),t("p",[s._v("确实，许多库中的函数，和许多在 JavaScript 语言以及宿主环境中的内建函数，都提供一个可选参数，通常称为“环境（context）”，这种设计作为一种替代方案来确保你的回调函数使用特定的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 而不必非得使用 "),t("code",{pre:!0},[s._v("bind(..)")]),s._v("。")]),t("p",[s._v("举例来说：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("el")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( el, "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("id")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"awesome"')]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使用 `obj` 作为 `this` 来调用 `foo(..)`")]),s._v("\n["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("forEach")]),s._v("( foo, obj ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1 awesome  2 awesome  3 awesome")]),s._v("\n")])]),t("p",[s._v("从内部来说，几乎可以确定这种类型的函数是通过 "),t("code",{pre:!0},[s._v("call(..)")]),s._v(" 或 "),t("code",{pre:!0},[s._v("apply(..)")]),s._v(" 来使用 "),t("em",[s._v("明确绑定")]),s._v(" 以节省你的麻烦。")]),t("h3",[t("code",{pre:!0},[s._v("new")]),s._v(" 绑定（"),t("code",{pre:!0},[s._v("new")]),s._v(" Binding）")]),t("p",[s._v("第四种也是最后一种 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定规则，要求我们重新思考 JavaScript 中关于函数和对象的常见误解。")]),t("p",[s._v("在传统的面向类语言中，“构造器”是附着在类上的一种特殊方法，当使用 "),t("code",{pre:!0},[s._v("new")]),s._v(" 操作符来初始化一个类时，这个类的构造器就会被调用。通常看起来像这样：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("something = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("MyClass")]),s._v("(..);\n")])]),t("p",[s._v("JavaScript 拥有 "),t("code",{pre:!0},[s._v("new")]),s._v(" 操作符，而且使用它的代码模式看起来和我们在面向类语言中看到的基本一样；大多数开发者猜测 JavaScript 机制在做某种相似的事情。但是，实际上 JavaScript 的机制和 "),t("code",{pre:!0},[s._v("new")]),s._v(" 在 JS 中的用法所暗示的面向类的功能 "),t("em",[s._v("没有任何联系")]),s._v("。")]),t("p",[s._v("首先，让我们重新定义 JavaScript 的“构造器”是什么。在 JS 中，构造器 "),t("strong",[s._v("仅仅是一个函数")]),s._v("，它们偶然地与前置的 "),t("code",{pre:!0},[s._v("new")]),s._v(" 操作符一起调用。它们不依附于类，它们也不初始化一个类。它们甚至不是一种特殊的函数类型。它们本质上只是一般的函数，在被使用 "),t("code",{pre:!0},[s._v("new")]),s._v(" 来调用时改变了行为。")]),t("p",[s._v("例如，引用 ES5.1 的语言规范，"),t("code",{pre:!0},[s._v("Number(..)")]),s._v(" 函数作为一个构造器来说：")]),t("blockquote",[t("p",[s._v("15.7.2 Number 构造器")]),t("p",[s._v("当 Number 作为 new 表达式的一部分被调用时，它是一个构造器：它初始化这个新创建的对象。")])]),t("p",[s._v("所以，可以说任何函数，包括像 "),t("code",{pre:!0},[s._v("Number(..)")]),s._v("（见第三章）这样的内建对象函数都可以在前面加上 "),t("code",{pre:!0},[s._v("new")]),s._v(" 来被调用，这使函数调用成为一个 "),t("em",[s._v("构造器调用（constructor call）")]),s._v("。这是一个重要而微妙的区别：实际上不存在“构造器函数”这样的东西，而只有函数的构造器调用。")]),t("p",[s._v("当在函数前面被加入 "),t("code",{pre:!0},[s._v("new")]),s._v(" 调用时，也就是构造器调用时，下面这些事情会自动完成：")]),t("ol",[t("li",[s._v("一个全新的对象会凭空创建（就是被构建）")]),t("li",[t("em",[s._v("这个新构建的对象会被接入原形链（"),t("code",{pre:!0},[s._v("[[Prototype]]")]),s._v("-linked）")])]),t("li",[s._v("这个新构建的对象被设置为函数调用的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定")]),t("li",[s._v("除非函数返回一个它自己的其他 "),t("strong",[s._v("对象")]),s._v("，否则这个被 "),t("code",{pre:!0},[s._v("new")]),s._v(" 调用的函数将 "),t("em",[s._v("自动")]),s._v(" 返回这个新构建的对象。")])]),t("p",[s._v("步骤 1，3 和 4 是我们当下要讨论的。我们现在跳过第 2 步，在第五章回过头来讨论。")]),t("p",[s._v("考虑这段代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" = a;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" );\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( bar."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("通过在前面使用 "),t("code",{pre:!0},[s._v("new")]),s._v(" 来调用 "),t("code",{pre:!0},[s._v("foo(..)")]),s._v("，我们构建了一个新的对象并把这个新对象作为 "),t("code",{pre:!0},[s._v("foo(..)")]),s._v(" 调用的 "),t("code",{pre:!0},[s._v("this")]),s._v("。 "),t("strong",[t("code",{pre:!0},[s._v("new")]),s._v(" 是函数调用可以绑定 "),t("code",{pre:!0},[s._v("this")]),s._v(" 的最后一种方式")]),s._v("，我们称之为 "),t("em",[s._v("new 绑定（new binding）")]),s._v("。")]),t("h2",[s._v("一切皆有顺序")]),t("p",[s._v("如此，我们已经揭示了函数调用中的四种 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定规则。你需要做的 "),t("em",[s._v("一切")]),s._v(" 就是找到调用点然后考察哪一种规则适用于它。但是，如果调用点上有多种规则都适用呢？这些规则一定有一个优先顺序，我们下面就来展示这些规则以什么样的优先顺序实施。")]),t("p",[s._v("很显然，"),t("em",[s._v("默认绑定")]),s._v(" 在四种规则中优先权最低的。所以我们先把它放在一边。")]),t("p",[t("em",[s._v("隐含绑定")]),s._v(" 和 "),t("em",[s._v("明确绑定")]),s._v(" 哪一个更优先呢？我们来测试一下：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj1 = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj2 = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(",\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo\n};\n\nobj1."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nobj2."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\nobj1."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( obj2 ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\nobj2."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( obj1 ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("所以, "),t("em",[s._v("明确绑定")]),s._v(" 的优先权要高于 "),t("em",[s._v("隐含绑定")]),s._v("，这意味着你应当在考察 "),t("em",[s._v("隐含绑定")]),s._v(" 之前 "),t("strong",[s._v("首先")]),s._v(" 考察 "),t("em",[s._v("明确绑定")]),s._v(" 是否适用。")]),t("p",[s._v("现在，我们只需要搞清楚 "),t("em",[s._v("new 绑定")]),s._v(" 的优先级位于何处。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("something")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" = something;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj1 = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj2 = {};\n\nobj1."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" );\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( obj1."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n\nobj1."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( obj2, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" );\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( obj2."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" obj1."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" );\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( obj1."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( bar."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4")]),s._v("\n")])]),t("p",[s._v("好了，"),t("em",[s._v("new 绑定")]),s._v(" 的优先级要高于 "),t("em",[s._v("隐含绑定")]),s._v("。那么你觉得 "),t("em",[s._v("new 绑定")]),s._v(" 的优先级较之于 "),t("em",[s._v("明确绑定")]),s._v(" 是高还是低呢？")]),t("p",[t("strong",[s._v("注意：")]),s._v(" "),t("code",{pre:!0},[s._v("new")]),s._v(" 和 "),t("code",{pre:!0},[s._v("call")]),s._v("/"),t("code",{pre:!0},[s._v("apply")]),s._v(" 不能同时使用，所以 "),t("code",{pre:!0},[s._v("new foo.call(obj1)")]),s._v(" 是不允许的，也就是不能直接对比测试 "),t("em",[s._v("new 绑定")]),s._v(" 和 "),t("em",[s._v("明确绑定")]),s._v("。但是我们依然可以使用 "),t("em",[s._v("硬绑定")]),s._v(" 来测试这两个规则的优先级。")]),t("p",[s._v("在我们进入代码中探索之前，回想一下 "),t("em",[s._v("硬绑定")]),s._v(" 物理上是如何工作的，也就是 "),t("code",{pre:!0},[s._v("Function.prototype.bind(..)")]),s._v(" 创建了一个新的包装函数，这个函数被硬编码为忽略它自己的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定（不管它是什么），转而手动使用我们提供的。")]),t("p",[s._v("因此，这似乎看起来很明显，"),t("em",[s._v("硬绑定")]),s._v("（"),t("em",[s._v("明确绑定的一种")]),s._v("）的优先级要比 "),t("em",[s._v("new 绑定")]),s._v(" 高，而且不能被 "),t("code",{pre:!0},[s._v("new")]),s._v(" 覆盖。")]),t("p",[s._v("我们检验一下：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("something")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" = something;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj1 = {};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = foo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("( obj1 );\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" );\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( obj1."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" baz = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" );\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( obj1."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( baz."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])]),t("p",[s._v("哇！"),t("code",{pre:!0},[s._v("bar")]),s._v(" 是硬绑定到 "),t("code",{pre:!0},[s._v("obj1")]),s._v(" 的，但是 "),t("code",{pre:!0},[s._v("new bar(3)")]),s._v(" 并 "),t("strong",[s._v("没有")]),s._v(" 像我们期待的那样将 "),t("code",{pre:!0},[s._v("obj1.a")]),s._v(" 变为 "),t("code",{pre:!0},[s._v("3")]),s._v("。反而，"),t("em",[s._v("硬绑定")]),s._v("（到 "),t("code",{pre:!0},[s._v("obj1")]),s._v("）的 "),t("code",{pre:!0},[s._v("bar(..)")]),s._v(" 调用 "),t("em",[t("strong",[s._v("可以")])]),s._v(" 被 "),t("code",{pre:!0},[s._v("new")]),s._v(" 所覆盖。因为 "),t("code",{pre:!0},[s._v("new")]),s._v(" 被实施，我们得到一个名为 "),t("code",{pre:!0},[s._v("baz")]),s._v(" 的新创建的对象，而且我们确实看到 "),t("code",{pre:!0},[s._v("baz.a")]),s._v(" 的值为 "),t("code",{pre:!0},[s._v("3")]),s._v("。")]),t("p",[s._v("如果你回头看看我们的“山寨”绑定帮助函数，这很令人吃惊：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fn, obj")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t\tfn."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("apply")]),s._v("( obj, "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(" );\n\t};\n}\n")])]),t("p",[s._v("如果你推导这段帮助代码如何工作，会发现对于 "),t("code",{pre:!0},[s._v("new")]),s._v(" 操作符调用来说没有办法去像我们观察到的那样，将绑定到 "),t("code",{pre:!0},[s._v("obj")]),s._v(" 的硬绑定覆盖。")]),t("p",[s._v("但是 ES5 的内建 "),t("code",{pre:!0},[s._v("Function.prototype.bind(..)")]),s._v(" 更加精妙，实际上十分精妙。这里是 MDN 网页上为 "),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 提供的（稍稍格式化后的）polyfill（低版本兼容填补工具）：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Function")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("bind")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Function")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("bind")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("oThis")]),s._v(") {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(" !== "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"function"')]),s._v(") {\n\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 可能的与 ECMAScript 5 内部的 IsCallable 函数最接近的东西，")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("TypeError")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Function.prototype.bind - what "')]),s._v(" +\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"is trying to be bound is not callable"')]),s._v("\n\t\t\t);\n\t\t}\n\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" aArgs = "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Array")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("slice")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" ),\n\t\t\tfToBind = "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(",\n\t\t\tfNOP = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("){},\n\t\t\tfBound = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("){\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" fToBind."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("apply")]),s._v("(\n\t\t\t\t\t(\n\t\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" fNOP &&\n\t\t\t\t\t\toThis ? "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(" : oThis\n\t\t\t\t\t),\n\t\t\t\t\taArgs."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("concat")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Array")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("slice")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(" ) )\n\t\t\t\t);\n\t\t\t}\n\t\t;\n\n\t\tfNOP."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(";\n\t\tfBound."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fNOP")]),s._v("();\n\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" fBound;\n\t};\n}\n")])]),t("p",[t("strong",[s._v("注意：")]),s._v(" 就将与 "),t("code",{pre:!0},[s._v("new")]),s._v(" 一起使用的硬绑定函数（参照下面来看为什么这有用）而言，上面的 "),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" polyfill 与 ES5 中内建的 "),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 是不同的。因为 polyfill 不能像内建工具那样，没有 "),t("code",{pre:!0},[s._v(".prototype")]),s._v(" 就能创建函数，这里使用了一些微妙而间接的方法来近似模拟相同的行为。如果你打算将硬绑定函数和 "),t("code",{pre:!0},[s._v("new")]),s._v(" 一起使用而且依赖于这个 polyfill，应当多加小心。")]),t("p",[s._v("允许 "),t("code",{pre:!0},[s._v("new")]),s._v(" 进行覆盖的部分是这里：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" fNOP &&\noThis ? "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(" : oThis\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ... 和：")]),s._v("\n\nfNOP."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(";\nfBound."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fNOP")]),s._v("();\n")])]),t("p",[s._v("我们不会实际深入解释这个花招儿是如何工作的（这很复杂而且超出了我们当前的讨论范围），但实质上这个工具判断硬绑定函数是否是通过 "),t("code",{pre:!0},[s._v("new")]),s._v(" 被调用的（导致一个新构建的对象作为它的 "),t("code",{pre:!0},[s._v("this")]),s._v("），如果是，它就用那个新构建的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 而非先前为 "),t("code",{pre:!0},[s._v("this")]),s._v(" 指定的 "),t("em",[s._v("硬绑定")]),s._v("。")]),t("p",[s._v("为什么 "),t("code",{pre:!0},[s._v("new")]),s._v(" 可以覆盖 "),t("em",[s._v("硬绑定")]),s._v(" 这件事很有用？")]),t("p",[s._v("这种行为的主要原因是，创建一个实质上忽略 "),t("code",{pre:!0},[s._v("this")]),s._v(" 的 "),t("em",[s._v("硬绑定")]),s._v(" 而预先设置一部分或所有的参数的函数（这个函数可以与 "),t("code",{pre:!0},[s._v("new")]),s._v(" 一起使用来构建对象）。"),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 的一个能力是，任何在第一个 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定参数之后被传入的参数，默认地作为当前函数的标准参数（技术上这称为“局部应用（partial application）”，是一种“柯里化（currying）”）。")]),t("p",[s._v("例如：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("p1,p2")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("val")]),s._v(" = p1 + p2;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 在这里使用 `null` 是因为在这种场景下我们不关心 `this` 的硬绑定")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 而且反正它将会被 `new` 调用覆盖掉！")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = foo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"p1"')]),s._v(" );\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" baz = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"p2"')]),s._v(" );\n\nbaz."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("val")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// p1p2")]),s._v("\n")])]),t("h3",[s._v("判定 "),t("code",{pre:!0},[s._v("this")])]),t("p",[s._v("现在，我们可以按照优先顺序来总结一下从函数调用的调用点来判定 "),t("code",{pre:!0},[s._v("this")]),s._v(" 的规则了。按照这个顺序来问问题，然后在第一个规则适用的地方停下。")]),t("ol",[t("li",[t("p",[s._v("函数是通过 "),t("code",{pre:!0},[s._v("new")]),s._v(" 被调用的吗（"),t("strong",[s._v("new 绑定")]),s._v("）？如果是，"),t("code",{pre:!0},[s._v("this")]),s._v(" 就是新构建的对象。")]),t("p",[t("code",{pre:!0},[s._v("var bar = new foo()")])])]),t("li",[t("p",[s._v("函数是通过 "),t("code",{pre:!0},[s._v("call")]),s._v(" 或 "),t("code",{pre:!0},[s._v("apply")]),s._v(" 被调用（"),t("strong",[s._v("明确绑定")]),s._v("），甚至是隐藏在 "),t("code",{pre:!0},[s._v("bind")]),s._v(" "),t("em",[s._v("硬绑定")]),s._v(" 之中吗？如果是，"),t("code",{pre:!0},[s._v("this")]),s._v(" 就是那个被明确指定的对象。")]),t("p",[t("code",{pre:!0},[s._v("var bar = foo.call( obj2 )")])])]),t("li",[t("p",[s._v("函数是通过环境对象（也称为拥有者或容器对象）被调用的吗（"),t("strong",[s._v("隐含绑定")]),s._v("）？如果是，"),t("code",{pre:!0},[s._v("this")]),s._v(" 就是那个环境对象。")]),t("p",[t("code",{pre:!0},[s._v("var bar = obj1.foo()")])])]),t("li",[t("p",[s._v("否则，使用默认的 "),t("code",{pre:!0},[s._v("this")]),s._v("（"),t("strong",[s._v("默认绑定")]),s._v("）。如果在 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 下，就是 "),t("code",{pre:!0},[s._v("undefined")]),s._v("，否则是 "),t("code",{pre:!0},[s._v("global")]),s._v(" 对象。")]),t("p",[t("code",{pre:!0},[s._v("var bar = foo()")])])])]),t("p",[s._v("以上，就是理解对于普通的函数调用来说的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定规则 "),t("em",[s._v("所需的全部")]),s._v("。是的……几乎是全部。")]),t("h2",[s._v("绑定的特例")]),t("p",[s._v("正如通常的那样，对于“规则”总有一些 "),t("em",[s._v("例外")]),s._v("。")]),t("p",[s._v("在某些场景下 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定会让人很吃惊，比如在你试图实施一种绑定，然而最终得到的却是 "),t("em",[s._v("默认绑定")]),s._v(" 规则的绑定行为（见前面的内容）。")]),t("h3",[s._v("被忽略的 "),t("code",{pre:!0},[s._v("this")])]),t("p",[s._v("如果你传递 "),t("code",{pre:!0},[s._v("null")]),s._v(" 或 "),t("code",{pre:!0},[s._v("undefined")]),s._v(" 作为 "),t("code",{pre:!0},[s._v("call")]),s._v("、"),t("code",{pre:!0},[s._v("apply")]),s._v(" 或 "),t("code",{pre:!0},[s._v("bind")]),s._v(" 的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定参数，那么这些值会被忽略掉，取而代之的是 "),t("em",[s._v("默认绑定")]),s._v(" 规则将适用于这个调用。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("为什么你会向 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定故意传递像 "),t("code",{pre:!0},[s._v("null")]),s._v(" 这样的值？")]),t("p",[s._v("一个很常见的做法是，使用 "),t("code",{pre:!0},[s._v("apply(..)")]),s._v(" 来将一个数组散开，从而作为函数调用的参数。相似地，"),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 可以柯里化参数（预设值），也可能非常有用。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a,b")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a:"')]),s._v(" + a + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('", b:"')]),s._v(" + b );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将数组散开作为参数")]),s._v("\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("apply")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("] ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a:2, b:3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 用 `bind(..)` 进行柯里化")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = foo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" );\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a:2, b:3")]),s._v("\n")])]),t("p",[s._v("这两种工具都要求第一个参数是 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定。如果目标函数不关心 "),t("code",{pre:!0},[s._v("this")]),s._v("，你就需要一个占位值，而且正如这个代码段中展示的，"),t("code",{pre:!0},[s._v("null")]),s._v(" 看起来是一个合理的选择。")]),t("p",[t("strong",[s._v("注意：")]),s._v(" 虽然我们在这本书中没有涵盖，但是 ES6 中有一个扩散操作符："),t("code",{pre:!0},[s._v("...")]),s._v("，它让你无需使用 "),t("code",{pre:!0},[s._v("apply(..)")]),s._v(" 而在语法上将一个数组“散开”作为参数，比如 "),t("code",{pre:!0},[s._v("foo(...[1,2])")]),s._v(" 表示 "),t("code",{pre:!0},[s._v("foo(1,2)")]),s._v(" —— 如果 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定没有必要，可以在语法上回避它。不幸的是，柯里化在 ES6 中没有语法上的替代品，所以 "),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 调用的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 参数依然需要注意。")]),t("p",[s._v("可是，在你不关心 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定而一直使用 "),t("code",{pre:!0},[s._v("null")]),s._v(" 的时候，有些潜在的“危险”。如果你这样处理一些函数调用（比如，不归你管控的第三方包），而且那些函数确实使用了 "),t("code",{pre:!0},[s._v("this")]),s._v(" 引用，那么 "),t("em",[s._v("默认绑定")]),s._v(" 规则意味着它可能会不经意间引用（或者改变，更糟糕！）"),t("code",{pre:!0},[s._v("global")]),s._v(" 对象（在浏览器中是 "),t("code",{pre:!0},[s._v("window")]),s._v("）。")]),t("p",[s._v("很显然，这样的陷阱会导致多种 "),t("em",[s._v("非常难")]),s._v(" 诊断和追踪的 Bug。")]),t("h4",[s._v("更安全的 "),t("code",{pre:!0},[s._v("this")])]),t("p",[s._v("也许某些“更安全”的做法是：为了 "),t("code",{pre:!0},[s._v("this")]),s._v(" 而传递一个特殊创建好的对象，这个对象保证不会对你的程序产生副作用。从网络学（或军事）上借用一个词，我们可以建立一个“DMZ”（非军事区）对象 —— 只不过是一个完全为空，没有委托（见第五，六章）的对象。")]),t("p",[s._v("如果我们为了忽略自己认为不用关心的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定，而总是传递一个 DMZ 对象，那么我们就可以确定任何对 "),t("code",{pre:!0},[s._v("this")]),s._v(" 的隐藏或意外的使用将会被限制在这个空对象中，也就是说这个对象将 "),t("code",{pre:!0},[s._v("global")]),s._v(" 对象和副作用隔离开来。")]),t("p",[s._v("因为这个对象是完全为空的，我个人喜欢给它一个变量名为 "),t("code",{pre:!0},[s._v("ø")]),s._v("（空集合的数学符号的小写）。在许多键盘上（比如 Mac 的美式键盘），这个符号可以很容易地用 "),t("code",{pre:!0},[s._v("⌥")]),s._v("+"),t("code",{pre:!0},[s._v("o")]),s._v("（option+"),t("code",{pre:!0},[s._v("o")]),s._v("）打出来。有些系统还允许你为某个特殊符号设置快捷键。如果你不喜欢 "),t("code",{pre:!0},[s._v("ø")]),s._v(" 符号，或者你的键盘没那么好打，你当然可以叫它任意你希望的名字。")]),t("p",[s._v("无论你叫它什么，创建 "),t("strong",[s._v("完全为空的对象")]),s._v(" 的最简单方法就是 "),t("code",{pre:!0},[s._v("Object.create(null)")]),s._v("（见第五章）。"),t("code",{pre:!0},[s._v("Object.create(null)")]),s._v(" 和 "),t("code",{pre:!0},[s._v("{}")]),s._v(" 很相似，但是没有指向 "),t("code",{pre:!0},[s._v("Object.prototype")]),s._v(" 的委托，所以它比 "),t("code",{pre:!0},[s._v("{}")]),s._v(" “空得更彻底”。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a,b")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a:"')]),s._v(" + a + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('", b:"')]),s._v(" + b );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 我们的 DMZ 空对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" ø = "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("create")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" );\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将数组散开作为参数")]),s._v("\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("apply")]),s._v("( ø, ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("] ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a:2, b:3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 用 `bind(..)` 进行 currying")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = foo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("( ø, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" );\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a:2, b:3")]),s._v("\n")])]),t("p",[s._v("不仅在功能上更“安全”，"),t("code",{pre:!0},[s._v("ø")]),s._v(" 还会在代码风格上产生些好处，它在语义上可能会比 "),t("code",{pre:!0},[s._v("null")]),s._v(" 更清晰的表达“我想让 "),t("code",{pre:!0},[s._v("this")]),s._v(" 为空”。当然，你可以随自己喜欢来称呼你的 DMZ 对象。")]),t("h3",[s._v("间接")]),t("p",[s._v("另外一个要注意的是，你可以（有意或无意地！）创建对函数的“间接引用（indirect reference）”，在那样的情况下，当那个函数引用被调用时，"),t("em",[s._v("默认绑定")]),s._v(" 规则也会适用。")]),t("p",[s._v("一个最常见的 "),t("em",[s._v("间接引用")]),s._v(" 产生方式是通过赋值：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" o = { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo };\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" p = { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" };\n\no."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n(p."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(" = o."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(")(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("赋值表达式 "),t("code",{pre:!0},[s._v("p.foo = o.foo")]),s._v(" 的 "),t("em",[s._v("结果值")]),s._v(" 是一个刚好指向底层函数对象的引用。如此，起作用的调用点就是 "),t("code",{pre:!0},[s._v("foo()")]),s._v("，而非你期待的 "),t("code",{pre:!0},[s._v("p.foo()")]),s._v(" 或 "),t("code",{pre:!0},[s._v("o.foo()")]),s._v("。根据上面的规则，"),t("em",[s._v("默认绑定")]),s._v(" 适用。")]),t("p",[s._v("提醒： 无论你如何得到适用 "),t("em",[s._v("默认绑定")]),s._v(" 的函数调用，被调用函数的 "),t("strong",[s._v("内容")]),s._v(" 的 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 状态 —— 而非函数的调用点 —— 决定了 "),t("code",{pre:!0},[s._v("this")]),s._v(" 引用的值：不是 "),t("code",{pre:!0},[s._v("global")]),s._v(" 对象（在非 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 下），就是 "),t("code",{pre:!0},[s._v("undefined")]),s._v("（在 "),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 下）。")]),t("h3",[s._v("软化绑定（Softening Binding）")]),t("p",[s._v("我们之前看到 "),t("em",[s._v("硬绑定")]),s._v(" 是一种通过将函数强制绑定到特定的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 上，来防止函数调用在不经意间退回到 "),t("em",[s._v("默认绑定")]),s._v(" 的策略（除非你用 "),t("code",{pre:!0},[s._v("new")]),s._v(" 去覆盖它！）。问题是，"),t("em",[s._v("硬绑定")]),s._v(" 极大地降低了函数的灵活性，阻止我们手动使用 "),t("em",[s._v("隐含绑定")]),s._v(" 或后续的 "),t("em",[s._v("明确绑定")]),s._v(" 来覆盖 "),t("code",{pre:!0},[s._v("this")]),s._v("。")]),t("p",[s._v("如果有这样的办法就好了：为 "),t("em",[s._v("默认绑定")]),s._v(" 提供不同的默认值（不是 "),t("code",{pre:!0},[s._v("global")]),s._v(" 或 "),t("code",{pre:!0},[s._v("undefined")]),s._v("），同时保持函数可以通过 "),t("em",[s._v("隐含绑定")]),s._v(" 或 "),t("em",[s._v("明确绑定")]),s._v(" 技术来手动绑定 "),t("code",{pre:!0},[s._v("this")]),s._v("。")]),t("p",[s._v("我们可以构建一个所谓的 "),t("em",[s._v("软绑定")]),s._v(" 工具来模拟我们期望的行为。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Function")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("softBind")]),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Function")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("softBind")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(") {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" fn = "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(",\n\t\t\tcurried = []."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("slice")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" ),\n\t\t\tbound = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bound")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" fn."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("apply")]),s._v("(\n\t\t\t\t\t(!"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(" ||\n\t\t\t\t\t\t("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("window")]),s._v(" !== "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"undefined"')]),s._v(" &&\n\t\t\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(" === "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("window")]),s._v(") ||\n\t\t\t\t\t\t("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("global")]),s._v(" !== "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"undefined"')]),s._v(" &&\n\t\t\t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(" === "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("global")]),s._v(")\n\t\t\t\t\t) ? obj : "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(",\n\t\t\t\t\tcurried."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("concat")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("apply")]),s._v("( curried, "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(" )\n\t\t\t\t);\n\t\t\t};\n\t\tbound."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("create")]),s._v("( fn."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v(" );\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" bound;\n\t};\n}\n")])]),t("p",[s._v("这里提供的 "),t("code",{pre:!0},[s._v("softBind(..)")]),s._v(" 工具的工作方式和 ES5 内建的 "),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 工具很相似，除了我们的 "),t("em",[s._v("软绑定")]),s._v(" 行为。它用一种逻辑将指定的函数包装起来，这个逻辑在函数调用时检查 "),t("code",{pre:!0},[s._v("this")]),s._v("，如果它是 "),t("code",{pre:!0},[s._v("global")]),s._v(" 或 "),t("code",{pre:!0},[s._v("undefined")]),s._v("，就使用预先指定的 "),t("em",[s._v("默认值")]),s._v(" （"),t("code",{pre:!0},[s._v("obj")]),s._v("），否则保持 "),t("code",{pre:!0},[s._v("this")]),s._v(" 不变。它也提供了可选的柯里化行为（见先前的 "),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 讨论）。")]),t("p",[s._v("我们来看看它的用法：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n   "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"name: "')]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(");\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"obj"')]),s._v(" },\n    obj2 = { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"obj2"')]),s._v(" },\n    obj3 = { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"obj3"')]),s._v(" };\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" fooOBJ = foo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("softBind")]),s._v("( obj );\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fooOBJ")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// name: obj")]),s._v("\n\nobj2."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(" = foo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("softBind")]),s._v("(obj);\nobj2."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// name: obj2   <---- 看!!!")]),s._v("\n\nfooOBJ."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( obj3 ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// name: obj3   <---- 看!")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("( obj2."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("foo")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// name: obj   <---- 退回到软绑定")]),s._v("\n")])]),t("p",[s._v("软绑定版本的 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 函数可以如展示的那样被手动 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定到 "),t("code",{pre:!0},[s._v("obj2")]),s._v(" 或 "),t("code",{pre:!0},[s._v("obj3")]),s._v("，如果 "),t("em",[s._v("默认绑定")]),s._v(" 适用时会退到 "),t("code",{pre:!0},[s._v("obj")]),s._v("。")]),t("h2",[s._v("词法 "),t("code",{pre:!0},[s._v("this")])]),t("p",[s._v("我们刚刚涵盖了一般函数遵守的四种规则。但是 ES6 引入了一种不适用于这些规则特殊的函数：箭头函数（arrow-function）。")]),t("p",[s._v("箭头函数不是通过 "),t("code",{pre:!0},[s._v("function")]),s._v(" 关键字声明的，而是通过所谓的“大箭头”操作符："),t("code",{pre:!0},[s._v("=>")]),s._v("。与使用四种标准的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 规则不同的是，箭头函数从封闭它的（函数或全局）作用域采用 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定。")]),t("p",[s._v("我们来展示一下箭头函数的词法作用域：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 返回一个箭头函数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") =>")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里的 `this` 是词法上从 `foo()` 采用的")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n\t};\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj1 = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj2 = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = foo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( obj1 );\nbar."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( obj2 ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2, 不是3!")]),s._v("\n")])]),t("p",[s._v("在 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 中创建的箭头函数在词法上捕获 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 被调用时的 "),t("code",{pre:!0},[s._v("this")]),s._v("，不管它是什么。因为 "),t("code",{pre:!0},[s._v("foo()")]),s._v(" 被 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定到 "),t("code",{pre:!0},[s._v("obj1")]),s._v("，"),t("code",{pre:!0},[s._v("bar")]),s._v("（被返回的箭头函数的一个引用）也将会被 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定到 "),t("code",{pre:!0},[s._v("obj1")]),s._v("。一个箭头函数的词法绑定是不能被覆盖的（就连 "),t("code",{pre:!0},[s._v("new")]),s._v(" 也不行！）。")]),t("p",[s._v("最常见的用法是用于回调，比如事件处理器或计时器：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" {\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里的 `this` 是词法上从 `foo()` 采用")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n\t},"),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(");\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( obj ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("虽然箭头函数提供除了使用 "),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 外，另外一种在函数上来确保 "),t("code",{pre:!0},[s._v("this")]),s._v(" 的方式，这看起来很吸引人，但重要的是要注意它们本质是使用广为人知的词法作用域来禁止了传统的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 机制。在 ES6 之前，为此我们已经有了相当常用的模式，这些模式几乎和 ES6 的箭头函数的精神没有区别：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 词法上捕获 `this`")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("( "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("){\n\t\t"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( self."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(" );\n\t}, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(" );\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n};\n\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("( obj ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("虽然对不想用 "),t("code",{pre:!0},[s._v("bind(..)")]),s._v(" 的人来说 "),t("code",{pre:!0},[s._v("self = this")]),s._v(" 和箭头函数都是看起来不错的“解决方案”，但它们实质上逃避了 "),t("code",{pre:!0},[s._v("this")]),s._v(" 而非理解和接受它。")]),t("p",[s._v("如果你发现你在写 "),t("code",{pre:!0},[s._v("this")]),s._v(" 风格的代码，但是大多数或全部时候，你都用词法上的 "),t("code",{pre:!0},[s._v("self = this")]),s._v(" 或箭头函数“技巧”抵御 "),t("code",{pre:!0},[s._v("this")]),s._v(" 机制，那么也许你应该：")]),t("ol",[t("li",[t("p",[s._v("仅使用词法作用域并忘掉虚伪的 "),t("code",{pre:!0},[s._v("this")]),s._v(" 风格代码。")])]),t("li",[t("p",[s._v("完全接受 "),t("code",{pre:!0},[s._v("this")]),s._v(" 风格机制，包括在必要的时候使用 "),t("code",{pre:!0},[s._v("bind(..)")]),s._v("，并尝试避开 "),t("code",{pre:!0},[s._v("self = this")]),s._v(" 和箭头函数的“词法 this”技巧。")])])]),t("p",[s._v("一个程序可以有效地同时利用两种风格的代码（词法和 "),t("code",{pre:!0},[s._v("this")]),s._v("），但是在同一个函数内部，特别是对同种类型的查找，混合这两种机制通常是自找很难维护的代码，而且可能是聪明过了头。")]),t("h2",[s._v("复习")]),t("p",[s._v("为执行中的函数判定 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定需要找到这个函数的直接调用点。找到之后，四种规则将会以这种优先顺序施用于调用点：")]),t("ol",[t("li",[t("p",[s._v("通过 "),t("code",{pre:!0},[s._v("new")]),s._v(" 调用？使用新构建的对象。")])]),t("li",[t("p",[s._v("通过 "),t("code",{pre:!0},[s._v("call")]),s._v(" 或 "),t("code",{pre:!0},[s._v("apply")]),s._v("（或 "),t("code",{pre:!0},[s._v("bind")]),s._v("）调用？使用指定的对象。")])]),t("li",[t("p",[s._v("通过持有调用的环境对象调用？使用那个环境对象。")])]),t("li",[t("p",[s._v("默认："),t("code",{pre:!0},[s._v("strict mode")]),s._v(" 下是 "),t("code",{pre:!0},[s._v("undefined")]),s._v("，否则就是全局对象。")])])]),t("p",[s._v("小心偶然或不经意的 "),t("em",[s._v("默认绑定")]),s._v(" 规则调用。如果你想“安全”地忽略 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定，一个像 "),t("code",{pre:!0},[s._v("ø = Object.create(null)")]),s._v(" 这样的“DMZ”对象是一个很好的占位值，以保护 "),t("code",{pre:!0},[s._v("global")]),s._v(" 对象不受意外的副作用影响。")]),t("p",[s._v("与这四种绑定规则不同，ES6 的箭头方法使用词法作用域来决定 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定，这意味着它们采用封闭他们的函数调用作为 "),t("code",{pre:!0},[s._v("this")]),s._v(" 绑定（无论它是什么）。它们实质上是 ES6 之前的 "),t("code",{pre:!0},[s._v("self = this")]),s._v(" 代码的语法替代品。")])])])])}],!1,null,null,null);a.default=e.exports}}]);