(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d21e17a"],{d3a6:function(s,e,a){"use strict";a.r(e);var t=a("2877"),p=Object(t.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("section",[a("html",[a("head"),a("body",[a("h1",[s._v("05 作用域链")]),a("blockquote",[a("p",[s._v("JavaScript 深入系列第五篇，讲述作用链的创建过程，最后结合着变量对象，执行上下文栈，让我们一起捋一捋函数创建和执行的过程中到底发生了什么？")])]),a("h2",[s._v("前言")]),a("p",[s._v("在"),a("a",{attrs:{href:"#/qingfeng/deep/deep-03"}},[s._v("《03 执行上下文栈》")]),s._v("中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。")]),a("p",[s._v("对于每个执行上下文，都有三个重要属性：")]),a("ul",[a("li",[s._v("变量对象(Variable object，VO)")]),a("li",[s._v("作用域链(Scope chain)")]),a("li",[s._v("this")])]),a("p",[s._v("今天重点讲讲作用域链。")]),a("h2",[s._v("作用域链")]),a("p",[s._v("在"),a("a",{attrs:{href:"#/qingfeng/deep/deep-04"}},[s._v("《04 变量对象》")]),s._v("中讲到，当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。")]),a("p",[s._v("下面，让我们以一个函数的创建和激活两个时期来讲解作用域链是如何创建和变化的。")]),a("h2",[s._v("函数创建")]),a("p",[s._v("在"),a("a",{attrs:{href:"#/qingfeng/deep/deep-02"}},[s._v("《02 词法作用域和动态作用域》")]),s._v("中讲到，函数的作用域在函数定义的时候就决定了。")]),a("p",[s._v("这是因为函数有一个内部属性 [[scope]]，当函数创建的时候，就会保存所有父变量对象到其中，你可以理解 [[scope]] 就是所有父变量对象的层级链，但是注意：[[scope]] 并不代表完整的作用域链！")]),a("p",[s._v("举个例子：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    ...\n  }\n}\n\n")])]),a("p",[s._v("函数创建时，各自的[[scope]]为：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("\nfoo.[[scope]] = [\n  globalContext."),a("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("VO")]),s._v("\n];\n\nbar.[[scope]] = [\n  fooContext."),a("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("AO")]),s._v(",\n  globalContext."),a("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("VO")]),s._v("\n];\n\n")])]),a("h2",[s._v("函数激活")]),a("p",[s._v("当函数激活时，进入函数上下文，创建 VO/AO 后，就会将活动对象添加到作用链的前端。")]),a("p",[s._v("这时候执行上下文的作用域链，我们命名为 Scope：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[a("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Scope")]),s._v(" = ["),a("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("AO")]),s._v("]."),a("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("concat")]),s._v("([["),a("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Scope")]),s._v("]])\n")])]),a("p",[s._v("至此，作用域链创建完毕。")]),a("h2",[s._v("捋一捋")]),a("p",[s._v("以下面的例子为例，结合着之前讲的变量对象和执行上下文栈，我们来总结一下函数执行上下文中作用域链和变量对象的创建过程：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope = "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'global scope'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("checkscope")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope2 = "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'local scope'")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" scope2\n}\n"),a("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("checkscope")]),s._v("()\n")])]),a("p",[s._v("执行过程如下：")]),a("p",[s._v("1.checkscope 函数被创建，保存作用域链到 内部属性[[scope]]")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscope.[[scope]] = [\n  globalContext."),a("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("VO")]),s._v("\n];\n")])]),a("p",[s._v("2.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[a("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("ECStack")]),s._v(" = [checkscopeContext, globalContext]\n")])]),a("p",[s._v("3.checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscopeContext = {\n  "),a("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Scope")]),s._v(": checkscope.[[scope]],\n}\n")])]),a("p",[s._v("4.第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscopeContext = {\n  "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("AO")]),s._v(": {\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n      "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n    },\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("scope2")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n  }\n}\n")])]),a("p",[s._v("5.第三步：将活动对象压入 checkscope 作用域链顶端")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscopeContext = {\n  "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("AO")]),s._v(": {\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n      "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n    },\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("scope2")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n  },\n  "),a("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Scope")]),s._v(": ["),a("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("AO")]),s._v(", [["),a("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Scope")]),s._v("]]]\n}\n")])]),a("p",[s._v("6.准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscopeContext = {\n  "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("AO")]),s._v(": {\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n      "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n    },\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("scope2")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'local scope'")]),s._v("\n  },\n  "),a("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Scope")]),s._v(": ["),a("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("AO")]),s._v(", [["),a("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Scope")]),s._v("]]]\n}\n")])]),a("p",[s._v("7.查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[a("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("ECStack")]),s._v(" = [globalContext]\n")])]),a("h2",[s._v("下一篇文章")]),a("p",[a("a",{attrs:{href:"#/qingfeng/deep/deep-06"}},[s._v("《06 从 ECMAScript 规范解读 this》")])]),a("h2",[s._v("本文相关链接")]),a("p",[a("a",{attrs:{href:"#/qingfeng/deep/deep-02"}},[s._v("《02 词法作用域和动态作用域》")])]),a("p",[a("a",{attrs:{href:"#/qingfeng/deep/deep-03"}},[s._v("《03 执行上下文栈》")])]),a("p",[a("a",{attrs:{href:"#/qingfeng/deep/deep-04"}},[s._v("《04 变量对象》")])])])])])}],!1,null,null,null);e.default=p.exports}}]);