(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d217756"],{c78d:function(e,v,_){"use strict";_.r(v);var r=_("2877"),l=Object(r.a)({},(function(){var e=this;e.$createElement;return e._self._c,e._m(0)}),[function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("section",[_("html",[_("head"),_("body",[_("h1",[e._v("带你了解 shell、bash、zsh")]),_("h2",[e._v("编译 & 解释")]),_("p",[e._v("编程语言没有编译型和解释型的区别，只能说某个语言常见的执行方式为编译成新代码执行或解释器解释执行")]),_("ul",[_("li",[_("p",[e._v("编译器")]),_("p",[e._v("编译器的输入是 A 语言的源代码，而输出是 B 语言；比如 "),_("code",{pre:!0},[e._v("C++")]),e._v("，被编译成汇编语言")])]),_("li",[_("p",[e._v("解释器")]),_("p",[e._v("解释器的输入是 A 语言的源代码，它直接执行 A 语言；一般解释器的内部实现是一个编译器加一个虚拟机，编译器把输入语言编译成中间语言，虚拟机直接执行中间语言。")])])]),_("h2",[e._v("terminal")]),_("p",[e._v("一个程序，是界面上打开的黑框框本身，比如 "),_("code",{pre:!0},[e._v("xterm")]),e._v("、"),_("code",{pre:!0},[e._v("kvt")]),e._v(" 等。"),_("code",{pre:!0},[e._v("shell")]),e._v(" 运行于其中。")]),_("h2",[e._v("shell 概念")]),_("p",[_("code",{pre:!0},[e._v("shell")]),e._v(" 是一个命令行解释器，顾名思义就是机器外面的一层壳，用于人机交互，只要是人与电脑之间交互的接口，就可以称为 "),_("code",{pre:!0},[e._v("shell")]),e._v("。表现为其作用是用户输入一条命令，"),_("code",{pre:!0},[e._v("shell")]),e._v(" 就立即解释执行一条。不局限于系统、语言等概念、操作方式和表现方式等。")]),_("p",[e._v("比如我们平时在黑框框里输入命令，叫 "),_("code",{pre:!0},[e._v("command-line interface (CLI)")]),e._v("；在屏幕上点点点，叫 "),_("code",{pre:!0},[e._v("graphical user interface (GUI)")])]),_("h2",[e._v("Interactive 和 Non-interactive")]),_("p",[_("code",{pre:!0},[e._v("Interactive")]),e._v("，如果你打开 "),_("code",{pre:!0},[e._v("terminal")]),e._v("，在里面输入 "),_("code",{pre:!0},[e._v("bash")]),e._v(" 代码，回车得到输出，你就是在运行一个 "),_("code",{pre:!0},[e._v("Interactive shell")]),e._v("，它的特征是可以让用户输入，然后直接把输出打到界面上；如果你运行一个包含了若干行的 "),_("code",{pre:!0},[e._v("shell")]),e._v(" 脚本，这些 "),_("code",{pre:!0},[e._v("shell")]),e._v(" 代码就运行在 "),_("code",{pre:!0},[e._v("Non-interactive shell")]),e._v(" 中。")]),_("h2",[e._v("Login 和 Non-login")]),_("p",[_("code",{pre:!0},[e._v("login shell")]),e._v(" 是指登录系统后所获得的顶层 "),_("code",{pre:!0},[e._v("shell")]),e._v("，比如最常用的 "),_("code",{pre:!0},[e._v("ssh")]),e._v(" 登录，登录完后得到一个 "),_("code",{pre:!0},[e._v("login shell")]),e._v(" 如果已经登录了桌面电脑，打开 "),_("code",{pre:!0},[e._v("terminal")]),e._v(" 进入的 "),_("code",{pre:!0},[e._v("shell")]),e._v(" 就是 "),_("code",{pre:!0},[e._v("Non-login shell")]),e._v("。")]),_("h2",[e._v("类型")]),_("p",[e._v("常见的 "),_("code",{pre:!0},[e._v("shell")]),e._v(" 解释器有 sh、"),_("code",{pre:!0},[e._v("bash")]),e._v(" 这两种，其他的 "),_("code",{pre:!0},[e._v("ksh")]),e._v("、"),_("code",{pre:!0},[e._v("csh")]),e._v(" 和 "),_("code",{pre:!0},[e._v("zsh")]),e._v(" 等是不常见的。"),_("code",{pre:!0},[e._v("Mac OS")]),e._v(" 中默认安装了以上所有类型，"),_("code",{pre:!0},[e._v("Windows")]),e._v(" 需要自行安装，"),_("code",{pre:!0},[e._v("Linux")]),e._v(" 更不用说了。就像上面说的，只要一门语言有解释器，就可以作为 "),_("code",{pre:!0},[e._v("shell")]),e._v(" 使用。比如 Java 有第三方解释器 J"),_("code",{pre:!0},[e._v("shell")]),e._v("，PHP 有 "),_("code",{pre:!0},[e._v("PHP Shell")]),e._v("。如果你用过 "),_("code",{pre:!0},[e._v("windows")]),e._v("，那你对 cmd 这个词一定不陌生，它是 "),_("code",{pre:!0},[e._v("windows shell")]),e._v("，官方名称叫做 "),_("code",{pre:!0},[e._v("command interpreter")]),e._v("。")]),_("h2",[e._v("bash")]),_("p",[e._v("Bash 是最常见的 "),_("code",{pre:!0},[e._v("shell")]),e._v("，Mac 中默认 "),_("code",{pre:!0},[e._v("shell")]),e._v(" 就是 "),_("code",{pre:!0},[e._v("bash")]),e._v("。bash 官网描述了唤起 "),_("code",{pre:!0},[e._v("bash")]),e._v(" "),_("code",{pre:!0},[e._v("shell")]),e._v(" 时加载的不同文件：")]),_("ul",[_("li",[_("p",[_("code",{pre:!0},[e._v("login shell")]),e._v(" 加载 "),_("code",{pre:!0},[e._v("~/.bash_profile")])])]),_("li",[_("p",[_("code",{pre:!0},[e._v("non-login shell")]),e._v(" 加载 "),_("code",{pre:!0},[e._v("~/.bashrc")]),e._v(" 。")])])]),_("h2",[e._v("zsh")]),_("p",[e._v("很多人的 mac 中会使用 "),_("code",{pre:!0},[e._v("zsh")]),e._v(" 而不是 "),_("code",{pre:!0},[e._v("bash")]),e._v("，一大半是因为 "),_("code",{pre:!0},[e._v("oh-my-zsh")]),e._v(" 这个配置集，它兼容 "),_("code",{pre:!0},[e._v("bash")]),e._v("，还有自动补全等好用的功能。"),_("code",{pre:!0},[e._v("zsh")]),e._v(" 的配置文件"),_("code",{pre:!0},[e._v("~/.zshrc")])]),_("h2",[e._v("配置 shell")]),_("p",[e._v("如上所说，"),_("code",{pre:!0},[e._v("shell")]),e._v(" 在启动时都会去找配置文件，然后运行它。你安装的一些脚本，如果想让它能够全局运行，就需要在配置文件中设置路径。有过设置路径后还是不管用的经历吗？多半是因为把配置写在了错误的配置文件里。"),_("strong",[e._v("应该在配置 "),_("code",{pre:!0},[e._v("shell")]),e._v("（最常见的是配置默认命令）之前，使用 "),_("code",{pre:!0},[e._v("echo $SHELL")]),e._v("，确认自己现在用的是什么 "),_("code",{pre:!0},[e._v("shell")]),e._v(" 后，再去编辑对应的配置文件")])]),_("h2",[e._v("总结")]),_("p",[e._v("虽然这些概念不见得会立即提高我们的工作效率，但是对它们的理解有助于我们在黑框框里输入东西时更加心中有数。")]),_("p",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/34197680"}},[e._v("阅读原文·知乎")]),_("a",{attrs:{href:"https://www.cnblogs.com/ziyunfei/p/4913758.html"}},[e._v("Bash 为何要发明 shopt 命令")]),_("a",{attrs:{href:"https://www.zhihu.com/question/21418449/answer/300879747"}},[e._v("为什么说 zsh 是 shell 中的极品？·知乎")])])])])])}],!1,null,null,null);v.default=l.exports}}]);