(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d0c210b"],{"495e":function(s,e,p){"use strict";p.r(e);var n=p("2877"),r=Object(n.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,e=s.$createElement,p=s._self._c||e;return p("section",[p("html",[p("head"),p("body",[p("h1",[s._v("03 给 npm script 传递参数和添加注释")]),p("p",[s._v("本小节会介绍 3 个知识点：给 npm script 传递参数以减少重复的 npm script；增加注释提高 npm script 脚本的可读性；控制运行时日志输出能让你专注在重要信息上。")]),p("h2",[s._v("给 npm script 传递参数")]),p("p",[p("code",{pre:!0},[s._v("eslint")]),s._v(" 内置了代码风格自动修复模式，只需给它传入 "),p("code",{pre:!0},[s._v("--fix")]),s._v(" 参数即可，在 scripts 中声明检查代码命令的同时你可能也需要声明修复代码的命令，面对这种需求，大多数同学可能会忍不住复制粘贴，如下：")]),p("pre",{pre:!0},[p("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("diff --git a/package.json b/package.json\nindex c32da1c..b6fb03e 100644\n--- a/package.json\n+++ b/package.json\n@@ -5,6 +5,7 @@\n     "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"lint:js"')]),s._v(": "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"eslint *.js"')]),s._v(",\n+    "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"lint:js:fix"')]),s._v(": "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"eslint *.js --fix"')]),s._v(",\n")])]),p("p",[s._v("在 "),p("code",{pre:!0},[s._v("lint:js")]),s._v(" 命令比较短的时候复制粘贴的方法简单粗暴有效，但是当 "),p("code",{pre:!0},[s._v("lint:js")]),s._v(" 命令变的很长之后，难免后续会有人改了 lint:js 而忘记修改 lint:js:fix（别问我为啥，我就是踩着坑过来的），更健壮的做法是，在运行 "),p("code",{pre:!0},[s._v("npm script")]),s._v(" 时给定额外的参数，代码修改如下：")]),p("pre",{pre:!0},[p("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("diff --git a/package.json b/package.json\n--- a/package.json\n+++ b/package.json\n@@ -5,6 +5,7 @@\n     "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"lint:js"')]),s._v(": "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"eslint *.js"')]),s._v(",\n+    "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"lint:js:fix"')]),s._v(": "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"npm run lint:js -- --fix"')]),s._v(",\n")])]),p("p",[s._v("要格外注意 "),p("code",{pre:!0},[s._v("--fix")]),s._v(" 参数前面的 "),p("code",{pre:!0},[s._v("--")]),s._v(" 分隔符，意指要给 "),p("code",{pre:!0},[s._v("npm run lint:js")]),s._v(" 实际指向的命令传递额外的参数。")]),p("p",[s._v("运行效果如下图：")]),p("p",[p("img",{attrs:{src:"https://user-images.githubusercontent.com/24952644/130344218-0225a389-f63b-4bb7-921b-4e97a7e71596.png",alt:"004"}})]),p("p",[s._v("上图第 2 个红色框里面是实际执行的命令，可以看到 "),p("code",{pre:!0},[s._v("--fix")]),s._v(" 参数附加在了后面。")]),p("blockquote",[p("p",[s._v("TIP#6：如果你不想单独声明 "),p("code",{pre:!0},[s._v("lint:js:fix")]),s._v(" 命令，在需要的时候直接运行： "),p("code",{pre:!0},[s._v("npm run lint:js -- --fix")]),s._v("来实现同样的效果。")])]),p("p",[s._v("问题来了，如果我想为 "),p("code",{pre:!0},[s._v("mocha")]),s._v(" 命令增加 "),p("code",{pre:!0},[s._v("--watch")]),s._v(" 模式方便在开发时立即看到测试结果，该怎么做呢？相信读到这里你心中已经有了答案。")]),p("h2",[s._v("给 npm script 添加注释")]),p("p",[s._v("如果 "),p("code",{pre:!0},[s._v("package.json")]),s._v(" 中的 "),p("code",{pre:!0},[s._v("scripts")]),s._v(" 越来越多，或者出现复杂的编排命令，你可能需要给它们添加注释以保障代码可读性，但 "),p("code",{pre:!0},[s._v("json")]),s._v(" 天然是不支持添加注释的，下面是 2 种比较 trick 的方式。")]),p("p",[s._v("第一种方式是，package.json 中可以增加 "),p("code",{pre:!0},[s._v("//")]),s._v(" 为键的值，注释就可以写在对应的值里面，"),p("code",{pre:!0},[s._v("npm")]),s._v(" 会忽略这种键，比如，我们想要给 "),p("code",{pre:!0},[s._v("test")]),s._v(" 命令添加注释，按如下方式添加：")]),p("pre",{pre:!0},[p("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("diff --git a/package.json b/package.json\n--- a/package.json\n+++ b/package.json\n@@ -10,6 +10,7 @@\n+    "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"//"')]),s._v(": "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"运行所有代码检查和单元测试"')]),s._v(",\n     "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"test"')]),s._v(": "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"npm-run-all --parallel lint:* mocha"')]),s._v("\n")])]),p("p",[s._v("这种方式的明显不足是，"),p("code",{pre:!0},[s._v("npm run")]),s._v(" 列出来的命令列表不能把注释和实际命令对应上，如果你声明了多个，"),p("code",{pre:!0},[s._v("npm run")]),s._v(" 只会列出最后那个，如下图：")]),p("p",[p("img",{attrs:{src:"https://user-images.githubusercontent.com/24952644/130344225-2b9a51a9-bb99-40b6-b1c2-ee08b1d07969.png",alt:"005"}})]),p("p",[s._v("另外一种方式是直接在 script 声明中做手脚，因为命令的本质是 "),p("code",{pre:!0},[s._v("shell")]),s._v(" 命令（适用于 "),p("code",{pre:!0},[s._v("linux")]),s._v(" 平台），我们可以在命令前面加上注释，具体做法如下：")]),p("pre",{pre:!0},[p("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("diff --git a/package.json b/package.json\n--- a/package.json\n+++ b/package.json\n@@ -10,8 +10,7 @@\n-    "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"//"')]),s._v(": "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"运行所有代码检查和单元测试"')]),s._v(",\n-    "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"test"')]),s._v(": "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"npm-run-all --parallel lint:* mocha"')]),s._v("\n+    "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"test"')]),s._v(": "),p("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"# 运行所有代码检查和单元测试 \\n    npm-run-all --parallel lint:* mocha"')]),s._v("\n")])]),p("p",[s._v("注意注释后面的换行符 "),p("code",{pre:!0},[s._v("\\n")]),s._v(" 和多余的空格，换行符是用于将注释和命令分隔开，这样命令就相当于微型的 "),p("code",{pre:!0},[s._v("shell")]),s._v(" 脚本，多余的空格是为了控制缩进，也可以用制表符 "),p("code",{pre:!0},[s._v("\\t")]),s._v(" 替代。这种做法能让 "),p("code",{pre:!0},[s._v("npm run")]),s._v(" 列出来的命令更美观，但是 "),p("code",{pre:!0},[s._v("scripts")]),s._v(" 声明阅读起来不那么整齐美观。")]),p("p",[p("img",{attrs:{src:"https://user-images.githubusercontent.com/24952644/130344229-8b284b46-0c8e-4055-8126-88244a1be2c4.png",alt:"006"}})]),p("p",[s._v("上面两种方式都有明显的缺陷，个人建议的更优方案还是把复杂的命令剥离到单独的文件中管理，在单独的文件中可以自由给它添加注释，详见后续章节。")]),p("h2",[s._v("调整 npm script 运行时日志输出")]),p("p",[s._v("在运行 "),p("code",{pre:!0},[s._v("npm script")]),s._v(" 出现问题时你需要有能力去调试它，某些情况下你需要让 "),p("code",{pre:!0},[s._v("npm script")]),s._v(" 以静默的方式运行，这类需求可通过控制运行时日志输出级别来实现。")]),p("p",[s._v("日志级别控制参数有好几个，简单举例如下：")]),p("p",[s._v("默认日志输出级别 即不加任何日志控制参数得到的输出，可能是你最常用的，能看到执行的命令、命令执行的结果。")]),p("p",[s._v("显示尽可能少的有用信息 结合其他工具调用 npm script 的时候比较有用，需要使用 "),p("code",{pre:!0},[s._v("--loglevel silent")]),s._v("，或者 "),p("code",{pre:!0},[s._v("--silent")]),s._v("，或者更简单的 "),p("code",{pre:!0},[s._v("-s")]),s._v(" 来控制，这个日志级别的输出实例如下（只有命令本身的输出，读起来非常的简洁）：")]),p("p",[p("img",{attrs:{src:"https://user-images.githubusercontent.com/24952644/130344230-3ec84cac-d045-4606-8fa8-e2102b710bd0.png",alt:"007"}})]),p("p",[s._v("如果执行各种 "),p("code",{pre:!0},[s._v("lint script")]),s._v(" 的时候启用了 "),p("code",{pre:!0},[s._v("-s")]),s._v(" 配置，代码都符合规范的话，你不会看到任何输出，这就是没有消息是最好的消息的由来，哈哈！")]),p("h3",[s._v("显示尽可能多的运行时状态")]),p("p",[s._v("排查脚本问题的时候比较有用，需要使用 "),p("code",{pre:!0},[s._v("--loglevel verbose")]),s._v("，或者 "),p("code",{pre:!0},[s._v("--verbose")]),s._v("，或者更简单的 "),p("code",{pre:!0},[s._v("-d")]),s._v(" 来控制，这个日志级别的输出实例如下（详细打印出了每个步骤的参数、返回值，下面的截图只是部分）：")]),p("p",[p("img",{attrs:{src:"https://user-images.githubusercontent.com/24952644/130344231-9cb77ec4-c4db-49c6-acbd-bf5718ee9d3d.png",alt:"008"}})])])])])}],!1,null,null,null);e.default=r.exports}}]);