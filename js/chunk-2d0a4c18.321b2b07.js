(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d0a4c18"],{"0893":function(s,e,r){"use strict";r.r(e);var a=r("2877"),v=Object(a.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,e=s.$createElement,r=s._self._c||e;return r("section",[r("html",[r("head"),r("body",[r("h1",[s._v("你不懂JS：类型与语法")]),r("h1",[s._v("第一章：类型")]),r("p",[s._v("大多数开发者会说，动态语言（就像 JS）没有 "),r("em",[s._v("类型")]),s._v("。让我们看看 ES5.1 语言规范（http://www.ecma-international.org/ecma-262/5.1/）在这个问题上是怎么说的：")]),r("blockquote",[r("p",[s._v("在本语言规范中的算法所操作的每一个值都有一种关联的类型。可能的值的类型就是那些在本条款中定义的类型。类型还进一步被分为 ECMAScript 语言类型和语言规范类型")]),r("p",[s._v("一个 ECMAScript 语言类型对应于 ECMAScript 程序员使用 ECMAScript 语言直接操作的值。ECMAScript 语言类型有 Undefined，Null，Boolean，String，Number，和 Object。")])]),r("p",[s._v("现在，如果你是一个强类型（静态类型的）语言的爱好者，你可能会反对“类型”一词的用法。在那些语言中，“类型”的含义要比它在 JS 这里的含义丰富得 "),r("em",[s._v("多")]),s._v("。")]),r("p",[s._v("有些人说 JS 不应该声称拥有“类型”，它们应被称为“标签”或者“子类型”。")]),r("p",[s._v("去他的！我们将使用这个粗糙的定义（看起来和语言规范的定义相同，只是改变了措辞）：一个 "),r("em",[s._v("类型")]),s._v(" 是一组固有的，内建的性质，对于引擎 "),r("strong",[s._v("和开发者")]),s._v(" 来说，它独一无二地标识了一个特定的值的行为，并将它与其他值区分开。")]),r("p",[s._v("换句话说，如果引擎和开发者看待值 "),r("code",{pre:!0},[s._v("42")]),s._v("（数字）与看待值 "),r("code",{pre:!0},[s._v('"42"')]),s._v("（字符串）的方式不同，那么这两个值就拥有不同的 "),r("em",[s._v("类型")]),s._v(" -- 分别是 "),r("code",{pre:!0},[s._v("number")]),s._v(" 和 "),r("code",{pre:!0},[s._v("string")]),s._v("。当你使用 "),r("code",{pre:!0},[s._v("42")]),s._v(" 时，你就在 "),r("em",[s._v("试图")]),s._v(" 做一些数字的事情，比如计算。但当你使用 "),r("code",{pre:!0},[s._v('"42"')]),s._v(" 时，你就在 "),r("em",[s._v("试图")]),s._v(" 做一些字符串的事情，比如输出到页面上，等等。"),r("strong",[s._v("这两个值有着不同的类型。")])]),r("p",[s._v("这绝不是一个完美的定义。但是对于这里的讨论足够好了。而且它与 JS 描述它的方式并不矛盾。")]),r("h1",[s._v("类型的重要意义")]),r("p",[s._v("抛开学术上关于定义的分歧，为什么 JavaScript 有或者没有 "),r("em",[s._v("类型")]),s._v(" 那么重要？")]),r("p",[s._v("对每一种 "),r("em",[s._v("类型")]),s._v(" 和它的固有行为有一个正确的理解，对于理解如何正确和准确地转换两个不同类型的值来说是绝对必要的（参见第四章，强制转换）。几乎每一个被编写过的 JS 程序都需要以某种形式处理类型的强制转换，所以，你能负责任、有信心地这么做是很重要的。")]),r("p",[s._v("如果你有一个 "),r("code",{pre:!0},[s._v("number")]),s._v(" 值 "),r("code",{pre:!0},[s._v("42")]),s._v("，但你想像一个 "),r("code",{pre:!0},[s._v("string")]),s._v(" 那样对待它，比如从位置 "),r("code",{pre:!0},[s._v("1")]),s._v(" 中将 "),r("code",{pre:!0},[s._v('"2"')]),s._v(" 作为一个字符抽取出来，那么显然你需要首先将值从 "),r("code",{pre:!0},[s._v("number")]),s._v("（强制）转换成一个 "),r("code",{pre:!0},[s._v("string")]),s._v("。")]),r("p",[s._v("这看起来十分简单。")]),r("p",[s._v("但是这样的强制转换可能以许多不同的方式发生。其中有些方式是明确的，很容易推理的，和可靠的。但是如果你不小心，强制转换就可能以非常奇怪的，令人吃惊的方式发生。")]),r("p",[s._v("对强制转换的困惑可能是 JavaScript 开发者所经历的最深刻的挫败感之一。它曾经总是因为如此 "),r("em",[s._v("危险")]),s._v(" 而为人所诟病，被认为是一个语言设计上的缺陷而应当被回避。")]),r("p",[s._v("带着对 JavaScript 类型的全面理解，我们将要阐明为什么强制转换的 "),r("em",[s._v("坏名声")]),s._v(" 是言过其实的，而且是有些冤枉的 -- 以此来反转你的视角，来看清强制转换的力量和用处。但首先，我们必须更好地把握值与类型。")]),r("h2",[s._v("内建类型")]),r("p",[s._v("JavaScript 定义了七种内建类型：")]),r("ul",[r("li",[r("code",{pre:!0},[s._v("null")])]),r("li",[r("code",{pre:!0},[s._v("undefined")])]),r("li",[r("code",{pre:!0},[s._v("boolean")])]),r("li",[r("code",{pre:!0},[s._v("number")])]),r("li",[r("code",{pre:!0},[s._v("string")])]),r("li",[r("code",{pre:!0},[s._v("object")])]),r("li",[r("code",{pre:!0},[s._v("symbol")]),s._v(" -- 在 ES6 中被加入的！")])]),r("p",[r("strong",[s._v("注意：")]),s._v(" 除了 "),r("code",{pre:!0},[s._v("object")]),s._v(" 所有这些类型都被称为“基本类型（primitives）”。")]),r("p",[r("code",{pre:!0},[s._v("typeof")]),s._v(" 操作符可以检测给定值的类型，而且总是返回七种字符串值中的一种 -- 令人吃惊的是，对于我们刚刚列出的七中内建类型，它没有一个恰好的一对一匹配。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("     === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"undefined"')]),s._v("; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("          === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"boolean"')]),s._v(";   "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v("            === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"number"')]),s._v(";    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"42"')]),s._v("          === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"string"')]),s._v(";    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" { "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("life")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(" }  === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"object"')]),s._v(";    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 在 ES6 中被加入的！")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Symbol")]),s._v("()      === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"symbol"')]),s._v(";    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[s._v("如上所示，这六种列出来的类型拥有相应类型的值，并返回一个与类型名称相同的字符串值。"),r("code",{pre:!0},[s._v("Symbol")]),s._v(" 是 ES6 的新数据类型，我们将在第三章中讨论它。")]),r("p",[s._v("正如你可能已经注意到的，我在上面的列表中剔除了 "),r("code",{pre:!0},[s._v("null")]),s._v("。它是 "),r("em",[s._v("特殊的")]),s._v(" -- 特殊在它与 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 操作符组合时是有 bug 的。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"object"')]),s._v("; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[s._v("要是它返回 "),r("code",{pre:!0},[s._v('"null"')]),s._v(" 就好了（而且是正确的！），但是这个原有的 bug 已经存在了近二十年，而且好像永远也不会被修复了，因为有太多已经存在的 web 的内容依存着这个 bug 的行为，“修复”这个 bug 将会 "),r("em",[s._v("制造")]),s._v(" 更多的“bug”并毁掉许多 web 软件。")]),r("p",[s._v("如果你想要使用 "),r("code",{pre:!0},[s._v("null")]),s._v(" 类型来测试 "),r("code",{pre:!0},[s._v("null")]),s._v(" 值，你需要一个复合条件：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n\n(!a && "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" a === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"object"')]),s._v("); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[r("code",{pre:!0},[s._v("null")]),s._v(" 是唯一一个“falsy”（也叫类 false；见第四章），但是在 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 检查中返回 "),r("code",{pre:!0},[s._v('"object"')]),s._v(" 的基本类型。")]),r("p",[s._v("那么 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 可以返回的第七种字符串值是什么？")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("a")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("){ "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* .. */")]),s._v(" } === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"function"')]),s._v("; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[s._v("很容易认为在 JS 中 "),r("code",{pre:!0},[s._v("function")]),s._v(" 是一种顶层的内建类型，特别是看到 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 操作符的这种行为时。然而，如果你阅读语言规范，你会看到它实际上是对象（object）的“子类型”。特别地，一个函数（function）被称为“可调用对象” —— 一个拥有 "),r("code",{pre:!0},[s._v("[[Call]]")]),s._v(" 内部属性、允许被调用的对象。")]),r("p",[s._v("函数实际上是对象这一事实十分有用。最重要的是，它们可以拥有属性。例如：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("a")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("b,c")]),s._v(") {\n\t"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* .. */")]),s._v("\n}\n")])]),r("p",[s._v("这个函数对象拥有一个 "),r("code",{pre:!0},[s._v("length")]),s._v(" 属性，它被设置为函数被声明时的形式参数的数量。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("a."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v("; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),r("p",[s._v("因为你使用了两个正式命名的参数（"),r("code",{pre:!0},[s._v("b")]),s._v(" 和 "),r("code",{pre:!0},[s._v("c")]),s._v("）声明了函数，所以“函数的长度”是 "),r("code",{pre:!0},[s._v("2")]),s._v("。")]),r("p",[s._v("那么数组呢？它们是 JS 原生的，所以它们是一个特殊的类型咯？")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" ["),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(","),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(","),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("] === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"object"')]),s._v("; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),r("p",[s._v("不，它们仅仅是对象。考虑它们的最恰当的方法是，也将它们认为是对象的“子类型”（见第三章），带有被数字索引的附加性质（与仅仅使用字符串键的普通对象相反），并维护着一个自动更新的 "),r("code",{pre:!0},[s._v(".length")]),s._v(" 属性。")]),r("h2",[s._v("值作为类型")]),r("p",[s._v("在 JavaScript 中，变量没有类型 -- "),r("strong",[s._v("值才有类型")]),s._v("。变量可以在任何时候，持有任何值。")]),r("p",[s._v("另一种考虑 JS 类型的方式是，JS 没有“类型强制”，也就是引擎不坚持认为一个 "),r("em",[s._v("变量")]),s._v(" 总是持有与它开始存在时相同的 "),r("em",[s._v("初始类型")]),s._v(" 的值。在一个赋值语句中，一个变量可以持有一个 "),r("code",{pre:!0},[s._v("string")]),s._v("，而在下一个赋值语句中持有一个 "),r("code",{pre:!0},[s._v("number")]),s._v("，如此类推。")]),r("p",[r("em",[s._v("值")]),s._v(" "),r("code",{pre:!0},[s._v("42")]),s._v(" 有固有的类型 "),r("code",{pre:!0},[s._v("number")]),s._v("，而且它的 "),r("em",[s._v("类型")]),s._v(" 是不能被改变的。另一个值，比如 "),r("code",{pre:!0},[s._v("string")]),s._v(" 类型的 "),r("code",{pre:!0},[s._v('"42"')]),s._v("，可以通过一个称为 "),r("strong",[s._v("强制转换")]),s._v(" 的处理从 "),r("code",{pre:!0},[s._v("number")]),s._v(" 类型的值 "),r("code",{pre:!0},[s._v("42")]),s._v(" 中创建出来（见第四章）。")]),r("p",[s._v("如果你对一个变量使用 "),r("code",{pre:!0},[s._v("typeof")]),s._v("，它不会像表面上看起来那样询问“这个变量的类型是什么？”，因为 JS 变量是没有类型的。取而代之的是，它会询问“在这个变量里的值的类型是什么？”")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" a; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "number"')]),s._v("\n\na = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" a; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "boolean"')]),s._v("\n")])]),r("p",[r("code",{pre:!0},[s._v("typeof")]),s._v(" 操作符总是返回字符串。所以：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v("; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "string"')]),s._v("\n")])]),r("p",[s._v("第一个 "),r("code",{pre:!0},[s._v("typeof 42")]),s._v(" 返回 "),r("code",{pre:!0},[s._v('"number"')]),s._v("，而 "),r("code",{pre:!0},[s._v('typeof "number"')]),s._v(" 是 "),r("code",{pre:!0},[s._v('"string"')]),s._v("。")]),r("h3",[r("code",{pre:!0},[s._v("undefined")]),s._v(' vs "undeclared"')]),r("p",[r("em",[s._v("当前")]),s._v(" 还不拥有值的变量，实际上拥有 "),r("code",{pre:!0},[s._v("undefined")]),s._v(" 值。对这样的变量调用 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 将会返回 "),r("code",{pre:!0},[s._v('"undefined"')]),s._v("：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a;\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" a; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "undefined"')]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" c;\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 稍后")]),s._v("\nb = c;\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" b; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "undefined"')]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" c; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "undefined"')]),s._v("\n")])]),r("p",[s._v("大多数开发者考虑“undefined”这个词的方式会诱使他们认为它是“undeclared（未声明）”的同义词。然而在 JS 中，这两个概念十分不同。")]),r("p",[s._v("一个“undefined”变量是在可访问的作用域中已经被声明过的，但是在 "),r("em",[s._v("这个时刻")]),s._v(" 它里面没有任何值。相比之下，一个“undeclared”变量是在可访问的作用域中还没有被正式声明的。")]),r("p",[s._v("考虑这段代码：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a;\n\na; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\nb; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError: b is not defined")]),s._v("\n")])]),r("p",[s._v("一个恼人的困惑是浏览器给这种情形分配的错误消息。正如你所看到的，这个消息是“b is not defined”，这当然很容易而且很合理地使人将它与“b is undefined.”搞混。需要重申的是，“undefined”和“is not defined”是非常不同的东西。要是浏览器能告诉我们类似于“b is not found”或者“b is not declared”之类的东西就好了，那会减少这种困惑！")]),r("p",[s._v("还有一种 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 与未声明变量关联的特殊行为，进一步增强了这种困惑。考虑这段代码：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a;\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" a; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "undefined"')]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" b; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "undefined"')]),s._v("\n")])]),r("p",[r("code",{pre:!0},[s._v("typeof")]),s._v(" 操作符甚至为“undeclared”（或“not defined”）变量返回 "),r("code",{pre:!0},[s._v('"undefined"')]),s._v("。要注意的是，当我们执行 "),r("code",{pre:!0},[s._v("typeof b")]),s._v(" 时，即使 "),r("code",{pre:!0},[s._v("b")]),s._v(" 是一个未声明变量，也不会有错误被抛出。这是 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 的一种特殊的安全防卫行为。")]),r("p",[s._v("和上面类似地，要是 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 与未声明变量一起使用时返回“undeclared”就好了，而不是将其结果值与不同的“undefined”情况混为一谈。")]),r("h3",[r("code",{pre:!0},[s._v("typeof")]),s._v(" Undeclared")]),r("p",[s._v("不管怎样，当在浏览器中处理 JavaScript 时这种安全防卫是一种有用的特性，因为浏览器中多个脚本文件会将变量加载到共享的全局名称空间。")]),r("p",[r("strong",[s._v("注意:")]),s._v(" 许多开发者相信，在全局名称空间中绝不应该有任何变量，而且所有东西应当被包含在模块和私有/隔离的名称空间中。这在理论上很伟大但在实践中几乎是不可能的；但它仍然是一个值得的努力方向！幸运的是，ES6 为模块加入了头等支持，这终于使这一理论变得可行的多了。")]),r("p",[s._v("作为一个简单的例子，想象在你的程序中有一个“调试模式”，它是通过一个称为 "),r("code",{pre:!0},[s._v("DEBUG")]),s._v(" 的全局变量（标志）来控制的。在实施类似于在控制台上输出一条日志消息这样的调试任务之前，你想要检查这个变量是否被声明了。一个顶层的全局 "),r("code",{pre:!0},[s._v("var DEBUG = true")]),s._v(" 声明只包含在一个“debug.js”文件中，这个文件仅在你开发/测试时才被加载到浏览器中，而在生产环境中则不会。")]),r("p",[s._v("然而，在你其他的程序代码中，你不得不小心你是如何检查这个全局的 "),r("code",{pre:!0},[s._v("DEBUG")]),s._v(" 变量的，这样你才不会抛出一个 "),r("code",{pre:!0},[s._v("ReferenceError")]),s._v("。这种情况下 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 上的安全防卫就是我们的朋友。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 噢，这将抛出一个错误！")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("DEBUG")]),s._v(") {\n\t"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Debugging is starting"')]),s._v(" );\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这是一个安全的存在性检查")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("DEBUG")]),s._v(" !== "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"undefined"')]),s._v(") {\n\t"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Debugging is starting"')]),s._v(" );\n}\n")])]),r("p",[s._v("即便你不是在对付用户定义的变量（比如 "),r("code",{pre:!0},[s._v("DEBUG")]),s._v("），这种检查也是很有用的。如果你为一个内建的 API 做特性检查，你也会发现不抛出错误的检查很有帮助：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" atob === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"undefined"')]),s._v(") {\n\tatob = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") { "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*..*/")]),s._v(" };\n}\n")])]),r("p",[r("strong",[s._v("注意：")]),s._v(" 如果你在为一个还不存在的特性定义一个“填补”，你可能想要避免使用 "),r("code",{pre:!0},[s._v("var")]),s._v(" 来声明 "),r("code",{pre:!0},[s._v("atob")]),s._v("。如果你在 "),r("code",{pre:!0},[s._v("if")]),s._v(" 语句内部声明 "),r("code",{pre:!0},[s._v("var atob")]),s._v("，即使这个 "),r("code",{pre:!0},[s._v("if")]),s._v(" 条件没有通过（因为全局的 "),r("code",{pre:!0},[s._v("atob")]),s._v(" 已经存在），这个声明也会被提升（参见本系列的 "),r("em",[s._v("作用域与闭包")]),s._v("）到作用域的顶端。在某些浏览器中，对一些特殊类型的内建全局变量（常被称为“宿主对象”），这种重复声明也许会抛出错误。忽略 "),r("code",{pre:!0},[s._v("var")]),s._v(" 可以防止这种提升声明。")]),r("p",[s._v("另一种不带有 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 的安全防卫特性，而对全局变量进行这些检查的方法是，将所有的全局变量作为全局对象的属性来观察，在浏览器中这个全局对象基本上是 "),r("code",{pre:!0},[s._v("window")]),s._v(" 对象。所以，上面的检查可以（十分安全地）这样做：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("window")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("DEBUG")]),s._v(") {\n\t"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ..")]),s._v("\n}\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),r("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("window")]),s._v("."),r("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("atob")]),s._v(") {\n\t"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ..")]),s._v("\n}\n")])]),r("p",[s._v("和引用未声明变量不同的是，在你试着访问一个不存在的对象属性时（即便是在全局的 "),r("code",{pre:!0},[s._v("window")]),s._v(" 对象上），不会有 "),r("code",{pre:!0},[s._v("ReferenceError")]),s._v(" 被抛出。")]),r("p",[s._v("另一方面，一些开发者偏好避免手动使用 "),r("code",{pre:!0},[s._v("window")]),s._v(" 引用全局变量，特别是当你的代码需要运行在多种 JS 环境中时（例如不仅是在浏览器中，还在服务器端的 node.js 中），全局变量可能不总是称为 "),r("code",{pre:!0},[s._v("window")]),s._v("。")]),r("p",[s._v("技术上讲，这种 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 上的安全防卫即使在你不使用全局变量时也很有用，虽然这些情况不那么常见，而且一些开发者也许发现这种设计方式不那么理想。想象一个你想要其他人复制-粘贴到他们程序中或模块中的工具函数，在它里面你想要检查包含它的程序是否已经定义了一个特定的变量（以便于你可以使用它）：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomethingCool")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" helper =\n\t\t("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Feature")]),s._v("XYZ !== "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"undefined"')]),s._v(") ?\n\t\t"),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Feature")]),s._v("XYZ :\n\t\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") { "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*.. 默认的特性 ..*/")]),s._v(" };\n\n\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" val = "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("helper")]),s._v("();\n\t"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ..")]),s._v("\n}\n")])]),r("p",[r("code",{pre:!0},[s._v("doSomethingCool()")]),s._v(" 对称为 "),r("code",{pre:!0},[s._v("FeatureXYZ")]),s._v(" 变量进行检查，如果找到，就使用它，如果没找到，使用它自己的。现在，如果某个人在他的模块/程序中引入了这个工具，它会安全地检查我们是否已经定义了 "),r("code",{pre:!0},[s._v("FeatureXYZ")]),s._v("：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 一个 IIFE（参见本系列的 *作用域与闭包* 中的“立即被调用的函数表达式”）")]),s._v("\n("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("){\n\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("FeatureXYZ")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") { "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*.. my XYZ feature ..*/")]),s._v(" }\n\n\t"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 引入 `doSomethingCool(..)`")]),s._v("\n\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomethingCool")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n\t\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" helper =\n\t\t\t("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Feature")]),s._v("XYZ !== "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"undefined"')]),s._v(") ?\n\t\t\t"),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Feature")]),s._v("XYZ :\n\t\t\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") { "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*.. 默认的特性 ..*/")]),s._v(" };\n\n\t\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" val = "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("helper")]),s._v("();\n\t\t"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ..")]),s._v("\n\t}\n\n\t"),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomethingCool")]),s._v("();\n})();\n")])]),r("p",[s._v("这里，"),r("code",{pre:!0},[s._v("FeatureXYZ")]),s._v(" 根本不是一个全局变量，但我们仍然使用 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 的安全防卫来使检查变得安全。而且重要的是，我们在这里 "),r("em",[s._v("没有")]),s._v(" 可以用于检查的对象（就像我们使用 "),r("code",{pre:!0},[s._v("window.___")]),s._v(" 对全局变量做的那样），所以 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 十分有帮助。")]),r("p",[s._v("另一些开发者偏好一种称为“依赖注入”的设计模式，与 "),r("code",{pre:!0},[s._v("doSomethingCool()")]),s._v(" 隐含地检查 "),r("code",{pre:!0},[s._v("FeatureXYZ")]),s._v(" 是否在它外部/周围被定义过不同的是，它需要依赖明确地传递进来，就像这样：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomethingCool")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("FeatureXYZ")]),s._v(") {\n\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" helper = "),r("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Feature")]),s._v("XYZ ||\n\t\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") { "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*.. 默认的特性 ..*/")]),s._v(" };\n\n\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" val = "),r("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("helper")]),s._v("();\n\t"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ..")]),s._v("\n}\n")])]),r("p",[s._v("在设计这样的功能时有许多选择。这些模式里没有“正确”或“错误” -- 每种方式都有各种权衡。但总的来说，"),r("code",{pre:!0},[s._v("typeof")]),s._v(" 的未声明安全防卫给了我们更多选项，这还是很不错的。")]),r("h2",[s._v("复习")]),r("p",[s._v("JavaScript 有七种内建 "),r("em",[s._v("类型")]),s._v("："),r("code",{pre:!0},[s._v("null")]),s._v("、"),r("code",{pre:!0},[s._v("undefined")]),s._v("、"),r("code",{pre:!0},[s._v("boolean")]),s._v("、"),r("code",{pre:!0},[s._v("number")]),s._v("、"),r("code",{pre:!0},[s._v("string")]),s._v("、"),r("code",{pre:!0},[s._v("object")]),s._v("、"),r("code",{pre:!0},[s._v("symbol")]),s._v("。它们可以被 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 操作符识别。")]),r("p",[s._v("变量没有类型，但是值有类型。这些类型定义了值的固有行为。")]),r("p",[s._v("许多开发者会认为“undefined”和“undeclared”大体上是同一个东西，但是在 JavaScript 中，它们是十分不同的。"),r("code",{pre:!0},[s._v("undefined")]),s._v(" 是一个可以由被声明的变量持有的值。“未声明”意味着一个变量从来没有被声明过。")]),r("p",[s._v("JavaScript 很不幸地将这两个词在某种程度上混为了一谈，不仅体现在它的错误消息上（“ReferenceError: a is not defined”），也体现在 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 的返回值上：对于两者它都返回 "),r("code",{pre:!0},[s._v('"undefined"')]),s._v("。")]),r("p",[s._v("然而，当对一个未声明的变量使用 "),r("code",{pre:!0},[s._v("typeof")]),s._v(" 时，"),r("code",{pre:!0},[s._v("typeof")]),s._v(" 上的安全防卫机制（防止一个错误）可以在特定的情况下非常有用。")])])])])}],!1,null,null,null);e.default=v.exports}}]);