(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d0e502c"],{9351:function(s,t,a){"use strict";a.r(t);var e=a("2877"),r=Object(e.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("section",[a("html",[a("head"),a("body",[a("h1",[s._v("Git 高频使用命令")]),a("h2",[s._v("1.新增")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git checkout -b xxx "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在当前所处的分支基础之上创建xxx分支")]),s._v("\ngit checkout -b xxx yyy "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在yyy分支的基础之上创建新xxx分支")]),s._v("\n")])]),a("h2",[s._v("2.删除分支")]),a("ul",[a("li",[a("p",[s._v("2.1 删除本地")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git branch -d xxx yyy zzz "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 支持删除多个分支")]),s._v("\ngit branch -D xxx yyy zzz "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 强制删除 -D是--delete --force的缩写")]),s._v("\n")])])]),a("li",[a("p",[s._v("2.2 删除远端")]),a("p",[s._v("支持多个分支删除")]),a("ul",[a("li",[a("p",[a("code",{pre:!0},[s._v("-d <分支名>")]),s._v(" || "),a("code",{pre:!0},[s._v("--delete <分支名>")])]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git push origin -d <分支名1> <分支名2> "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除远端分支(只需要分支名不需要带有remotes)")]),s._v("\n")])]),a("p",[s._v("结果如下：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("KaKa:xxx-project kaka-mac$ git push origin -d test01 test02\nTo http://10.0.11.37:80/kaka/xxx-project.git\n- [deleted]         test01\n- [deleted]         test02\n")])])]),a("li",[a("p",[s._v("错误示例："),a("br"),s._v(" 直接使用"),a("code",{pre:!0},[s._v("<分支名>")]),s._v(",不要使用"),a("code",{pre:!0},[s._v("remotes/origin/<分支名>")])]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("KaKa:xxx-project kaka-mac$ git push origin -d remotes/origin/test01 remotes/origin/test02\n\nerror: 无法删除 "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'remotes/origin/test01'")]),s._v("：远程引用不存在\nerror: 无法删除 "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'remotes/origin/test02'")]),s._v("：远程引用不存在\nerror: 推送一些引用到 "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://10.0.11.37:80/kaka/xxx-project.git'")]),s._v(" 失败\n")])])]),a("li",[a("p",[a("code",{pre:!0},[s._v(":<分支名>")])]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git push origin :<分支名1> :<分支名2>  …… :<分支N>\n")])]),a("p",[s._v("结果如下：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("KaKa:xxx-project kaka$ git push origin :test01 :test02\nTo http://10.0.11.37:80/kaka/xxx-project.git\n- [deleted]         test01\n- [deleted]         test02\n\n")])])])])]),a("li",[a("p",[s._v("2.3 删除本地已失效的分支")]),a("p",[s._v("有时候远端分支已经删除了，"),a("code",{pre:!0},[s._v("git branch -a")]),s._v("的时候还能看到，这个时候就可以执行下面这个命令，来更新"),a("code",{pre:!0},[s._v("git branch -a")]),s._v("的状态")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git remote show origin "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 可以查看remote地址，远程分支，还有本地分支与之相对应关系等信息")]),s._v("\ngit remote prune origin "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除本地版本库上那些失效的远程追踪分支")]),s._v("\n")])])])]),a("h2",[s._v("3. 删除文件")]),a("ul",[a("li",[a("p",[a("code",{pre:!0},[s._v("clean")])]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除 untracked files")]),s._v("\ngit clean -f\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 连 untracked 的目录也一起删掉")]),s._v("\ngit clean -fd\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）")]),s._v("\ngit clean -xfd\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删")]),s._v("\ngit clean -nxfd\ngit clean -nf\ngit clean -nfd\n")])])]),a("li",[a("p",[a("code",{pre:!0},[s._v("rm")])]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除文件夹")]),s._v("\ngit "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("rm")]),s._v(" <文件夹路径> -r "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# -r 表示递归")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除文件")]),s._v("\ngit "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("rm")]),s._v(" <文件路径>\n")])]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v(" git "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("rm")]),s._v(" ./src/components/common -r "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除common文件夹")]),s._v("\n")])])])]),a("p",[s._v("二者应该有区别~具体区别又搞不太清楚···😂 "),a("code",{pre:!0},[s._v("rm")]),s._v("我的使用场景就是 "),a("code",{pre:!0},[s._v("Git")]),s._v(" 大小写不敏感时，若想更改文件名（驼峰转换）这个时候会用到这个命令。"),a("code",{pre:!0},[s._v("clean")]),s._v("是当我对项目进行"),a("code",{pre:!0},[s._v("撤销变更")]),s._v("的时候，执行"),a("code",{pre:!0},[s._v("git checkout .")]),s._v("后那些未被跟踪的文件（"),a("code",{pre:!0},[s._v("untracked files")]),s._v("）无法撤销，这个时候就可以使用"),a("code",{pre:!0},[s._v("clean")]),s._v("命令来进行删除！")]),a("h2",[s._v("4.撤销（恢复原样）")]),a("ul",[a("li",[a("p",[s._v("4.1 撤销工作区域中的修改")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git checkout .\n")])])]),a("li",[a("p",[s._v("4.2 撤销工作区中指定文件的修改")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("filename: ./package.json || package.json || src/App.vue\n\ngit checkout -- filename  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 路径是从项目的根目录开始")]),s._v("\n")])]),a("p",[s._v("这里"),a("code",{pre:!0},[s._v("撤销")]),s._v("的操作都是被 Git tracked 的文件,将所有变动过的文件还原上一次 commit 状态，但是对于新增的文件（"),a("code",{pre:!0},[s._v("U")]),s._v("-"),a("code",{pre:!0},[s._v("untracked")]),s._v("）则无任何撤销作用，这个时候就需要使用 "),a("code",{pre:!0},[s._v("git clean")]),s._v("命令来 删除 "),a("code",{pre:!0},[s._v("untracked")]),s._v("的文件,具体参考上步操作（"),a("code",{pre:!0},[s._v("删除文件")]),s._v("）")])])]),a("h2",[s._v("5. 版本回退")]),a("ul",[a("li",[a("p",[s._v("5.1 回退到指定版本"),a("code",{pre:!0},[s._v("HEAD形式")])]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 这种情况文件修改变更还在")]),s._v("\ngit reset HEAD^     "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 上一个")]),s._v("\ngit reset HEAD^^    "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 上上一个")]),s._v("\ngit reset HEAD~n    "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# n：1，2，3，4……")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 这种情况文件变更都不在（还原成初始状态）")]),s._v("\ngit reset --hard HEAD~1\n\ngit update-ref -d HEAD  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 撤销第一次commit，因为已上的操作都无法撤销第一个commit")]),s._v("\n")])])]),a("li",[a("p",[s._v("5.2 回退到指定版本"),a("code",{pre:!0},[s._v("直接版本号形式")])]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git reset xxxxxx        "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 取消某一次提交且做的修改还在")]),s._v("\ngit reset --hard xxxxxx "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 取消某一次提交且做的修改全部丢失")]),s._v("\n")])])])]),a("p",[s._v("如何后悔了！可以使用命令 "),a("code",{pre:!0},[s._v("git reflog")]),s._v(" 来查看你的每一次操作日志，该命令可以输出对应的版本号的操作记录")]),a("h2",[s._v("6. 查看日志")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看版本库的历史记录")]),s._v("\ngit "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看版本库的历史记录，美化输出")]),s._v("\ngit "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" --pretty=oneline\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看版本库的历史记录，只显示前 5 条")]),s._v("\ngit "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -5\n\ngit "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -5 --pretty=oneline\n")])]),a("h3",[s._v("7. git commit")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git commit -a "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 进入多行编辑模式")]),s._v("\n\ngit commit -m "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'x'")]),s._v("   "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 输入引号 和内容以后 就可以直接回车换行了")]),s._v("\n\ngit commit --amend -m "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'xxx'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("#  修改上一次提交的 message")]),s._v("\n\ngit rebase -i <hash-id> "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 利用这一步的 r, reword <commit>, 将要修改的某次commit之前的pick换成r 保存会进入下一步重新更改commit msg了")]),s._v("\n")])]),a("h3",[s._v("8.git tag")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 创建")]),s._v("\ngit tag v1.0          "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 创建标签（默认在最新的commit上）")]),s._v("\ngit tag v0.9 6224937  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在指定commit上创建标签")]),s._v("\ngit tag -a v0.1 -m "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"version 0.1 released"')]),s._v(" 3628164   "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在指定commit上创建有备注的标签（-a指定标签名）")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 展示")]),s._v("\ngit show <tagname>   "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 可以查看标签的文字说明")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看")]),s._v("\ngit tag              "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看所有标签")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 获取远端tag")]),s._v("\ngit fetch --tags\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 将制定tag推送到远端")]),s._v("\ngit push origin <tagname>\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 将所有tag推送到远端")]),s._v("\ngit push --tags\ngit push origin --tags\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除本地")]),s._v("\ngit tag -d <tagname>  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除tag")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除远端分支")]),s._v("\ngit push origin :refs/tags/<tagname>\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除本地所有tag")]),s._v("\ngit tag | xargs git tag -d\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除远端所有tag")]),s._v("\ngit tag -l | xargs -n 1 git push --delete origin\n")])]),a("h3",[s._v("9. git diff 查看两个分支的区别")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 本地 & 本地")]),s._v("\ngit diff develop master  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 比较develop & master分支的区别")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 本地 & 远端分支")]),s._v("\ngit diff develop origin/master\n")])]),a("h2",[s._v("10. git stash")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("（1）git stash save <message>  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。")]),s._v("\n\n（2）git stash list "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看stash了哪些存储")]),s._v("\n\n（3）git stash show "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}")]),s._v("\n\n（4）git stash show -p "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p")]),s._v("\n\n（5）git stash apply "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1}")]),s._v("\n\n（6）git stash pop "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}")]),s._v("\n\n（7）git stash drop stash@{"),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$num")]),s._v("} "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 丢弃stash@{$num}存储，从列表中删除这个存储")]),s._v("\n\n（8）git stash clear "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除所有缓存的stash")]),s._v("\n")])]),a("p",[a("a",{attrs:{href:"https:#www.cnblogs.com/zndxall/archive/2018/09/04/9586088.html"}},[s._v("git stash 原文")])]),a("h2",[s._v("11. gitk")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("gitk --all "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看 `git树图`&`diff`")]),s._v("\n")])]),a("ul",[a("li",[a("p",[s._v("如果查看到界面中文乱码，执行如下命令即可")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("git config --global gui.encoding utf-8 "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 转换成简体中文")]),s._v("\n")])])])]),a("h2",[s._v("参考文件")]),a("p",[a("a",{attrs:{href:"https://git-scm.com/book/zh/v2"}},[s._v("git 官网·中文")])]),a("p",[s._v("其他博客："),a("br"),a("a",{attrs:{href:"https:#blog.csdn.net/lamp_yang_3533/article/details/80357505"}},[s._v("1.Git 撤销修改和版本回退·CSDN")])])])])])}],!1,null,null,null);t.default=r.exports}}]);