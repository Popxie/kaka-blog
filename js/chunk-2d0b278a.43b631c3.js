(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d0b278a"],{"23f9":function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("html",[t("head"),t("body",[t("h1",[s._v("函数的扩展")]),t("h2",[s._v("函数参数的默认值")]),t("h3",[s._v("基本用法")]),t("p",[s._v("ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y")]),s._v(") {\n  y = y || "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'World'")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(x, y);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Hello World")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'China'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Hello China")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Hello World")]),s._v("\n")])]),t("p",[s._v("上面代码检查函数"),t("code",{pre:!0},[s._v("log")]),s._v("的参数"),t("code",{pre:!0},[s._v("y")]),s._v("有没有赋值，如果没有，则指定默认值为"),t("code",{pre:!0},[s._v("World")]),s._v("。这种写法的缺点在于，如果参数"),t("code",{pre:!0},[s._v("y")]),s._v("赋值了，但是对应的布尔值为"),t("code",{pre:!0},[s._v("false")]),s._v("，则该赋值不起作用。就像上面代码的最后一行，参数"),t("code",{pre:!0},[s._v("y")]),s._v("等于空字符，结果被改为默认值。")]),t("p",[s._v("为了避免这个问题，通常需要先判断一下参数"),t("code",{pre:!0},[s._v("y")]),s._v("是否被赋值，如果没有，再等于默认值。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" y === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'undefined'")]),s._v(") {\n  y = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'World'")]),s._v(";\n}\n")])]),t("p",[s._v("ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'World'")])]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(x, y);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Hello World")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'China'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Hello China")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Hello")]),s._v("\n")])]),t("p",[s._v("可以看到，ES6 的写法比 ES5 简洁许多，而且非常自然。下面是另一个例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Point")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", y = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")])]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("x")]),s._v(" = x;\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("y")]),s._v(" = y;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Point")]),s._v("();\np "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { x: 0, y: 0 }")]),s._v("\n")])]),t("p",[s._v("除了简洁，ES6 的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。")]),t("p",[s._v("参数变量是默认声明的，所以不能用"),t("code",{pre:!0},[s._v("let")]),s._v("或"),t("code",{pre:!0},[s._v("const")]),s._v("再次声明。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")])]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// error")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// error")]),s._v("\n}\n")])]),t("p",[s._v("上面代码中，参数变量"),t("code",{pre:!0},[s._v("x")]),s._v("是默认声明的，在函数体中，不能用"),t("code",{pre:!0},[s._v("let")]),s._v("或"),t("code",{pre:!0},[s._v("const")]),s._v("再次声明，否则会报错。")]),t("p",[s._v("使用参数默认值时，函数不能有同名参数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, x, y")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, x, y = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")])]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// SyntaxError: Duplicate parameter name not allowed in this context")]),s._v("\n")])]),t("p",[s._v("另外，一个容易忽略的地方是，参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("99")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("p = x + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")])]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(p);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 100")]),s._v("\n\nx = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 101")]),s._v("\n")])]),t("p",[s._v("上面代码中，参数"),t("code",{pre:!0},[s._v("p")]),s._v("的默认值是"),t("code",{pre:!0},[s._v("x + 1")]),s._v("。这时，每次调用函数"),t("code",{pre:!0},[s._v("foo")]),s._v("，都会重新计算"),t("code",{pre:!0},[s._v("x + 1")]),s._v("，而不是默认"),t("code",{pre:!0},[s._v("p")]),s._v("等于 100。")]),t("h3",[s._v("与解构赋值默认值结合使用")]),t("p",[s._v("参数默认值可以与解构赋值的默认值，结合起来使用。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{x, y = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("}")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(x, y);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("({}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined 5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1 5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError: Cannot read property 'x' of undefined")]),s._v("\n")])]),t("p",[s._v("上面代码只使用了对象的解构赋值默认值，没有使用函数参数的默认值。只有当函数"),t("code",{pre:!0},[s._v("foo")]),s._v("的参数是一个对象时，变量"),t("code",{pre:!0},[s._v("x")]),s._v("和"),t("code",{pre:!0},[s._v("y")]),s._v("才会通过解构赋值生成。如果函数"),t("code",{pre:!0},[s._v("foo")]),s._v("调用时没提供参数，变量"),t("code",{pre:!0},[s._v("x")]),s._v("和"),t("code",{pre:!0},[s._v("y")]),s._v("就不会生成，从而报错。通过提供函数参数的默认值，就可以避免这种情况。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{x, y = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("} = {}")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(x, y);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined 5")]),s._v("\n")])]),t("p",[s._v("上面代码指定，如果没有提供参数，函数"),t("code",{pre:!0},[s._v("foo")]),s._v("的参数默认为一个空对象。")]),t("p",[s._v("下面是另一个解构赋值默认值的例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fetch")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("url, { body = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(", method = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'GET'")]),s._v(", headers = {} }")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(method);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fetch")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://example.com'")]),s._v(", {})\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "GET"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fetch")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://example.com'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n")])]),t("p",[s._v("上面代码中，如果函数"),t("code",{pre:!0},[s._v("fetch")]),s._v("的第二个参数是一个对象，就可以为它的三个属性设置默认值。这种写法不能省略第二个参数，如果结合函数参数的默认值，就可以省略第二个参数。这时，就出现了双重默认值。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fetch")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("url, { body = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(", method = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'GET'")]),s._v(", headers = {} } = {}")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(method);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fetch")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://example.com'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "GET"')]),s._v("\n")])]),t("p",[s._v("上面代码中，函数"),t("code",{pre:!0},[s._v("fetch")]),s._v("没有第二个参数时，函数参数的默认值就会生效，然后才是解构赋值的默认值生效，变量"),t("code",{pre:!0},[s._v("method")]),s._v("才会取到默认值"),t("code",{pre:!0},[s._v("GET")]),s._v("。")]),t("p",[s._v("作为练习，请问下面两种写法有什么差别？")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 写法一")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m1")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", y = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("} = {}")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [x, y];\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 写法二")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{x, y} = { x: "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", y: "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" }")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [x, y];\n}\n")])]),t("p",[s._v("上面两种写法都对函数的参数设定了默认值，区别是写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数没有参数的情况")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m1")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [0, 0]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m2")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [0, 0]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// x 和 y 都有值的情况")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m1")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("8")]),s._v("}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [3, 8]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m2")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("8")]),s._v("}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [3, 8]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// x 有值，y 无值的情况")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m1")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [3, 0]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m2")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [3, undefined]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// x 和 y 都无值的情况")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m1")]),s._v("({}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [0, 0];")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m2")]),s._v("({}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [undefined, undefined]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m1")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("z")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [0, 0]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m2")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("z")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [undefined, undefined]")]),s._v("\n")])]),t("h3",[s._v("参数默认值的位置")]),t("p",[s._v("通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 例一")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", y")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [x, y];\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1, undefined]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [2, undefined]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("(, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1, 1]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 例二")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", z")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [x, y, z];\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [undefined, 5, undefined]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1, 5, undefined]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", ,"),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1, 5, 2]")]),s._v("\n")])]),t("p",[s._v("上面代码中，有默认值的参数都不是尾参数。这时，无法只省略该参数，而不省略它后面的参数，除非显式输入"),t("code",{pre:!0},[s._v("undefined")]),s._v("。")]),t("p",[s._v("如果传入"),t("code",{pre:!0},[s._v("undefined")]),s._v("，将触发该参数等于默认值，"),t("code",{pre:!0},[s._v("null")]),s._v("则没有这个效果。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", y = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")])]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(x, y);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5 null")]),s._v("\n")])]),t("p",[s._v("上面代码中，"),t("code",{pre:!0},[s._v("x")]),s._v("参数对应"),t("code",{pre:!0},[s._v("undefined")]),s._v("，结果触发了默认值，"),t("code",{pre:!0},[s._v("y")]),s._v("参数等于"),t("code",{pre:!0},[s._v("null")]),s._v("，就没有触发默认值。")]),t("h3",[s._v("函数的 length 属性")]),t("p",[s._v("指定了默认值以后，函数的"),t("code",{pre:!0},[s._v("length")]),s._v("属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，"),t("code",{pre:!0},[s._v("length")]),s._v("属性将失真。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") {})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")])]),s._v(") {})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0")]),s._v("\n("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a, b, c = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")])]),s._v(") {})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("上面代码中，"),t("code",{pre:!0},[s._v("length")]),s._v("属性的返回值，等于函数的参数个数减去指定了默认值的参数个数。比如，上面最后一个函数，定义了 3 个参数，其中有一个参数"),t("code",{pre:!0},[s._v("c")]),s._v("指定了默认值，因此"),t("code",{pre:!0},[s._v("length")]),s._v("属性等于"),t("code",{pre:!0},[s._v("3")]),s._v("减去"),t("code",{pre:!0},[s._v("1")]),s._v("，最后得到"),t("code",{pre:!0},[s._v("2")]),s._v("。")]),t("p",[s._v("这是因为"),t("code",{pre:!0},[s._v("length")]),s._v("属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，后文的 rest 参数也不会计入"),t("code",{pre:!0},[s._v("length")]),s._v("属性。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("...args")]),s._v(") {})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0")]),s._v("\n")])]),t("p",[s._v("如果设置了默认值的参数不是尾参数，那么"),t("code",{pre:!0},[s._v("length")]),s._v("属性也不再计入后面的参数了。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", b, c")]),s._v(") {})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0")]),s._v("\n("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a, b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", c")]),s._v(") {})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n")])]),t("h3",[s._v("作用域")]),t("p",[s._v("一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y = x")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(y);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("上面代码中，参数"),t("code",{pre:!0},[s._v("y")]),s._v("的默认值等于变量"),t("code",{pre:!0},[s._v("x")]),s._v("。调用函数"),t("code",{pre:!0},[s._v("f")]),s._v("时，参数形成一个单独的作用域。在这个作用域里面，默认值变量"),t("code",{pre:!0},[s._v("x")]),s._v("指向第一个参数"),t("code",{pre:!0},[s._v("x")]),s._v("，而不是全局变量"),t("code",{pre:!0},[s._v("x")]),s._v("，所以输出是"),t("code",{pre:!0},[s._v("2")]),s._v("。")]),t("p",[s._v("再看下面的例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("y = x")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(y);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n")])]),t("p",[s._v("上面代码中，函数"),t("code",{pre:!0},[s._v("f")]),s._v("调用时，参数"),t("code",{pre:!0},[s._v("y = x")]),s._v("形成一个单独的作用域。这个作用域里面，变量"),t("code",{pre:!0},[s._v("x")]),s._v("本身没有定义，所以指向外层的全局变量"),t("code",{pre:!0},[s._v("x")]),s._v("。函数调用时，函数体内部的局部变量"),t("code",{pre:!0},[s._v("x")]),s._v("影响不到默认值变量"),t("code",{pre:!0},[s._v("x")]),s._v("。")]),t("p",[s._v("如果此时，全局变量"),t("code",{pre:!0},[s._v("x")]),s._v("不存在，就会报错。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("y = x")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(y);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError: x is not defined")]),s._v("\n")])]),t("p",[s._v("下面这样写，也会报错。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x = x")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError: x is not defined")]),s._v("\n")])]),t("p",[s._v("上面代码中，参数"),t("code",{pre:!0},[s._v("x = x")]),s._v("形成一个单独作用域。实际执行的是"),t("code",{pre:!0},[s._v("let x = x")]),s._v("，由于暂时性死区的原因，这行代码会报错”x 未定义“。")]),t("p",[s._v("如果参数的默认值是一个函数，该函数的作用域也遵守这个规则。请看下面的例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'outer'")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("func = () => foo")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'inner'")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("func")]),s._v("());\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// outer")]),s._v("\n")])]),t("p",[s._v("上面代码中，函数"),t("code",{pre:!0},[s._v("bar")]),s._v("的参数"),t("code",{pre:!0},[s._v("func")]),s._v("的默认值是一个匿名函数，返回值为变量"),t("code",{pre:!0},[s._v("foo")]),s._v("。函数参数形成的单独作用域里面，并没有定义变量"),t("code",{pre:!0},[s._v("foo")]),s._v("，所以"),t("code",{pre:!0},[s._v("foo")]),s._v("指向外层的全局变量"),t("code",{pre:!0},[s._v("foo")]),s._v("，因此输出"),t("code",{pre:!0},[s._v("outer")]),s._v("。")]),t("p",[s._v("如果写成下面这样，就会报错。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("func = () => foo")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'inner'")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("func")]),s._v("());\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError: foo is not defined")]),s._v("\n")])]),t("p",[s._v("上面代码中，匿名函数里面的"),t("code",{pre:!0},[s._v("foo")]),s._v("指向函数外层，但是函数外层并没有声明变量"),t("code",{pre:!0},[s._v("foo")]),s._v("，所以就报错了。")]),t("p",[s._v("下面是一个更复杂的例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("() { x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("; }")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("y")]),s._v("();\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(x);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\nx "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n")])]),t("p",[s._v("上面代码中，函数"),t("code",{pre:!0},[s._v("foo")]),s._v("的参数形成一个单独作用域。这个作用域里面，首先声明了变量"),t("code",{pre:!0},[s._v("x")]),s._v("，然后声明了变量"),t("code",{pre:!0},[s._v("y")]),s._v("，"),t("code",{pre:!0},[s._v("y")]),s._v("的默认值是一个匿名函数。这个匿名函数内部的变量"),t("code",{pre:!0},[s._v("x")]),s._v("，指向同一个作用域的第一个参数"),t("code",{pre:!0},[s._v("x")]),s._v("。函数"),t("code",{pre:!0},[s._v("foo")]),s._v("内部又声明了一个内部变量"),t("code",{pre:!0},[s._v("x")]),s._v("，该变量与第一个参数"),t("code",{pre:!0},[s._v("x")]),s._v("由于不是同一个作用域，所以不是同一个变量，因此执行"),t("code",{pre:!0},[s._v("y")]),s._v("后，内部变量"),t("code",{pre:!0},[s._v("x")]),s._v("和外部全局变量"),t("code",{pre:!0},[s._v("x")]),s._v("的值都没变。")]),t("p",[s._v("如果将"),t("code",{pre:!0},[s._v("var x = 3")]),s._v("的"),t("code",{pre:!0},[s._v("var")]),s._v("去除，函数"),t("code",{pre:!0},[s._v("foo")]),s._v("的内部变量"),t("code",{pre:!0},[s._v("x")]),s._v("就指向第一个参数"),t("code",{pre:!0},[s._v("x")]),s._v("，与匿名函数内部的"),t("code",{pre:!0},[s._v("x")]),s._v("是一致的，所以最后输出的就是"),t("code",{pre:!0},[s._v("2")]),s._v("，而外层的全局变量"),t("code",{pre:!0},[s._v("x")]),s._v("依然不受影响。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("() { x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("; }")]),s._v(") {\n  x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("y")]),s._v("();\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(x);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nx "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n")])]),t("h3",[s._v("应用")]),t("p",[s._v("利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("throwIfMissing")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Error")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Missing parameter'")]),s._v(");\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("mustBeProvided = throwIfMissing()")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" mustBeProvided;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("()\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Error: Missing parameter")]),s._v("\n")])]),t("p",[s._v("上面代码的"),t("code",{pre:!0},[s._v("foo")]),s._v("函数，如果调用的时候没有参数，就会调用默认值"),t("code",{pre:!0},[s._v("throwIfMissing")]),s._v("函数，从而抛出一个错误。")]),t("p",[s._v("从上面代码还可以看到，参数"),t("code",{pre:!0},[s._v("mustBeProvided")]),s._v("的默认值等于"),t("code",{pre:!0},[s._v("throwIfMissing")]),s._v("函数的运行结果（注意函数名"),t("code",{pre:!0},[s._v("throwIfMissing")]),s._v("之后有一对圆括号），这表明参数的默认值不是在定义时执行，而是在运行时执行。如果参数已经赋值，默认值中的函数就不会运行。")]),t("p",[s._v("另外，可以将参数默认值设为"),t("code",{pre:!0},[s._v("undefined")]),s._v("，表明这个参数是可以省略的。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("optional = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")])]),s._v(") { ··· }\n")])]),t("h2",[s._v("rest 参数")]),t("p",[s._v("ES6 引入 rest 参数（形式为"),t("code",{pre:!0},[s._v("...变量名")]),s._v("），用于获取函数的多余参数，这样就不需要使用"),t("code",{pre:!0},[s._v("arguments")]),s._v("对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("add")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("...values")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" sum = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" val "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" values) {\n    sum += val;\n  }\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" sum;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("add")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 10")]),s._v("\n")])]),t("p",[s._v("上面代码的"),t("code",{pre:!0},[s._v("add")]),s._v("函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。")]),t("p",[s._v("下面是一个 rest 参数代替"),t("code",{pre:!0},[s._v("arguments")]),s._v("变量的例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// arguments变量的写法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sortNumbers")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Array")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("prototype")])]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("slice")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(")."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sort")]),s._v("();\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// rest参数的写法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sortNumbers")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("...numbers")]),s._v(") => numbers."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sort")]),s._v("();\n")])]),t("p",[s._v("上面代码的两种写法，比较后可以发现，rest 参数的写法更自然也更简洁。")]),t("p",[t("code",{pre:!0},[s._v("arguments")]),s._v("对象不是数组，而是一个类似数组的对象。所以为了使用数组的方法，必须使用"),t("code",{pre:!0},[s._v("Array.prototype.slice.call")]),s._v("先将其转为数组。rest 参数就不存在这个问题，它就是一个真正的数组，数组特有的方法都可以使用。下面是一个利用 rest 参数改写数组"),t("code",{pre:!0},[s._v("push")]),s._v("方法的例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("array, ...items")]),s._v(") {\n  items."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("forEach")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("item")]),s._v(") {\n    array."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("(item);\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(item);\n  });\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = [];\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("(a, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(")\n")])]),t("p",[s._v("注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a, ...b, c")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n")])]),t("p",[s._v("函数的"),t("code",{pre:!0},[s._v("length")]),s._v("属性，不包括 rest 参数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") {})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v("  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("...a")]),s._v(") {})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v("  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0")]),s._v("\n("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a, ...b")]),s._v(") {})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v("  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n")])]),t("h2",[s._v("严格模式")]),t("p",[s._v("从 ES5 开始，函数内部可以设定为严格模式。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomething")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a, b")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'use strict'")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// code")]),s._v("\n}\n")])]),t("p",[s._v("ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomething")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a, b = a")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'use strict'")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// code")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" doSomething = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{a, b}")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'use strict'")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// code")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomething")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("...a")]),s._v(") => {\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'use strict'")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// code")]),s._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" obj = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomething")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{a, b}")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'use strict'")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// code")]),s._v("\n  }\n};\n")])]),t("p",[s._v("这样规定的原因是，函数内部的严格模式，同时适用于函数体和函数参数。但是，函数执行的时候，先执行函数参数，然后再执行函数体。这样就有一个不合理的地方，只有从函数体之中，才能知道参数是否应该以严格模式执行，但是参数却应该先于函数体执行。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomething")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("070")])]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'use strict'")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" value;\n}\n")])]),t("p",[s._v("上面代码中，参数"),t("code",{pre:!0},[s._v("value")]),s._v("的默认值是八进制数"),t("code",{pre:!0},[s._v("070")]),s._v("，但是严格模式下不能用前缀"),t("code",{pre:!0},[s._v("0")]),s._v("表示八进制，所以应该报错。但是实际上，JavaScript 引擎会先成功执行"),t("code",{pre:!0},[s._v("value = 070")]),s._v("，然后进入函数体内部，发现需要用严格模式执行，这时才会报错。")]),t("p",[s._v("虽然可以先解析函数体代码，再执行参数代码，但是这样无疑就增加了复杂性。因此，标准索性禁止了这种用法，只要参数使用了默认值、解构赋值、或者扩展运算符，就不能显式指定严格模式。")]),t("p",[s._v("两种方法可以规避这种限制。第一种是设定全局性的严格模式，这是合法的。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("'use strict'")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomething")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a, b = a")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// code")]),s._v("\n}\n")])]),t("p",[s._v("第二种是把函数包在一个无参数的立即执行函数里面。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" doSomething = ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'use strict'")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")])]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" value;\n  };\n}());\n")])]),t("h2",[s._v("name 属性")]),t("p",[s._v("函数的"),t("code",{pre:!0},[s._v("name")]),s._v("属性，返回该函数的函数名。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {}\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "foo"')]),s._v("\n")])]),t("p",[s._v("这个属性早就被浏览器广泛支持，但是直到 ES6，才将其写入了标准。")]),t("p",[s._v("需要注意的是，ES6 对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，ES5 的"),t("code",{pre:!0},[s._v("name")]),s._v("属性，会返回空字符串，而 ES6 的"),t("code",{pre:!0},[s._v("name")]),s._v("属性会返回实际的函数名。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" f = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES5")]),s._v("\nf."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ""')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES6")]),s._v("\nf."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "f"')]),s._v("\n")])]),t("p",[s._v("上面代码中，变量"),t("code",{pre:!0},[s._v("f")]),s._v("等于一个匿名函数，ES5 和 ES6 的"),t("code",{pre:!0},[s._v("name")]),s._v("属性返回的值不一样。")]),t("p",[s._v("如果将一个具名函数赋值给一个变量，则 ES5 和 ES6 的"),t("code",{pre:!0},[s._v("name")]),s._v("属性都返回这个具名函数原本的名字。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" bar = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("baz")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES5")]),s._v("\nbar."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "baz"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES6")]),s._v("\nbar."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "baz"')]),s._v("\n")])]),t("p",[t("code",{pre:!0},[s._v("Function")]),s._v("构造函数返回的函数实例，"),t("code",{pre:!0},[s._v("name")]),s._v("属性的值为"),t("code",{pre:!0},[s._v("anonymous")]),s._v("。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Function")]),s._v(")."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "anonymous"')]),s._v("\n")])]),t("p",[t("code",{pre:!0},[s._v("bind")]),s._v("返回的函数，"),t("code",{pre:!0},[s._v("name")]),s._v("属性值会加上"),t("code",{pre:!0},[s._v("bound")]),s._v("前缀。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {};\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("({})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "bound foo"')]),s._v("\n\n("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("){})."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("({})."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "bound "')]),s._v("\n")])]),t("h2",[s._v("箭头函数")]),t("h3",[s._v("基本用法")]),t("p",[s._v("ES6 允许使用“箭头”（"),t("code",{pre:!0},[s._v("=>")]),s._v("）定义函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v(" = v => v;\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" f = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" v;\n};\n")])]),t("p",[s._v("如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") => "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" f = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") { "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(" };\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sum")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("num1, num2")]),s._v(") => num1 + num2;\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" sum = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("num1, num2")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" num1 + num2;\n};\n")])]),t("p",[s._v("如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用"),t("code",{pre:!0},[s._v("return")]),s._v("语句返回。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sum")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("num1, num2")]),s._v(") => { "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" num1 + num2; }\n")])]),t("p",[s._v("由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getTempItem")]),s._v(" = id => { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": id, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Temp"')]),s._v(" };\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getTempItem")]),s._v(" = id => ({ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": id, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Temp"')]),s._v(" });\n")])]),t("p",[s._v("下面是一种特殊情况，虽然可以运行，但会得到错误的结果。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") => { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" };\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n")])]),t("p",[s._v("上面代码中，原始意图是返回一个对象"),t("code",{pre:!0},[s._v("{ a: 1 }")]),s._v("，但是由于引擎认为大括号是代码块，所以执行了一行语句"),t("code",{pre:!0},[s._v("a: 1")]),s._v("。这时，"),t("code",{pre:!0},[s._v("a")]),s._v("可以被解释为语句的标签，因此实际执行的语句是"),t("code",{pre:!0},[s._v("1;")]),s._v("，然后函数就结束了，没有返回值。")]),t("p",[s._v("如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fn")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") => "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doesNotReturn")]),s._v("();\n")])]),t("p",[s._v("箭头函数可以与变量解构结合使用。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("full")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("{ first, last }")]),s._v(") => first + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + last;\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("full")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("person")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" person."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("first")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + person."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("last")]),s._v(";\n}\n")])]),t("p",[s._v("箭头函数使得表达更加简洁。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("isEven")]),s._v(" = n => n % "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("square")]),s._v(" = n => n * n;\n")])]),t("p",[s._v("上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。")]),t("p",[s._v("箭头函数的一个用处是简化回调函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正常函数写法")]),s._v("\n["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("map")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x * x;\n});\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 箭头函数写法")]),s._v("\n["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("map")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v(" =>")]),s._v(" x * x);\n")])]),t("p",[s._v("另一个例子是")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正常函数写法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result = values."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sort")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a, b")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" a - b;\n});\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 箭头函数写法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result = values."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sort")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a, b")]),s._v(") =>")]),s._v(" a - b);\n")])]),t("p",[s._v("下面是 rest 参数与箭头函数结合的例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("numbers")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("...nums")]),s._v(") => nums;\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("numbers")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,2,3,4,5]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("headAndTail")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("head, ...tail")]),s._v(") => [head, tail];\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("headAndTail")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1,[2,3,4,5]]")]),s._v("\n")])]),t("h3",[s._v("使用注意点")]),t("p",[s._v("箭头函数有几个使用注意点。")]),t("p",[s._v("（1）函数体内的"),t("code",{pre:!0},[s._v("this")]),s._v("对象，就是定义时所在的对象，而不是使用时所在的对象。")]),t("p",[s._v("（2）不可以当作构造函数，也就是说，不可以使用"),t("code",{pre:!0},[s._v("new")]),s._v("命令，否则会抛出一个错误。")]),t("p",[s._v("（3）不可以使用"),t("code",{pre:!0},[s._v("arguments")]),s._v("对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。")]),t("p",[s._v("（4）不可以使用"),t("code",{pre:!0},[s._v("yield")]),s._v("命令，因此箭头函数不能用作 Generator 函数。")]),t("p",[s._v("上面四点中，第一点尤其值得注意。"),t("code",{pre:!0},[s._v("this")]),s._v("对象的指向是可变的，但是在箭头函数中，它是固定的。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'id:'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("id")]),s._v(");\n  }, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(");\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" id = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("21")]),s._v(";\n\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("({ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(" });\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// id: 42")]),s._v("\n")])]),t("p",[s._v("上面代码中，"),t("code",{pre:!0},[s._v("setTimeout")]),s._v("的参数是一个箭头函数，这个箭头函数的定义生效是在"),t("code",{pre:!0},[s._v("foo")]),s._v("函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时"),t("code",{pre:!0},[s._v("this")]),s._v("应该指向全局对象"),t("code",{pre:!0},[s._v("window")]),s._v("，这时应该输出"),t("code",{pre:!0},[s._v("21")]),s._v("。但是，箭头函数导致"),t("code",{pre:!0},[s._v("this")]),s._v("总是指向函数定义生效时所在的对象（本例是"),t("code",{pre:!0},[s._v("{id: 42}")]),s._v("），所以输出的是"),t("code",{pre:!0},[s._v("42")]),s._v("。")]),t("p",[s._v("箭头函数可以让"),t("code",{pre:!0},[s._v("setTimeout")]),s._v("里面的"),t("code",{pre:!0},[s._v("this")]),s._v("，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Timer")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("s1")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("s2")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 箭头函数")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setInterval")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("s1")]),s._v("++, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(");\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 普通函数")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setInterval")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("s2")]),s._v("++;\n  }, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(");\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" timer = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Timer")]),s._v("();\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'s1: '")]),s._v(", timer."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("s1")]),s._v("), "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3100")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'s2: '")]),s._v(", timer."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("s2")]),s._v("), "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3100")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// s1: 3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// s2: 0")]),s._v("\n")])]),t("p",[s._v("上面代码中，"),t("code",{pre:!0},[s._v("Timer")]),s._v("函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的"),t("code",{pre:!0},[s._v("this")]),s._v("绑定定义时所在的作用域（即"),t("code",{pre:!0},[s._v("Timer")]),s._v("函数），后者的"),t("code",{pre:!0},[s._v("this")]),s._v("指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，"),t("code",{pre:!0},[s._v("timer.s1")]),s._v("被更新了 3 次，而"),t("code",{pre:!0},[s._v("timer.s2")]),s._v("一次都没更新。")]),t("p",[s._v("箭头函数可以让"),t("code",{pre:!0},[s._v("this")]),s._v("指向固定化，这种特性很有利于封装回调函数。下面是一个例子，DOM 事件的回调函数封装在一个对象里面。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" handler = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'123456'")]),s._v(",\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("init")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("document")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("addEventListener")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'click'")]),s._v(",\n      "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("event")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("doSomething")]),s._v("(event."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("type")]),s._v("), "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(");\n  },\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("doSomething")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("type")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Handling '")]),s._v(" + type  + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' for '")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("id")]),s._v(");\n  }\n};\n")])]),t("p",[s._v("上面代码的"),t("code",{pre:!0},[s._v("init")]),s._v("方法中，使用了箭头函数，这导致这个箭头函数里面的"),t("code",{pre:!0},[s._v("this")]),s._v("，总是指向"),t("code",{pre:!0},[s._v("handler")]),s._v("对象。否则，回调函数运行时，"),t("code",{pre:!0},[s._v("this.doSomething")]),s._v("这一行会报错，因为此时"),t("code",{pre:!0},[s._v("this")]),s._v("指向"),t("code",{pre:!0},[s._v("document")]),s._v("对象。")]),t("p",[t("code",{pre:!0},[s._v("this")]),s._v("指向的固定化，并不是因为箭头函数内部有绑定"),t("code",{pre:!0},[s._v("this")]),s._v("的机制，实际原因是箭头函数根本没有自己的"),t("code",{pre:!0},[s._v("this")]),s._v("，导致内部的"),t("code",{pre:!0},[s._v("this")]),s._v("就是外层代码块的"),t("code",{pre:!0},[s._v("this")]),s._v("。正是因为它没有"),t("code",{pre:!0},[s._v("this")]),s._v("，所以也就不能用作构造函数。")]),t("p",[s._v("所以，箭头函数转成 ES5 的代码如下。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES6")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'id:'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("id")]),s._v(");\n  }, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(");\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" _this = "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(";\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'id:'")]),s._v(", _this."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("id")]),s._v(");\n  }, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(");\n}\n")])]),t("p",[s._v("上面代码中，转换后的 ES5 版本清楚地说明了，箭头函数里面根本没有自己的"),t("code",{pre:!0},[s._v("this")]),s._v("，而是引用外层的"),t("code",{pre:!0},[s._v("this")]),s._v("。")]),t("p",[s._v("请问下面的代码之中有几个"),t("code",{pre:!0},[s._v("this")]),s._v("？")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'id:'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("id")]),s._v(");\n      };\n    };\n  };\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" f = foo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("});\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" t1 = f."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("})()(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// id: 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" t2 = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("()."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("})(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// id: 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" t3 = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("()()."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("}); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// id: 1")]),s._v("\n")])]),t("p",[s._v("上面代码之中，只有一个"),t("code",{pre:!0},[s._v("this")]),s._v("，就是函数"),t("code",{pre:!0},[s._v("foo")]),s._v("的"),t("code",{pre:!0},[s._v("this")]),s._v("，所以"),t("code",{pre:!0},[s._v("t1")]),s._v("、"),t("code",{pre:!0},[s._v("t2")]),s._v("、"),t("code",{pre:!0},[s._v("t3")]),s._v("都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的"),t("code",{pre:!0},[s._v("this")]),s._v("，它们的"),t("code",{pre:!0},[s._v("this")]),s._v("其实都是最外层"),t("code",{pre:!0},[s._v("foo")]),s._v("函数的"),t("code",{pre:!0},[s._v("this")]),s._v("。")]),t("p",[s._v("除了"),t("code",{pre:!0},[s._v("this")]),s._v("，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量："),t("code",{pre:!0},[s._v("arguments")]),s._v("、"),t("code",{pre:!0},[s._v("super")]),s._v("、"),t("code",{pre:!0},[s._v("new.target")]),s._v("。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("setTimeout")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'args:'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(");\n  }, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(");\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("8")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// args: [2, 4, 6, 8]")]),s._v("\n")])]),t("p",[s._v("上面代码中，箭头函数内部的变量"),t("code",{pre:!0},[s._v("arguments")]),s._v("，其实是函数"),t("code",{pre:!0},[s._v("foo")]),s._v("的"),t("code",{pre:!0},[s._v("arguments")]),s._v("变量。")]),t("p",[s._v("另外，由于箭头函数没有自己的"),t("code",{pre:!0},[s._v("this")]),s._v("，所以当然也就不能用"),t("code",{pre:!0},[s._v("call()")]),s._v("、"),t("code",{pre:!0},[s._v("apply()")]),s._v("、"),t("code",{pre:!0},[s._v("bind()")]),s._v("这些方法去改变"),t("code",{pre:!0},[s._v("this")]),s._v("的指向。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [\n    ("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("x")]),s._v(")."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("({ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'inner'")]),s._v(" })()\n  ];\n})."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("({ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'outer'")]),s._v(" });\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['outer']")]),s._v("\n")])]),t("p",[s._v("上面代码中，箭头函数没有自己的"),t("code",{pre:!0},[s._v("this")]),s._v("，所以"),t("code",{pre:!0},[s._v("bind")]),s._v("方法无效，内部的"),t("code",{pre:!0},[s._v("this")]),s._v("指向外部的"),t("code",{pre:!0},[s._v("this")]),s._v("。")]),t("p",[s._v("长期以来，JavaScript 语言的"),t("code",{pre:!0},[s._v("this")]),s._v("对象一直是一个令人头痛的问题，在对象方法中使用"),t("code",{pre:!0},[s._v("this")]),s._v("，必须非常小心。箭头函数”绑定”"),t("code",{pre:!0},[s._v("this")]),s._v("，很大程度上解决了这个困扰。")]),t("h3",[s._v("不适用场合")]),t("p",[s._v("由于箭头函数使得"),t("code",{pre:!0},[s._v("this")]),s._v("从“动态”变成“静态”，下面两个场合不应该使用箭头函数。")]),t("p",[s._v("第一个场合是定义对象的方法，且该方法内部包括"),t("code",{pre:!0},[s._v("this")]),s._v("。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" cat = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("lives")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("9")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("jumps")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("lives")]),s._v("--;\n  }\n}\n")])]),t("p",[s._v("上面代码中，"),t("code",{pre:!0},[s._v("cat.jumps()")]),s._v("方法是一个箭头函数，这是错误的。调用"),t("code",{pre:!0},[s._v("cat.jumps()")]),s._v("时，如果是普通函数，该方法内部的"),t("code",{pre:!0},[s._v("this")]),s._v("指向"),t("code",{pre:!0},[s._v("cat")]),s._v("；如果写成上面那样的箭头函数，使得"),t("code",{pre:!0},[s._v("this")]),s._v("指向全局对象，因此不会得到预期结果。这是因为对象不构成单独的作用域，导致"),t("code",{pre:!0},[s._v("jumps")]),s._v("箭头函数定义时的作用域就是全局作用域。")]),t("p",[s._v("第二个场合是需要动态"),t("code",{pre:!0},[s._v("this")]),s._v("的时候，也不应使用箭头函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" button = "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("document")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("getElementById")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'press'")]),s._v(");\nbutton."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("addEventListener")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'click'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("() =>")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("classList")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toggle")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'on'")]),s._v(");\n});\n")])]),t("p",[s._v("上面代码运行时，点击按钮会报错，因为"),t("code",{pre:!0},[s._v("button")]),s._v("的监听函数是一个箭头函数，导致里面的"),t("code",{pre:!0},[s._v("this")]),s._v("就是全局对象。如果改成普通函数，"),t("code",{pre:!0},[s._v("this")]),s._v("就会动态指向被点击的按钮对象。")]),t("p",[s._v("另外，如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，而是要使用普通函数，这样可以提高代码可读性。")]),t("h3",[s._v("嵌套的箭头函数")]),t("p",[s._v("箭头函数内部，还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("insert")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("into")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("array")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("after")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("afterValue")]),s._v(") {\n      array."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("splice")]),s._v("(array."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("indexOf")]),s._v("(afterValue) + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", value);\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" array;\n    }};\n  }};\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("insert")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("into")]),s._v("(["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("])."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("after")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//[1, 2, 3]")]),s._v("\n")])]),t("p",[s._v("上面这个函数，可以使用箭头函数改写。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("insert")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(") => ({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("into")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("array")]),s._v(") =>")]),s._v(" ({"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("after")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("afterValue")]),s._v(") =>")]),s._v(" {\n  array."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("splice")]),s._v("(array."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("indexOf")]),s._v("(afterValue) + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", value);\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" array;\n}})});\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("insert")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("into")]),s._v("(["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("])."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("after")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//[1, 2, 3]")]),s._v("\n")])]),t("p",[s._v("下面是一个部署管道机制（pipeline）的例子，即前一个函数的输出是后一个函数的输入。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("pipeline")]),s._v(" = ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("...funcs")]),s._v(") =>\n  "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("val")]),s._v(" =>")]),s._v(" funcs."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("reduce")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a, b")]),s._v(") =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("b")]),s._v("(a), val);\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("plus1")]),s._v(" = a => a + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("mult2")]),s._v(" = a => a * "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" addThenMult = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("pipeline")]),s._v("(plus1, mult2);\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("addThenMult")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 12")]),s._v("\n")])]),t("p",[s._v("如果觉得上面的写法可读性比较差，也可以采用下面的写法。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("plus1")]),s._v(" = a => a + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("mult2")]),s._v(" = a => a * "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("mult2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("plus1")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("))\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 12")]),s._v("\n")])]),t("p",[s._v("箭头函数还有一个功能，就是可以很方便地改写 λ 演算。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// λ演算的写法")]),s._v("\nfix = λf.(λx."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("(λv."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("x")]),s._v("(x)(v)))(λx."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("(λv."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("x")]),s._v("(x)(v)))\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES6的写法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("fix")]),s._v(" = f => ("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("x")]),s._v("(x)(v)))\n               ("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("x")]),s._v("(x)(v)));\n")])]),t("p",[s._v("上面两种写法，几乎是一一对应的。由于 λ 演算对于计算机科学非常重要，这使得我们可以用 ES6 作为替代工具，探索计算机科学。")]),t("h2",[s._v("尾调用优化")]),t("h3",[s._v("什么是尾调用？")]),t("p",[s._v("尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v("){\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("g")]),s._v("(x);\n}\n")])]),t("p",[s._v("上面代码中，函数"),t("code",{pre:!0},[s._v("f")]),s._v("的最后一步是调用函数"),t("code",{pre:!0},[s._v("g")]),s._v("，这就叫尾调用。")]),t("p",[s._v("以下三种情况，都不属于尾调用。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 情况一")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v("){\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" y = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("g")]),s._v("(x);\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" y;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 情况二")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v("){\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("g")]),s._v("(x) + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 情况三")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v("){\n  "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("g")]),s._v("(x);\n}\n")])]),t("p",[s._v("上面代码中，情况一是调用函数"),t("code",{pre:!0},[s._v("g")]),s._v("之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v("){\n  "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("g")]),s._v("(x);\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(";\n}\n")])]),t("p",[s._v("尾调用不一定出现在函数尾部，只要是最后一步操作即可。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (x > "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("m")]),s._v("(x)\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("n")]),s._v("(x);\n}\n")])]),t("p",[s._v("上面代码中，函数"),t("code",{pre:!0},[s._v("m")]),s._v("和"),t("code",{pre:!0},[s._v("n")]),s._v("都属于尾调用，因为它们都是函数"),t("code",{pre:!0},[s._v("f")]),s._v("的最后一步操作。")]),t("h3",[s._v("尾调用优化")]),t("p",[s._v("尾调用之所以与其他调用不同，就在于它的特殊的调用位置。")]),t("p",[s._v("我们知道，函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数"),t("code",{pre:!0},[s._v("A")]),s._v("的内部调用函数"),t("code",{pre:!0},[s._v("B")]),s._v("，那么在"),t("code",{pre:!0},[s._v("A")]),s._v("的调用帧上方，还会形成一个"),t("code",{pre:!0},[s._v("B")]),s._v("的调用帧。等到"),t("code",{pre:!0},[s._v("B")]),s._v("运行结束，将结果返回到"),t("code",{pre:!0},[s._v("A")]),s._v("，"),t("code",{pre:!0},[s._v("B")]),s._v("的调用帧才会消失。如果函数"),t("code",{pre:!0},[s._v("B")]),s._v("内部还调用函数"),t("code",{pre:!0},[s._v("C")]),s._v("，那就还有一个"),t("code",{pre:!0},[s._v("C")]),s._v("的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。")]),t("p",[s._v("尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" m = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" n = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("g")]),s._v("(m + n);\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("();\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("g")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(");\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("();\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("g")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(");\n")])]),t("p",[s._v("上面代码中，如果函数"),t("code",{pre:!0},[s._v("g")]),s._v("不是尾调用，函数"),t("code",{pre:!0},[s._v("f")]),s._v("就需要保存内部变量"),t("code",{pre:!0},[s._v("m")]),s._v("和"),t("code",{pre:!0},[s._v("n")]),s._v("的值、"),t("code",{pre:!0},[s._v("g")]),s._v("的调用位置等信息。但由于调用"),t("code",{pre:!0},[s._v("g")]),s._v("之后，函数"),t("code",{pre:!0},[s._v("f")]),s._v("就结束了，所以执行到最后一步，完全可以删除"),t("code",{pre:!0},[s._v("f(x)")]),s._v("的调用帧，只保留"),t("code",{pre:!0},[s._v("g(3)")]),s._v("的调用帧。")]),t("p",[s._v("这就叫做“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。")]),t("p",[s._v("注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("addOne")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v("){\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" one = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("inner")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("b")]),s._v("){\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" b + one;\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("inner")]),s._v("(a);\n}\n")])]),t("p",[s._v("上面的函数不会进行尾调用优化，因为内层函数"),t("code",{pre:!0},[s._v("inner")]),s._v("用到了外层函数"),t("code",{pre:!0},[s._v("addOne")]),s._v("的内部变量"),t("code",{pre:!0},[s._v("one")]),s._v("。")]),t("p",[s._v("注意，目前只有 Safari 浏览器支持尾调用优化，Chrome 和 Firefox 都不支持。")]),t("h3",[s._v("尾递归")]),t("p",[s._v("函数调用自身，称为递归。如果尾调用自身，就称为尾递归。")]),t("p",[s._v("递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (n === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" n * "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("(n - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 120")]),s._v("\n")])]),t("p",[s._v("上面代码是一个阶乘函数，计算"),t("code",{pre:!0},[s._v("n")]),s._v("的阶乘，最多需要保存"),t("code",{pre:!0},[s._v("n")]),s._v("个调用记录，复杂度 O(n) 。")]),t("p",[s._v("如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n, total")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (n === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" total;\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("(n - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", n * total);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 120")]),s._v("\n")])]),t("p",[s._v("还有一个比较著名的例子，就是计算 Fibonacci 数列，也能充分说明尾递归优化的重要性。")]),t("p",[s._v("非尾递归的 Fibonacci 数列实现如下。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Fibonacci")]),s._v(" (n) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ( n <= "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" ) {"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("};\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Fibonacci")]),s._v("(n - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") + "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Fibonacci")]),s._v("(n - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(");\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Fibonacci")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 89")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Fibonacci")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 超时")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Fibonacci")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("500")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 超时")]),s._v("\n")])]),t("p",[s._v("尾递归优化过的 Fibonacci 数列实现如下。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("Fibonacci2")]),s._v(" (n , ac1 = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" , ac2 = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("( n <= "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" ) {"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" ac2};\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Fibonacci2")]),s._v(" (n - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", ac2, ac1 + ac2);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Fibonacci2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 573147844013817200000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Fibonacci2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 7.0330367711422765e+208")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Fibonacci2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10000")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Infinity")]),s._v("\n")])]),t("p",[s._v("由此可见，“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6 亦是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署“尾调用优化”。这就是说，ES6 中只要使用尾递归，就不会发生栈溢出（或者层层递归造成的超时），相对节省内存。")]),t("h3",[s._v("递归函数的改写")]),t("p",[s._v("尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。比如上面的例子，阶乘函数 factorial 需要用到一个中间变量"),t("code",{pre:!0},[s._v("total")]),s._v("，那就把这个中间变量改写成函数的参数。这样做的缺点就是不太直观，第一眼很难看出来，为什么计算"),t("code",{pre:!0},[s._v("5")]),s._v("的阶乘，需要传入两个参数"),t("code",{pre:!0},[s._v("5")]),s._v("和"),t("code",{pre:!0},[s._v("1")]),s._v("？")]),t("p",[s._v("两个方法可以解决这个问题。方法一是在尾递归函数之外，再提供一个正常形式的函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tailFactorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n, total")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (n === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" total;\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tailFactorial")]),s._v("(n - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", n * total);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tailFactorial")]),s._v("(n, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 120")]),s._v("\n")])]),t("p",[s._v("上面代码通过一个正常形式的阶乘函数"),t("code",{pre:!0},[s._v("factorial")]),s._v("，调用尾递归函数"),t("code",{pre:!0},[s._v("tailFactorial")]),s._v("，看起来就正常多了。")]),t("p",[s._v("函数式编程有一个概念，叫做柯里化（currying），意思是将多参数的函数转换成单参数的形式。这里也可以使用柯里化。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("currying")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fn, n")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("m")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" fn."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("call")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(", m, n);\n  };\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tailFactorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n, total")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (n === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" total;\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tailFactorial")]),s._v("(n - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", n * total);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" factorial = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("currying")]),s._v("(tailFactorial, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 120")]),s._v("\n")])]),t("p",[s._v("上面代码通过柯里化，将尾递归函数"),t("code",{pre:!0},[s._v("tailFactorial")]),s._v("变为只接受一个参数的"),t("code",{pre:!0},[s._v("factorial")]),s._v("。")]),t("p",[s._v("第二种方法就简单多了，就是采用 ES6 的函数默认值。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n, total = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")])]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (n === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" total;\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("(n - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", n * total);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("factorial")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 120")]),s._v("\n")])]),t("p",[s._v("上面代码中，参数"),t("code",{pre:!0},[s._v("total")]),s._v("有默认值"),t("code",{pre:!0},[s._v("1")]),s._v("，所以调用时不用提供这个值。")]),t("p",[s._v("总结一下，递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现，这就是为什么尾递归对这些语言极其重要。对于其他支持“尾调用优化”的语言（比如 Lua，ES6），只需要知道循环可以用递归代替，而一旦使用递归，就最好使用尾递归。")]),t("h3",[s._v("严格模式")]),t("p",[s._v("ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。")]),t("p",[s._v("这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。")]),t("ul",[t("li",[t("code",{pre:!0},[s._v("func.arguments")]),s._v("：返回调用时函数的参数。")]),t("li",[t("code",{pre:!0},[s._v("func.caller")]),s._v("：返回调用当前函数的那个函数。")])]),t("p",[s._v("尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("restricted")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'use strict'")]),s._v(";\n  restricted."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("caller")]),s._v(";    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n  restricted."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("arguments")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("restricted")]),s._v("();\n")])]),t("h3",[s._v("尾递归优化的实现")]),t("p",[s._v("尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中，有没有办法也使用尾递归优化呢？回答是可以的，就是自己实现尾递归优化。")]),t("p",[s._v("它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会溢出。怎么做可以减少调用栈呢？就是采用“循环”换掉“递归”。")]),t("p",[s._v("下面是一个正常的递归函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sum")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (y > "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sum")]),s._v("(x + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", y - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n  } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x;\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sum")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100000")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Uncaught RangeError: Maximum call stack size exceeded(…)")]),s._v("\n")])]),t("p",[s._v("上面代码中，"),t("code",{pre:!0},[s._v("sum")]),s._v("是一个递归函数，参数"),t("code",{pre:!0},[s._v("x")]),s._v("是需要累加的值，参数"),t("code",{pre:!0},[s._v("y")]),s._v("控制递归次数。一旦指定"),t("code",{pre:!0},[s._v("sum")]),s._v("递归 100000 次，就会报错，提示超出调用栈的最大次数。")]),t("p",[s._v("蹦床函数（trampoline）可以将递归执行转为循环执行。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("trampoline")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("f")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (f && f "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Function")]),s._v(") {\n    f = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("f")]),s._v("();\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" f;\n}\n")])]),t("p",[s._v("上面就是蹦床函数的一个实现，它接受一个函数"),t("code",{pre:!0},[s._v("f")]),s._v("作为参数。只要"),t("code",{pre:!0},[s._v("f")]),s._v("执行后返回一个函数，就继续执行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。")]),t("p",[s._v("然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sum")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (y > "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" sum."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bind")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", x + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", y - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n  } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x;\n  }\n}\n")])]),t("p",[s._v("上面代码中，"),t("code",{pre:!0},[s._v("sum")]),s._v("函数的每次执行，都会返回自身的另一个版本。")]),t("p",[s._v("现在，使用蹦床函数执行"),t("code",{pre:!0},[s._v("sum")]),s._v("，就不会发生调用栈溢出。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("trampoline")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sum")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100000")]),s._v("))\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 100001")]),s._v("\n")])]),t("p",[s._v("蹦床函数并不是真正的尾递归优化，下面的实现才是。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tco")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("f")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" value;\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" active = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" accumulated = [];\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("accumulator")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n    accumulated."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("push")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("arguments")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!active) {\n      active = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (accumulated."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("length")]),s._v(") {\n        value = f."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("apply")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(", accumulated."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("shift")]),s._v("());\n      }\n      active = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" value;\n    }\n  };\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" sum = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("tco")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (y > "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sum")]),s._v("(x + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", y - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x\n  }\n});\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("sum")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100000")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 100001")]),s._v("\n")])]),t("p",[s._v("上面代码中，"),t("code",{pre:!0},[s._v("tco")]),s._v("函数是尾递归优化的实现，它的奥妙就在于状态变量"),t("code",{pre:!0},[s._v("active")]),s._v("。默认情况下，这个变量是不激活的。一旦进入尾递归优化的过程，这个变量就激活了。然后，每一轮递归"),t("code",{pre:!0},[s._v("sum")]),s._v("返回的都是"),t("code",{pre:!0},[s._v("undefined")]),s._v("，所以就避免了递归执行；而"),t("code",{pre:!0},[s._v("accumulated")]),s._v("数组存放每一轮"),t("code",{pre:!0},[s._v("sum")]),s._v("执行的参数，总是有值的，这就保证了"),t("code",{pre:!0},[s._v("accumulator")]),s._v("函数内部的"),t("code",{pre:!0},[s._v("while")]),s._v("循环总是会执行。这样就很巧妙地将“递归”改成了“循环”，而后一轮的参数会取代前一轮的参数，保证了调用栈只有一层。")]),t("h2",[s._v("函数参数的尾逗号")]),t("p",[s._v("ES2017 "),t("a",{attrs:{href:"https://github.com/jeffmo/es-trailing-function-commas"}},[s._v("允许")]),s._v("函数的最后一个参数有尾逗号（trailing comma）。")]),t("p",[s._v("此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("clownsEverywhere")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("\n  param1,\n  param2\n")]),s._v(") { "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("clownsEverywhere")]),s._v("(\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bar'")]),s._v("\n);\n")])]),t("p",[s._v("上面代码中，如果在"),t("code",{pre:!0},[s._v("param2")]),s._v("或"),t("code",{pre:!0},[s._v("bar")]),s._v("后面加一个逗号，就会报错。")]),t("p",[s._v("如果像上面这样，将参数写成多行（即每个参数占据一行），以后修改代码的时候，想为函数"),t("code",{pre:!0},[s._v("clownsEverywhere")]),s._v("添加第三个参数，或者调整参数的次序，就势必要在原来最后一个参数后面添加一个逗号。这对于版本管理系统来说，就会显示添加逗号的那一行也发生了变动。这看上去有点冗余，因此新的语法允许定义和调用时，尾部直接有一个逗号。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("clownsEverywhere")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("\n  param1,\n  param2,\n")]),s._v(") { "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("clownsEverywhere")]),s._v("(\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bar'")]),s._v(",\n);\n")])]),t("p",[s._v("这样的规定也使得，函数参数与数组和对象的尾逗号规则，保持一致了。")]),t("h2",[s._v("Function.prototype.toString()")]),t("p",[t("a",{attrs:{href:"https://github.com/tc39/Function-prototype-toString-revision"}},[s._v("ES2019")]),s._v(" 对函数实例的"),t("code",{pre:!0},[s._v("toString()")]),s._v("方法做出了修改。")]),t("p",[t("code",{pre:!0},[s._v("toString()")]),s._v("方法返回函数代码本身，以前会省略注释和空格。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* foo comment */")]),s._v(" foo () {}\n\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toString")]),s._v("()\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// function foo() {}")]),s._v("\n")])]),t("p",[s._v("上面代码中，函数"),t("code",{pre:!0},[s._v("foo")]),s._v("的原始代码包含注释，函数名"),t("code",{pre:!0},[s._v("foo")]),s._v("和圆括号之间有空格，但是"),t("code",{pre:!0},[s._v("toString()")]),s._v("方法都把它们省略了。")]),t("p",[s._v("修改后的"),t("code",{pre:!0},[s._v("toString()")]),s._v("方法，明确要求返回一模一样的原始代码。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* foo comment */")]),s._v(" foo () {}\n\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("toString")]),s._v("()\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "function /* foo comment */ foo () {}"')]),s._v("\n")])]),t("h2",[s._v("catch 命令的参数省略")]),t("p",[s._v("JavaScript 语言的"),t("code",{pre:!0},[s._v("try...catch")]),s._v("结构，以前明确要求"),t("code",{pre:!0},[s._v("catch")]),s._v("命令后面必须跟参数，接受"),t("code",{pre:!0},[s._v("try")]),s._v("代码块抛出的错误对象。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n} "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (err) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 处理错误")]),s._v("\n}\n")])]),t("p",[s._v("上面代码中，"),t("code",{pre:!0},[s._v("catch")]),s._v("命令后面带有参数"),t("code",{pre:!0},[s._v("err")]),s._v("。")]),t("p",[s._v("很多时候，"),t("code",{pre:!0},[s._v("catch")]),s._v("代码块可能用不到这个参数。但是，为了保证语法正确，还是必须写。"),t("a",{attrs:{href:"https://github.com/tc39/proposal-optional-catch-binding"}},[s._v("ES2019")]),s._v(" 做出了改变，允许"),t("code",{pre:!0},[s._v("catch")]),s._v("语句省略参数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n} "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n")])])])])])}],!1,null,null,null);a.default=e.exports}}]);