(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d0dab7d"],{"6d92":function(s,t,n){"use strict";n.r(t);var a=n("2877"),e=Object(a.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("section",[n("html",[n("head"),n("body",[n("h1",[s._v("Git 命令大全")]),n("h2",[s._v("1.帮助")]),n("p",[s._v("git 内置了对命令非常详细的解释，可以供我们快速查阅")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查找可用命令")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("help")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查找所有可用命令")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("help")]),s._v(" -a\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在文档当中查找特定的命令")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# git help <命令>")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("help")]),s._v(" add\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("help")]),s._v(" commit\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("help")]),s._v(" init\n")])]),n("h2",[s._v("2.状态")]),n("p",[s._v("显示索引文件（也就是当前工作空间）和当前的头指针指向的提交的不同")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示分支，未跟踪文件，更改和其他不同")]),s._v("\n$ git status\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看其他的git status的用法")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("help")]),s._v(" status\n")])]),n("h2",[s._v("3.信息")]),n("p",[s._v("获取某些文件，某些分支，某次提交等 git 信息")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示commit历史，以及每次commit发生变更的文件")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" --"),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("stat")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 搜索提交历史，根据关键词")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -S [keyword]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示某个commit之后的所有变动，每个commit占据一行")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" [tag] HEAD --pretty=format:%s\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件')]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" [tag] HEAD --grep feature\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示某个文件的版本历史，包括文件改名")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" --follow [file]\n$ git whatchanged [file]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示指定文件相关的每一次diff")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -p [file]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示过去5次提交")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -5 --pretty --oneline\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示所有提交过的用户，按提交次数排序")]),s._v("\n$ git shortlog -sn\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示指定文件是什么人在什么时间修改过")]),s._v("\n$ git blame [file]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示暂存区和工作区的差异")]),s._v("\n$ git diff\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示暂存区和上一个commit的差异")]),s._v("\n$ git diff --cached [file]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示工作区与当前分支最新commit之间的差异")]),s._v("\n$ git diff HEAD\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示两次提交之间的差异")]),s._v("\n$ git diff [first-branch]...[second-branch]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示今天你写了多少行代码")]),s._v("\n$ git diff --shortstat "),n("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"@{0 day ago}"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 比较暂存区和版本库差异")]),s._v("\n$ git diff --staged\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 比较暂存区和版本库差异")]),s._v("\n$ git diff --cached\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 仅仅比较统计信息")]),s._v("\n$ git diff --"),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("stat")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示某次提交的元数据和内容变化")]),s._v("\n$ git show [commit]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示某次提交发生变化的文件")]),s._v("\n$ git show --name-only [commit]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示某次提交时，某个文件的内容")]),s._v("\n$ git show [commit]:[filename]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示当前分支的最近几次提交")]),s._v("\n$ git reflog\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看远程分支")]),s._v("\n$ git br -r\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 创建新的分支")]),s._v("\n$ git br <new_branch>\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看各个分支最后提交信息")]),s._v("\n$ git br -v\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看已经被合并到当前分支的分支")]),s._v("\n$ git br --merged\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看尚未被合并到当前分支的分支")]),s._v("\n$ git br --no-merged\n")])]),n("h2",[s._v("4.添加")]),n("p",[s._v("添加文件到当前工作空间中。如果你不使用 git add 将文件添加进去，那么这些文件也不会添加到之后的提交之中")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 添加一个文件")]),s._v("\n$ git add test.js\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 添加一个子目录中的文件")]),s._v("\n$ git add /path/to/file/test.js\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 支持正则表达式")]),s._v("\n$ git add ./*.js\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 添加指定文件到暂存区")]),s._v("\n$ git add [file1] [file2] ...\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 添加指定目录到暂存区，包括子目录")]),s._v("\n$ git add ["),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("dir")]),s._v("]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 添加当前目录的所有文件到暂存区")]),s._v("\n$ git add .\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 添加每个变化前，都会要求确认")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 对于同一个文件的多处变化，可以实现分次提交")]),s._v("\n$ git add -p\n")])]),n("h2",[s._v("5.删除")]),n("p",[s._v("rm 和上面的 add 命令相反，从工作空间中去掉某个文件")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 移除 HelloWorld.js")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("rm")]),s._v(" HelloWorld.js\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 移除子目录中的文件")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("rm")]),s._v(" /pather/to/the/file/HelloWorld.js\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除工作区文件，并且将这次删除放入暂存区")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("rm")]),s._v(" [file1] [file2] ...\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 停止追踪指定文件，但该文件会保留在工作区")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("rm")]),s._v(" --cached [file]\n")])]),n("h2",[s._v("6.分支")]),n("p",[s._v("管理分支，可以通过下列命令对分支进行增删改查切换等")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看所有的分支和远程分支")]),s._v("\n$ git branch -a\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 创建一个新的分支")]),s._v("\n$ git branch [branch-name]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 重命名分支")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# git branch -m <旧名称> <新名称>")]),s._v("\n$ git branch -m [branch-name] [new-branch-name]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 编辑分支的介绍")]),s._v("\n$ git branch [branch-name] --edit-description\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 列出所有本地分支")]),s._v("\n$ git branch\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 列出所有远程分支")]),s._v("\n$ git branch -r\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 新建一个分支，但依然停留在当前分支")]),s._v("\n$ git branch [branch-name]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 新建一个分支，并切换到该分支")]),s._v("\n$ git checkout -b [branch]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 新建一个分支，指向指定commit")]),s._v("\n$ git branch [branch] [commit]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 新建一个分支，与指定的远程分支建立追踪关系")]),s._v("\n$ git branch --track [branch] [remote-branch]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 切换到指定分支，并更新工作区")]),s._v("\n$ git checkout [branch-name]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 切换到上一个分支")]),s._v("\n$ git checkout -\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 建立追踪关系，在现有分支与指定的远程分支之间")]),s._v("\n$ git branch --set-upstream [branch] [remote-branch]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 合并指定分支到当前分支")]),s._v("\n$ git merge [branch]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 选择一个commit，合并进当前分支")]),s._v("\n$ git cherry-pick [commit]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除分支")]),s._v("\n$ git branch -d [branch-name]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除远程分支")]),s._v("\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 切换到某个分支")]),s._v("\n$ git co <branch>\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 创建新的分支，并且切换过去")]),s._v("\n$ git co -b <new_branch>\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 基于branch创建新的new_branch")]),s._v("\n$ git co -b <new_branch> <branch>\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除")]),s._v("\n$ git co "),n("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$id")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 把某次历史提交记录checkout出来，创建成一个分支")]),s._v("\n$ git co "),n("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$id")]),s._v(" -b <new_branch>\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除某个分支")]),s._v("\n$ git br -d <branch>\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 强制删除某个分支 (未被合并的分支被删除的时候需要强制)")]),s._v("\n$ git br -D <branch>\n")])]),n("h2",[s._v("7.检出")]),n("p",[s._v("将当前工作空间更新到索引所标识的或者某一特定的工作空间")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 检出一个版本库，默认将更新到master分支")]),s._v("\n$ git checkout\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 检出到一个特定的分支")]),s._v("\n$ git checkout branchName\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('# 新建一个分支，并且切换过去，相当于"git branch <名字>; git checkout <名字>"')]),s._v("\n$ git checkout -b newBranch\n")])]),n("h2",[s._v("8.远程同步")]),n("p",[s._v("远程同步的远端分支")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 下载远程仓库的所有变动")]),s._v("\n$ git fetch [remote]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示所有远程仓库")]),s._v("\n$ git remote -v\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示某个远程仓库的信息")]),s._v("\n$ git remote show [remote]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 增加一个新的远程仓库，并命名")]),s._v("\n$ git remote add [shortname] [url]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看远程服务器地址和仓库名称")]),s._v("\n$ git remote -v\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 添加远程仓库地址")]),s._v("\n$ git remote add origin git@ github:xxx/xxx.git\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 设置远程仓库地址(用于修改远程仓库地址)")]),s._v("\n$ git remote set-url origin git@ github.com:xxx/xxx.git\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除远程仓库")]),s._v("\n$ git remote "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("rm")]),s._v(" <repository>\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 上传本地指定分支到远程仓库")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 把本地的分支更新到远端origin的master分支上")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# git push <远端> <分支>")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# git push 相当于 git push origin master")]),s._v("\n$ git push [remote] [branch]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 强行推送当前分支到远程仓库，即使有冲突")]),s._v("\n$ git push [remote] --force\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 推送所有分支到远程仓库")]),s._v("\n$ git push [remote] --all\n")])]),n("h2",[s._v("9.撤销")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 恢复暂存区的指定文件到工作区")]),s._v("\n$ git checkout [file]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 恢复某个commit的指定文件到暂存区和工作区")]),s._v("\n$ git checkout [commit] [file]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 恢复暂存区的所有文件到工作区")]),s._v("\n$ git checkout .\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变")]),s._v("\n$ git reset [file]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 重置暂存区与工作区，与上一次commit保持一致")]),s._v("\n$ git reset --hard\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变")]),s._v("\n$ git reset [commit]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致")]),s._v("\n$ git reset --hard [commit]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 重置当前HEAD为指定commit，但保持暂存区和工作区不变")]),s._v("\n$ git reset --keep [commit]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 新建一个commit，用来撤销指定commit")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 后者的所有变化都将被前者抵消，并且应用到当前分支")]),s._v("\n$ git revert [commit]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 恢复最后一次提交的状态")]),s._v("\n$ git revert HEAD\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 暂时将未提交的变化移除，稍后再移入")]),s._v("\n$ git stash\n$ git stash pop\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 列所有stash")]),s._v("\n$ git stash list\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 恢复暂存的内容")]),s._v("\n$ git stash apply\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除暂存区")]),s._v("\n$ git stash drop\n")])]),n("h2",[s._v("10.commit")]),n("p",[s._v("将当前索引的更改保存为一个新的提交，这个提交包括用户做出的更改与信息")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 提交暂存区到仓库区附带提交信息")]),s._v("\n$ git commit -m [message]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 提交暂存区的指定文件到仓库区")]),s._v("\n$ git commit [file1] [file2] ... -m [message]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 提交工作区自上次commit之后的变化，直接到仓库区")]),s._v("\n$ git commit -a\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 提交时显示所有diff信息")]),s._v("\n$ git commit -v\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 使用一次新的commit，替代上一次提交")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 如果代码没有任何新变化，则用来改写上一次commit的提交信息")]),s._v("\n$ git commit --amend -m [message]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 重做上一次commit，并包括指定文件的新变化")]),s._v("\n$ git commit --amend [file1] [file2] ...\n")])]),n("h2",[s._v("11.diff")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示工作目录和索引的不同")]),s._v("\n$ git diff\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示索引和最近一次提交的不同")]),s._v("\n$ git diff --cached\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示工作目录和最近一次提交的不同")]),s._v("\n$ git diff HEAD\n")])]),n("h2",[s._v("12.grep")]),n("p",[s._v("可以在版本库中快速查找"),n("br"),s._v(" 可选配置：")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 感谢Travis Jeffery提供的以下用法：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在搜索结果中显示行号")]),s._v("\n$ git config --global grep.lineNumber "),n("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 是搜索结果可读性更好")]),s._v("\n$ git config --global alias.g "),n("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"grep --break --heading --line-number"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在所有的java中查找variableName")]),s._v("\n$ git grep "),n("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'variableName'")]),s._v(" -- "),n("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'*.java'")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('# 搜索包含 "arrayListName" 和, "add" 或 "remove" 的所有行')]),s._v("\n$ git grep -e "),n("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'arrayListName'")]),s._v(" --and \\( -e add -e remove \\)\n")])]),n("h2",[s._v("13.log")]),n("p",[s._v("显示这个版本库的所有提交")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示所有提交")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 显示某几条提交信息")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -n 10\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 仅显示合并提交")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" --merges\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看该文件每次提交记录")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" <file>\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看每次详细修改内容的diff")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -p <file>\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看最近两次详细修改内容的diff")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" -p -2\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("#查看提交统计信息")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("log")]),s._v(" --"),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("stat")]),s._v("\n")])]),n("h2",[s._v("14.merge")]),n("p",[s._v("合并就是将外部的提交合并到自己的分支中")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 将其他分支合并到当前分支")]),s._v("\n$ git merge branchName\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在合并时创建一个新的合并后的提交")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 不要 Fast-Foward 合并，这样可以生成 merge 提交")]),s._v("\n$ git merge --no-ff branchName\n")])]),n("h2",[s._v("15.mv")]),n("p",[s._v("重命名或移动一个文件")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 重命名")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("mv")]),s._v(" test.js test2.js\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 移动")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("mv")]),s._v(" test.js ./new/path/test.js\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 改名文件，并且将这个改名放入暂存区")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("mv")]),s._v(" [file-original] [file-renamed]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 强制重命名或移动")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 这个文件已经存在，将要覆盖掉")]),s._v("\n$ git "),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("mv")]),s._v(" -f myFile existingFile\n")])]),n("h2",[s._v("16.tag")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 列出所有tag")]),s._v("\n$ git tag\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 新建一个tag在当前commit")]),s._v("\n$ git tag [tag]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 新建一个tag在指定commit")]),s._v("\n$ git tag [tag] [commit]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除本地tag")]),s._v("\n$ git tag -d [tag]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除本地所有tag")]),s._v("\ngit tag | xargs git tag -d\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除远端所有tag")]),s._v("\ngit tag -l | xargs -n 1 git push --delete origin\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 删除远程tag")]),s._v("\n$ git push origin :refs/tags/[tagName]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看tag信息")]),s._v("\n$ git show [tag]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 提交指定tag")]),s._v("\n$ git push [remote] [tag]\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 提交所有tag")]),s._v("\n$ git push [remote] --tags\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 新建一个分支，指向某个tag")]),s._v("\n$ git checkout -b [branch] [tag]\n")])]),n("h2",[s._v("17.pull")]),n("p",[s._v("从远端版本库合并到当前分支")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 从远端origin的master分支更新版本库")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# git pull <远端> <分支>")]),s._v("\n$ git pull origin master\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 抓取远程仓库所有分支更新并合并到本地，不要快进合并")]),s._v("\n$ git pull --no-ff\n")])]),n("h2",[s._v("18.ci")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("$ git ci <file>\n$ git ci .\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 将git add, git rm和git ci等操作都合并在一起做")]),s._v("\n$ git ci -a\n$ git ci -am "),n("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"some comments"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 修改最后一次提交记录")]),s._v("\n$ git ci --amend\n")])]),n("h2",[s._v("19.rebase (谨慎使用)")]),n("p",[s._v("将一个分支上所有的提交历史都应用到另一个分支上 "),n("em",[s._v("不要在一个已经公开的远端分支上使用 rebase")]),s._v(".")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 将experimentBranch应用到master上面")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# git rebase <basebranch> <topicbranch>")]),s._v("\n$ git rebase master experimentBranch\n")])]),n("h2",[s._v("20.reset (谨慎使用)")]),n("p",[s._v("将当前的头指针复位到一个特定的状态。这样可以使你撤销 merge、pull、commits、add 等 这是个很强大的命令，但是在使用时一定要清楚其所产生的后果")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 使 staging 区域恢复到上次提交时的状态，不改变现在的工作目录")]),s._v("\n$ git reset\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 使 staging 区域恢复到上次提交时的状态，覆盖现在的工作目录")]),s._v("\n$ git reset --hard\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 将当前分支恢复到某次提交，不改变现在的工作目录")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 在工作目录中所有的改变仍然存在")]),s._v("\n$ git reset dha78as\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 将当前分支恢复到某次提交，覆盖现在的工作目录")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 并且删除所有未提交的改变和指定提交之后的所有提交")]),s._v("\n$ git reset --hard dha78as\n")])]),n("h2",[s._v("21.其他")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 生成一个可供发布的压缩包")]),s._v("\n$ git archive\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 打补丁")]),s._v("\n$ git apply ../sync.patch\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 测试补丁能否成功")]),s._v("\n$ git apply --check ../sync.patch\n\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 查看Git的版本")]),s._v("\n$ git --version\n")])]),n("blockquote",[n("p",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/137194960"}},[s._v("git 命令大全·知乎")])])])])])])}],!1,null,null,null);t.default=e.exports}}]);