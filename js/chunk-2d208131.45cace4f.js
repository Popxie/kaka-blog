(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-2d208131"],{a2f0:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("html",[t("head"),t("body",[t("h1",[s._v("04 变量对象")]),t("blockquote",[t("p",[s._v("系列第四篇，具体讲解执行上下文中的变量对象与活动对象。全局上下文下的变量对象是什么？函数上下文下的活动对象是如何分析和执行的？还有两个思考题帮你加深印象，快来看看吧！")])]),t("h2",[s._v("前言")]),t("p",[s._v("在上篇"),t("a",{attrs:{href:"#/qingfeng/deep/deep-03"}},[s._v("《03 执行上下文栈》")]),s._v("中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。")]),t("p",[s._v("对于每个执行上下文，都有三个重要属性：")]),t("ul",[t("li",[s._v("变量对象(Variable object，VO)")]),t("li",[s._v("作用域链(Scope chain)")]),t("li",[s._v("this")])]),t("p",[s._v("今天重点讲讲创建变量对象的过程。")]),t("h2",[s._v("变量对象")]),t("p",[s._v("变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。")]),t("p",[s._v("因为不同执行上下文下的变量对象稍有不同，所以我们来聊聊全局上下文下的变量对象和函数上下文下的变量对象。")]),t("h2",[s._v("全局上下文")]),t("p",[s._v("我们先了解一个概念，叫全局对象。在 "),t("a",{attrs:{href:"http://www.w3school.com.cn/jsref/jsref_obj_global.asp"}},[s._v("W3School")]),s._v(" 中也有介绍：")]),t("blockquote",[t("p",[s._v("全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。")])]),t("blockquote",[t("p",[s._v("在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。")])]),t("blockquote",[t("p",[s._v("例如，当 JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。")])]),t("p",[s._v("如果看的不是很懂的话，容我再来介绍下全局对象:")]),t("p",[s._v("1.可以通过 this 引用，在客户端 JavaScript 中，全局对象就是 Window 对象。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(")\n")])]),t("p",[s._v("2.全局对象是由 Object 构造函数实例化的一个对象。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Object")]),s._v(")\n")])]),t("p",[s._v("3.预定义了一堆，嗯，一大堆函数和属性。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 都能生效")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("Math")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("random")]),s._v("())\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("Math")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("random")]),s._v("())\n")])]),t("p",[s._v("4.作为全局变量的宿主。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(")\n")])]),t("p",[s._v("5.客户端 JavaScript 中，全局对象有 window 属性指向自身。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("window")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("a")]),s._v(")\n\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("window")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("this")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[s._v("b")]),s._v(")\n")])]),t("p",[s._v("花了一个大篇幅介绍全局对象，其实就想说：")]),t("p",[s._v("全局上下文中的变量对象就是全局对象呐！")]),t("h2",[s._v("函数上下文")]),t("p",[s._v("在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象。")]),t("p",[s._v("活动对象和变量对象其实是一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 activation object 呐，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。")]),t("p",[s._v("活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。")]),t("h2",[s._v("执行过程")]),t("p",[s._v("执行上下文的代码会分成两个阶段进行处理：分析和执行，我们也可以叫做：")]),t("ol",[t("li",[s._v("进入执行上下文")]),t("li",[s._v("代码执行")])]),t("h3",[s._v("进入执行上下文")]),t("p",[s._v("当进入执行上下文时，这时候还没有执行代码，")]),t("p",[s._v("变量对象会包括：")]),t("ol",[t("li",[t("p",[s._v("函数的所有形参 (如果是函数上下文)")]),t("ul",[t("li",[s._v("由名称和对应值组成的一个变量对象的属性被创建")]),t("li",[s._v("没有实参，属性值设为 undefined")])])]),t("li",[t("p",[s._v("函数声明")]),t("ul",[t("li",[s._v("由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建")]),t("li",[s._v("如果变量对象已经存在相同名称的属性，则完全替换这个属性")])])]),t("li",[t("p",[s._v("变量声明")]),t("ul",[t("li",[s._v("由名称和对应值（undefined）组成一个变量对象的属性被创建；")]),t("li",[s._v("如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性")])])])]),t("p",[s._v("举个例子：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("c")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {}\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" d = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {}\n\n  b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")\n")])]),t("p",[s._v("在进入执行上下文后，这时候的 AO 是：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("AO")]),s._v(" = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("c")]),s._v(": reference to "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("c")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("){},\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("d")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n}\n")])]),t("h3",[s._v("代码执行")]),t("p",[s._v("在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值")]),t("p",[s._v("还是上面的例子，当代码执行完后，这时候的 AO 是：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("AO")]),s._v(" = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("c")]),s._v(": reference to "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("c")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("){},\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("d")]),s._v(": reference to "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[s._v("FunctionExpression")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"d"')]),s._v("\n}\n")])]),t("p",[s._v("到这里变量对象的创建过程就介绍完了，让我们简洁的总结我们上述所说：")]),t("ol",[t("li",[t("p",[s._v("全局上下文的变量对象初始化是全局对象")])]),t("li",[t("p",[s._v("函数上下文的变量对象初始化只包括 Arguments 对象")])]),t("li",[t("p",[s._v("在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值")])]),t("li",[t("p",[s._v("在代码执行阶段，会再次修改变量对象的属性值")])])]),t("h2",[s._v("思考题")]),t("p",[s._v("最后让我们看几个例子：")]),t("p",[s._v("1.第一题")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(a)\n  a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ???")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(a)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("bar")]),s._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ???")]),s._v("\n")])]),t("p",[s._v("第一段会报错："),t("code",{pre:!0},[s._v("Uncaught ReferenceError: a is not defined")]),s._v("。")]),t("p",[s._v("第二段会打印："),t("code",{pre:!0},[s._v("1")]),s._v("。")]),t("p",[s._v('这是因为函数中的 "a" 并没有通过 var 关键字声明，所有不会被存放在 AO 中。')]),t("p",[s._v("第一段执行 console 的时候， AO 的值是：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-variable constant_"}},[s._v("AO")]),s._v(" = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n  }\n}\n")])]),t("p",[s._v("没有 a 的值，然后就会到全局去找，全局也没有，所以会报错。")]),t("p",[s._v("当第二段执行 console 的时候，全局对象已经被赋予了 a 属性，这时候就可以从全局找到 a 的值，所以会打印 1。")]),t("p",[s._v("2.第二题")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("(foo)\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[s._v("console")]),s._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[s._v("log")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(")\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n")])]),t("p",[s._v("会打印函数，而不是 undefined 。")]),t("p",[s._v("这是因为在进入执行上下文时，首先会处理函数声明，其次会处理变量声明，如果如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。")]),t("h2",[s._v("下一篇文章")]),t("p",[t("a",{attrs:{href:"#/qingfeng/deep/deep-05"}},[s._v("《05 作用域链》")])]),t("h2",[s._v("本文相关链接")]),t("p",[t("a",{attrs:{href:"#/qingfeng/deep/deep-03"}},[s._v("《03 执行上下文栈》")])])])])])}],!1,null,null,null);a.default=e.exports}}]);